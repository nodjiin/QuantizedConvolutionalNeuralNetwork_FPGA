// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module zhang_cnn_ti_loop_proc13 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        curr_layer_in_in_ch,
        m_axi_weights_AWVALID,
        m_axi_weights_AWREADY,
        m_axi_weights_AWADDR,
        m_axi_weights_AWID,
        m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT,
        m_axi_weights_AWQOS,
        m_axi_weights_AWREGION,
        m_axi_weights_AWUSER,
        m_axi_weights_WVALID,
        m_axi_weights_WREADY,
        m_axi_weights_WDATA,
        m_axi_weights_WSTRB,
        m_axi_weights_WLAST,
        m_axi_weights_WID,
        m_axi_weights_WUSER,
        m_axi_weights_ARVALID,
        m_axi_weights_ARREADY,
        m_axi_weights_ARADDR,
        m_axi_weights_ARID,
        m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT,
        m_axi_weights_ARQOS,
        m_axi_weights_ARREGION,
        m_axi_weights_ARUSER,
        m_axi_weights_RVALID,
        m_axi_weights_RREADY,
        m_axi_weights_RDATA,
        m_axi_weights_RLAST,
        m_axi_weights_RID,
        m_axi_weights_RUSER,
        m_axi_weights_RRESP,
        m_axi_weights_BVALID,
        m_axi_weights_BREADY,
        m_axi_weights_BRESP,
        m_axi_weights_BID,
        m_axi_weights_BUSER,
        weights3,
        image1,
        curr_layer_in_in_w,
        curr_layer_in_in_h,
        curr_layer_in_out_w,
        curr_layer_in_out_h,
        curr_layer_in_out_ch,
        curr_layer_in_ker_w,
        curr_layer_in_ker_h,
        curr_layer_in_str_w,
        curr_layer_in_str_h,
        to_r,
        row,
        col,
        outputfm_address0,
        outputfm_ce0,
        outputfm_we0,
        outputfm_d0,
        curr_layer_in_out_w_out_din,
        curr_layer_in_out_w_out_full_n,
        curr_layer_in_out_w_out_write,
        curr_layer_in_out_h_out_din,
        curr_layer_in_out_h_out_full_n,
        curr_layer_in_out_h_out_write,
        curr_layer_in_out_ch_out_din,
        curr_layer_in_out_ch_out_full_n,
        curr_layer_in_out_ch_out_write,
        to_out_din,
        to_out_full_n,
        to_out_write,
        row_out_din,
        row_out_full_n,
        row_out_write,
        col_out_din,
        col_out_full_n,
        col_out_write,
        out5_cast,
        out5_cast_out_din,
        out5_cast_out_full_n,
        out5_cast_out_write
);

parameter    ap_ST_st1_fsm_0 = 23'b1;
parameter    ap_ST_st2_fsm_1 = 23'b10;
parameter    ap_ST_st3_fsm_2 = 23'b100;
parameter    ap_ST_st4_fsm_3 = 23'b1000;
parameter    ap_ST_st5_fsm_4 = 23'b10000;
parameter    ap_ST_st6_fsm_5 = 23'b100000;
parameter    ap_ST_st7_fsm_6 = 23'b1000000;
parameter    ap_ST_st8_fsm_7 = 23'b10000000;
parameter    ap_ST_st9_fsm_8 = 23'b100000000;
parameter    ap_ST_st10_fsm_9 = 23'b1000000000;
parameter    ap_ST_st11_fsm_10 = 23'b10000000000;
parameter    ap_ST_st12_fsm_11 = 23'b100000000000;
parameter    ap_ST_st13_fsm_12 = 23'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 23'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 23'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 23'b1000000000000000;
parameter    ap_ST_st17_fsm_16 = 23'b10000000000000000;
parameter    ap_ST_st18_fsm_17 = 23'b100000000000000000;
parameter    ap_ST_st19_fsm_18 = 23'b1000000000000000000;
parameter    ap_ST_st20_fsm_19 = 23'b10000000000000000000;
parameter    ap_ST_st21_fsm_20 = 23'b100000000000000000000;
parameter    ap_ST_st22_fsm_21 = 23'b1000000000000000000000;
parameter    ap_ST_st23_fsm_22 = 23'b10000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv17_E = 17'b1110;
parameter    ap_const_lv17_F = 17'b1111;
parameter    ap_const_lv32_F = 32'b1111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] curr_layer_in_in_ch;
output   m_axi_weights_AWVALID;
input   m_axi_weights_AWREADY;
output  [31:0] m_axi_weights_AWADDR;
output  [0:0] m_axi_weights_AWID;
output  [31:0] m_axi_weights_AWLEN;
output  [2:0] m_axi_weights_AWSIZE;
output  [1:0] m_axi_weights_AWBURST;
output  [1:0] m_axi_weights_AWLOCK;
output  [3:0] m_axi_weights_AWCACHE;
output  [2:0] m_axi_weights_AWPROT;
output  [3:0] m_axi_weights_AWQOS;
output  [3:0] m_axi_weights_AWREGION;
output  [0:0] m_axi_weights_AWUSER;
output   m_axi_weights_WVALID;
input   m_axi_weights_WREADY;
output  [31:0] m_axi_weights_WDATA;
output  [3:0] m_axi_weights_WSTRB;
output   m_axi_weights_WLAST;
output  [0:0] m_axi_weights_WID;
output  [0:0] m_axi_weights_WUSER;
output   m_axi_weights_ARVALID;
input   m_axi_weights_ARREADY;
output  [31:0] m_axi_weights_ARADDR;
output  [0:0] m_axi_weights_ARID;
output  [31:0] m_axi_weights_ARLEN;
output  [2:0] m_axi_weights_ARSIZE;
output  [1:0] m_axi_weights_ARBURST;
output  [1:0] m_axi_weights_ARLOCK;
output  [3:0] m_axi_weights_ARCACHE;
output  [2:0] m_axi_weights_ARPROT;
output  [3:0] m_axi_weights_ARQOS;
output  [3:0] m_axi_weights_ARREGION;
output  [0:0] m_axi_weights_ARUSER;
input   m_axi_weights_RVALID;
output   m_axi_weights_RREADY;
input  [31:0] m_axi_weights_RDATA;
input   m_axi_weights_RLAST;
input  [0:0] m_axi_weights_RID;
input  [0:0] m_axi_weights_RUSER;
input  [1:0] m_axi_weights_RRESP;
input   m_axi_weights_BVALID;
output   m_axi_weights_BREADY;
input  [1:0] m_axi_weights_BRESP;
input  [0:0] m_axi_weights_BID;
input  [0:0] m_axi_weights_BUSER;
input  [29:0] weights3;
input  [29:0] image1;
input  [15:0] curr_layer_in_in_w;
input  [15:0] curr_layer_in_in_h;
input  [15:0] curr_layer_in_out_w;
input  [15:0] curr_layer_in_out_h;
input  [15:0] curr_layer_in_out_ch;
input  [15:0] curr_layer_in_ker_w;
input  [15:0] curr_layer_in_ker_h;
input  [15:0] curr_layer_in_str_w;
input  [15:0] curr_layer_in_str_h;
input  [31:0] to_r;
input  [31:0] row;
input  [31:0] col;
output  [13:0] outputfm_address0;
output   outputfm_ce0;
output   outputfm_we0;
output  [31:0] outputfm_d0;
output  [15:0] curr_layer_in_out_w_out_din;
input   curr_layer_in_out_w_out_full_n;
output   curr_layer_in_out_w_out_write;
output  [15:0] curr_layer_in_out_h_out_din;
input   curr_layer_in_out_h_out_full_n;
output   curr_layer_in_out_h_out_write;
output  [15:0] curr_layer_in_out_ch_out_din;
input   curr_layer_in_out_ch_out_full_n;
output   curr_layer_in_out_ch_out_write;
output  [31:0] to_out_din;
input   to_out_full_n;
output   to_out_write;
output  [31:0] row_out_din;
input   row_out_full_n;
output   row_out_write;
output  [31:0] col_out_din;
input   col_out_full_n;
output   col_out_write;
input  [29:0] out5_cast;
output  [29:0] out5_cast_out_din;
input   out5_cast_out_full_n;
output   out5_cast_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_weights_ARVALID;
reg m_axi_weights_RREADY;
reg curr_layer_in_out_w_out_write;
reg curr_layer_in_out_h_out_write;
reg curr_layer_in_out_ch_out_write;
reg to_out_write;
reg row_out_write;
reg col_out_write;
reg out5_cast_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_41;
reg    curr_layer_in_out_w_out_blk_n;
reg    ap_sig_cseq_ST_st21_fsm_20;
reg    ap_sig_160;
reg    curr_layer_in_out_h_out_blk_n;
reg    curr_layer_in_out_ch_out_blk_n;
reg    to_out_blk_n;
reg    row_out_blk_n;
reg    col_out_blk_n;
reg    out5_cast_out_blk_n;
reg    ap_sig_173;
wire   [16:0] tmp_fu_365_p2;
reg   [16:0] tmp_reg_402;
reg    ap_sig_193;
wire  signed [31:0] p_cast_i_i_fu_382_p1;
reg  signed [31:0] p_cast_i_i_reg_478;
wire   [31:0] ti_fu_391_p2;
reg   [31:0] ti_reg_486;
reg    ap_sig_cseq_ST_st22_fsm_21;
reg    ap_sig_231;
wire   [0:0] tmp_29_fu_386_p2;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWVALID;
wire   [31:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWADDR;
wire   [0:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWID;
wire   [31:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWLEN;
wire   [2:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWSIZE;
wire   [1:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWBURST;
wire   [1:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWLOCK;
wire   [3:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWCACHE;
wire   [2:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWPROT;
wire   [3:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWQOS;
wire   [3:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWREGION;
wire   [0:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWUSER;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WVALID;
wire   [31:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WDATA;
wire   [3:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WSTRB;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WLAST;
wire   [0:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WID;
wire   [0:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WUSER;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARVALID;
wire   [31:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARADDR;
wire   [0:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARID;
wire   [31:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARLEN;
wire   [2:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARSIZE;
wire   [1:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARBURST;
wire   [1:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARLOCK;
wire   [3:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARCACHE;
wire   [2:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARPROT;
wire   [3:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARQOS;
wire   [3:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARREGION;
wire   [0:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARUSER;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_RREADY;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_BREADY;
wire   [13:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_address0;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_ce0;
wire   [31:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_d0;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_we0;
wire   [13:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_address1;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_ce1;
wire   [31:0] grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_d1;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_we1;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_start;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_pipo_update;
reg    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_continue;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_done;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready;
wire    grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_idle;
reg   [31:0] ti_i_i_i_i_i_reg_318;
reg    ap_sig_cseq_ST_st23_fsm_22;
reg    ap_sig_323;
reg    ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_start;
reg    ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready;
reg    ap_sig_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready;
wire  signed [16:0] tmp_8_i_cast_i_i_fu_361_p1;
wire   [16:0] grp_fu_371_p0;
wire   [4:0] grp_fu_371_p1;
wire   [16:0] grp_fu_371_p2;
wire   [16:0] tmp_28_fu_377_p2;
reg    grp_fu_371_ap_start;
wire    grp_fu_371_ap_done;
reg    grp_fu_371_ce;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 23'b1;
#0 ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_start = 1'b0;
#0 ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready = 1'b0;
end

zhang_cnn_dataflow_in_loop_ti_loop grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330(
    .m_axi_weights_AWVALID(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWVALID),
    .m_axi_weights_AWREADY(1'b0),
    .m_axi_weights_AWADDR(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWADDR),
    .m_axi_weights_AWID(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWID),
    .m_axi_weights_AWLEN(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWLEN),
    .m_axi_weights_AWSIZE(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWSIZE),
    .m_axi_weights_AWBURST(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWBURST),
    .m_axi_weights_AWLOCK(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWLOCK),
    .m_axi_weights_AWCACHE(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWCACHE),
    .m_axi_weights_AWPROT(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWPROT),
    .m_axi_weights_AWQOS(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWQOS),
    .m_axi_weights_AWREGION(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWREGION),
    .m_axi_weights_AWUSER(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_AWUSER),
    .m_axi_weights_WVALID(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WVALID),
    .m_axi_weights_WREADY(1'b0),
    .m_axi_weights_WDATA(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WDATA),
    .m_axi_weights_WSTRB(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WSTRB),
    .m_axi_weights_WLAST(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WLAST),
    .m_axi_weights_WID(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WID),
    .m_axi_weights_WUSER(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_WUSER),
    .m_axi_weights_ARVALID(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARVALID),
    .m_axi_weights_ARREADY(m_axi_weights_ARREADY),
    .m_axi_weights_ARADDR(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARADDR),
    .m_axi_weights_ARID(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARID),
    .m_axi_weights_ARLEN(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARLEN),
    .m_axi_weights_ARSIZE(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARSIZE),
    .m_axi_weights_ARBURST(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARBURST),
    .m_axi_weights_ARLOCK(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARLOCK),
    .m_axi_weights_ARCACHE(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARCACHE),
    .m_axi_weights_ARPROT(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARPROT),
    .m_axi_weights_ARQOS(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARQOS),
    .m_axi_weights_ARREGION(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARREGION),
    .m_axi_weights_ARUSER(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARUSER),
    .m_axi_weights_RVALID(m_axi_weights_RVALID),
    .m_axi_weights_RREADY(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_RREADY),
    .m_axi_weights_RDATA(m_axi_weights_RDATA),
    .m_axi_weights_RLAST(m_axi_weights_RLAST),
    .m_axi_weights_RID(m_axi_weights_RID),
    .m_axi_weights_RUSER(m_axi_weights_RUSER),
    .m_axi_weights_RRESP(m_axi_weights_RRESP),
    .m_axi_weights_BVALID(1'b0),
    .m_axi_weights_BREADY(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_BREADY),
    .m_axi_weights_BRESP(ap_const_lv2_0),
    .m_axi_weights_BID(1'b0),
    .m_axi_weights_BUSER(1'b0),
    .weights3(weights3),
    .image1(image1),
    .curr_layer_in_in_w(curr_layer_in_in_w),
    .curr_layer_in_in_h(curr_layer_in_in_h),
    .curr_layer_in_out_w(curr_layer_in_out_w),
    .curr_layer_in_out_h(curr_layer_in_out_h),
    .curr_layer_in_in_ch(curr_layer_in_in_ch),
    .curr_layer_in_out_ch(curr_layer_in_out_ch),
    .curr_layer_in_ker_w(curr_layer_in_ker_w),
    .curr_layer_in_ker_h(curr_layer_in_ker_h),
    .curr_layer_in_str_w(curr_layer_in_str_w),
    .curr_layer_in_str_h(curr_layer_in_str_h),
    .to_r(to_r),
    .ti(ti_i_i_i_i_i_reg_318),
    .row(row),
    .col(col),
    .outputfm_address0(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_address0),
    .outputfm_ce0(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_ce0),
    .outputfm_d0(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_d0),
    .outputfm_q0(ap_const_lv32_0),
    .outputfm_we0(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_we0),
    .outputfm_address1(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_address1),
    .outputfm_ce1(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_ce1),
    .outputfm_d1(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_d1),
    .outputfm_q1(ap_const_lv32_0),
    .outputfm_we1(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_start),
    .outputfm_pipo_status(1'b0),
    .outputfm_pipo_update(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_pipo_update),
    .ap_continue(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_continue),
    .ap_done(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_done),
    .ap_ready(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready),
    .ap_idle(grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_idle)
);

zhang_cnn_srem_17ns_5ns_17_21_seq #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 17 ))
zhang_cnn_srem_17ns_5ns_17_21_seq_U95(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_371_ap_start),
    .done(grp_fu_371_ap_done),
    .din0(grp_fu_371_p0),
    .din1(grp_fu_371_p1),
    .ce(grp_fu_371_ce),
    .dout(grp_fu_371_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_sig_cseq_ST_st22_fsm_21) & ~(1'b0 == tmp_29_fu_386_p2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready <= 1'b0;
    end else begin
        if ((1'b1 == ap_sig_cseq_ST_st23_fsm_22)) begin
            if (~(1'b0 == grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_done)) begin
                ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready <= 1'b0;
            end else if ((1'b1 == grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready)) begin
                ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_sig_cseq_ST_st22_fsm_21) & (1'b0 == tmp_29_fu_386_p2)) | ((1'b1 == ap_sig_cseq_ST_st23_fsm_22) & (1'b0 == ap_sig_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready)))) begin
            ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_start <= 1'b1;
        end else if ((1'b1 == grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready)) begin
            ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st23_fsm_22) & ~(1'b0 == grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_done))) begin
        ti_i_i_i_i_i_reg_318 <= ti_reg_486;
    end else if (((1'b1 == ap_sig_cseq_ST_st21_fsm_20) & ~ap_sig_193)) begin
        ti_i_i_i_i_i_reg_318 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st21_fsm_20) & ~ap_sig_193)) begin
        p_cast_i_i_reg_478 <= p_cast_i_i_fu_382_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st22_fsm_21) & (1'b0 == tmp_29_fu_386_p2))) begin
        ti_reg_486 <= ti_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_173)) begin
        tmp_reg_402 <= tmp_fu_365_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_sig_cseq_ST_st22_fsm_21) & ~(1'b0 == tmp_29_fu_386_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st22_fsm_21) & ~(1'b0 == tmp_29_fu_386_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_41) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_160) begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st21_fsm_20 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_231) begin
        ap_sig_cseq_ST_st22_fsm_21 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st22_fsm_21 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_323) begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st23_fsm_22 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready)) begin
        ap_sig_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready;
    end else begin
        ap_sig_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_ready = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        col_out_blk_n = col_out_full_n;
    end else begin
        col_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st21_fsm_20) & ~ap_sig_193)) begin
        col_out_write = 1'b1;
    end else begin
        col_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        curr_layer_in_out_ch_out_blk_n = curr_layer_in_out_ch_out_full_n;
    end else begin
        curr_layer_in_out_ch_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st21_fsm_20) & ~ap_sig_193)) begin
        curr_layer_in_out_ch_out_write = 1'b1;
    end else begin
        curr_layer_in_out_ch_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        curr_layer_in_out_h_out_blk_n = curr_layer_in_out_h_out_full_n;
    end else begin
        curr_layer_in_out_h_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st21_fsm_20) & ~ap_sig_193)) begin
        curr_layer_in_out_h_out_write = 1'b1;
    end else begin
        curr_layer_in_out_h_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        curr_layer_in_out_w_out_blk_n = curr_layer_in_out_w_out_full_n;
    end else begin
        curr_layer_in_out_w_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st21_fsm_20) & ~ap_sig_193)) begin
        curr_layer_in_out_w_out_write = 1'b1;
    end else begin
        curr_layer_in_out_w_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_173)) begin
        grp_fu_371_ap_start = 1'b1;
    end else begin
        grp_fu_371_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st22_fsm_21) | (1'b1 == ap_sig_cseq_ST_st23_fsm_22))) begin
        grp_fu_371_ce = 1'b0;
    end else begin
        grp_fu_371_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st23_fsm_22) & ~(1'b0 == grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_done))) begin
        grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_continue = 1'b1;
    end else begin
        grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st22_fsm_21) & (1'b0 == tmp_29_fu_386_p2)) | (1'b1 == ap_sig_cseq_ST_st23_fsm_22))) begin
        m_axi_weights_ARVALID = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARVALID;
    end else begin
        m_axi_weights_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st22_fsm_21) & (1'b0 == tmp_29_fu_386_p2)) | (1'b1 == ap_sig_cseq_ST_st23_fsm_22))) begin
        m_axi_weights_RREADY = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_RREADY;
    end else begin
        m_axi_weights_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        out5_cast_out_blk_n = out5_cast_out_full_n;
    end else begin
        out5_cast_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st21_fsm_20) & ~ap_sig_193)) begin
        out5_cast_out_write = 1'b1;
    end else begin
        out5_cast_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        row_out_blk_n = row_out_full_n;
    end else begin
        row_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st21_fsm_20) & ~ap_sig_193)) begin
        row_out_write = 1'b1;
    end else begin
        row_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st21_fsm_20)) begin
        to_out_blk_n = to_out_full_n;
    end else begin
        to_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st21_fsm_20) & ~ap_sig_193)) begin
        to_out_write = 1'b1;
    end else begin
        to_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~ap_sig_173) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : begin
            if (~ap_sig_193) begin
                ap_NS_fsm = ap_ST_st22_fsm_21;
            end else begin
                ap_NS_fsm = ap_ST_st21_fsm_20;
            end
        end
        ap_ST_st22_fsm_21 : begin
            if (~(1'b0 == tmp_29_fu_386_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st23_fsm_22;
            end
        end
        ap_ST_st23_fsm_22 : begin
            if (~(1'b0 == grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_done)) begin
                ap_NS_fsm = ap_ST_st22_fsm_21;
            end else begin
                ap_NS_fsm = ap_ST_st23_fsm_22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_160 = (1'b1 == ap_CS_fsm[ap_const_lv32_14]);
end

always @ (*) begin
    ap_sig_173 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_sig_193 = ((out5_cast_out_full_n == 1'b0) | (curr_layer_in_out_w_out_full_n == 1'b0) | (curr_layer_in_out_h_out_full_n == 1'b0) | (curr_layer_in_out_ch_out_full_n == 1'b0) | (to_out_full_n == 1'b0) | (row_out_full_n == 1'b0) | (col_out_full_n == 1'b0));
end

always @ (*) begin
    ap_sig_231 = (1'b1 == ap_CS_fsm[ap_const_lv32_15]);
end

always @ (*) begin
    ap_sig_323 = (1'b1 == ap_CS_fsm[ap_const_lv32_16]);
end

always @ (*) begin
    ap_sig_41 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign col_out_din = col;

assign curr_layer_in_out_ch_out_din = curr_layer_in_out_ch;

assign curr_layer_in_out_h_out_din = curr_layer_in_out_h;

assign curr_layer_in_out_w_out_din = curr_layer_in_out_w;

assign grp_fu_371_p0 = ($signed(tmp_8_i_cast_i_i_fu_361_p1) + $signed(ap_const_lv17_E));

assign grp_fu_371_p1 = ap_const_lv17_F;

assign grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_start = ap_reg_grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_ap_start;

assign m_axi_weights_ARADDR = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARADDR;

assign m_axi_weights_ARBURST = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARBURST;

assign m_axi_weights_ARCACHE = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARCACHE;

assign m_axi_weights_ARID = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARID;

assign m_axi_weights_ARLEN = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARLEN;

assign m_axi_weights_ARLOCK = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARLOCK;

assign m_axi_weights_ARPROT = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARPROT;

assign m_axi_weights_ARQOS = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARQOS;

assign m_axi_weights_ARREGION = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARREGION;

assign m_axi_weights_ARSIZE = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARSIZE;

assign m_axi_weights_ARUSER = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_m_axi_weights_ARUSER;

assign m_axi_weights_AWADDR = ap_const_lv32_0;

assign m_axi_weights_AWBURST = ap_const_lv2_0;

assign m_axi_weights_AWCACHE = ap_const_lv4_0;

assign m_axi_weights_AWID = 1'b0;

assign m_axi_weights_AWLEN = ap_const_lv32_0;

assign m_axi_weights_AWLOCK = ap_const_lv2_0;

assign m_axi_weights_AWPROT = ap_const_lv3_0;

assign m_axi_weights_AWQOS = ap_const_lv4_0;

assign m_axi_weights_AWREGION = ap_const_lv4_0;

assign m_axi_weights_AWSIZE = ap_const_lv3_0;

assign m_axi_weights_AWUSER = 1'b0;

assign m_axi_weights_AWVALID = 1'b0;

assign m_axi_weights_BREADY = 1'b0;

assign m_axi_weights_WDATA = ap_const_lv32_0;

assign m_axi_weights_WID = 1'b0;

assign m_axi_weights_WLAST = 1'b0;

assign m_axi_weights_WSTRB = ap_const_lv4_0;

assign m_axi_weights_WUSER = 1'b0;

assign m_axi_weights_WVALID = 1'b0;

assign out5_cast_out_din = out5_cast;

assign outputfm_address0 = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_address0;

assign outputfm_ce0 = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_ce0;

assign outputfm_d0 = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_d0;

assign outputfm_we0 = grp_zhang_cnn_dataflow_in_loop_ti_loop_fu_330_outputfm_we0;

assign p_cast_i_i_fu_382_p1 = $signed(tmp_28_fu_377_p2);

assign row_out_din = row;

assign ti_fu_391_p2 = (ti_i_i_i_i_i_reg_318 + ap_const_lv32_F);

assign tmp_28_fu_377_p2 = (tmp_reg_402 - grp_fu_371_p2);

assign tmp_29_fu_386_p2 = ((ti_i_i_i_i_i_reg_318 == p_cast_i_i_reg_478) ? 1'b1 : 1'b0);

assign tmp_8_i_cast_i_i_fu_361_p1 = $signed(curr_layer_in_in_ch);

assign tmp_fu_365_p2 = ($signed(tmp_8_i_cast_i_i_fu_361_p1) + $signed(ap_const_lv17_E));

assign to_out_din = to_r;

endmodule //zhang_cnn_ti_loop_proc13
