// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module zhang_cnn_read_bias (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_bias_AWVALID,
        m_axi_bias_AWREADY,
        m_axi_bias_AWADDR,
        m_axi_bias_AWID,
        m_axi_bias_AWLEN,
        m_axi_bias_AWSIZE,
        m_axi_bias_AWBURST,
        m_axi_bias_AWLOCK,
        m_axi_bias_AWCACHE,
        m_axi_bias_AWPROT,
        m_axi_bias_AWQOS,
        m_axi_bias_AWREGION,
        m_axi_bias_AWUSER,
        m_axi_bias_WVALID,
        m_axi_bias_WREADY,
        m_axi_bias_WDATA,
        m_axi_bias_WSTRB,
        m_axi_bias_WLAST,
        m_axi_bias_WID,
        m_axi_bias_WUSER,
        m_axi_bias_ARVALID,
        m_axi_bias_ARREADY,
        m_axi_bias_ARADDR,
        m_axi_bias_ARID,
        m_axi_bias_ARLEN,
        m_axi_bias_ARSIZE,
        m_axi_bias_ARBURST,
        m_axi_bias_ARLOCK,
        m_axi_bias_ARCACHE,
        m_axi_bias_ARPROT,
        m_axi_bias_ARQOS,
        m_axi_bias_ARREGION,
        m_axi_bias_ARUSER,
        m_axi_bias_RVALID,
        m_axi_bias_RREADY,
        m_axi_bias_RDATA,
        m_axi_bias_RLAST,
        m_axi_bias_RID,
        m_axi_bias_RUSER,
        m_axi_bias_RRESP,
        m_axi_bias_BVALID,
        m_axi_bias_BREADY,
        m_axi_bias_BRESP,
        m_axi_bias_BID,
        m_axi_bias_BUSER,
        bias7,
        curr_layer_out_ch,
        curr_layer_has_bias,
        to_r,
        biasbuf_address0,
        biasbuf_ce0,
        biasbuf_we0,
        biasbuf_d0
);

parameter    ap_ST_st1_fsm_0 = 12'b1;
parameter    ap_ST_st2_fsm_1 = 12'b10;
parameter    ap_ST_st3_fsm_2 = 12'b100;
parameter    ap_ST_st4_fsm_3 = 12'b1000;
parameter    ap_ST_st5_fsm_4 = 12'b10000;
parameter    ap_ST_st6_fsm_5 = 12'b100000;
parameter    ap_ST_st7_fsm_6 = 12'b1000000;
parameter    ap_ST_st8_fsm_7 = 12'b10000000;
parameter    ap_ST_st9_fsm_8 = 12'b100000000;
parameter    ap_ST_st10_fsm_9 = 12'b1000000000;
parameter    ap_ST_st11_fsm_10 = 12'b10000000000;
parameter    ap_ST_st12_fsm_11 = 12'b100000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv31_0 = 31'b0000000000000000000000000000000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv31_1 = 31'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_bias_AWVALID;
input   m_axi_bias_AWREADY;
output  [31:0] m_axi_bias_AWADDR;
output  [0:0] m_axi_bias_AWID;
output  [31:0] m_axi_bias_AWLEN;
output  [2:0] m_axi_bias_AWSIZE;
output  [1:0] m_axi_bias_AWBURST;
output  [1:0] m_axi_bias_AWLOCK;
output  [3:0] m_axi_bias_AWCACHE;
output  [2:0] m_axi_bias_AWPROT;
output  [3:0] m_axi_bias_AWQOS;
output  [3:0] m_axi_bias_AWREGION;
output  [0:0] m_axi_bias_AWUSER;
output   m_axi_bias_WVALID;
input   m_axi_bias_WREADY;
output  [31:0] m_axi_bias_WDATA;
output  [3:0] m_axi_bias_WSTRB;
output   m_axi_bias_WLAST;
output  [0:0] m_axi_bias_WID;
output  [0:0] m_axi_bias_WUSER;
output   m_axi_bias_ARVALID;
input   m_axi_bias_ARREADY;
output  [31:0] m_axi_bias_ARADDR;
output  [0:0] m_axi_bias_ARID;
output  [31:0] m_axi_bias_ARLEN;
output  [2:0] m_axi_bias_ARSIZE;
output  [1:0] m_axi_bias_ARBURST;
output  [1:0] m_axi_bias_ARLOCK;
output  [3:0] m_axi_bias_ARCACHE;
output  [2:0] m_axi_bias_ARPROT;
output  [3:0] m_axi_bias_ARQOS;
output  [3:0] m_axi_bias_ARREGION;
output  [0:0] m_axi_bias_ARUSER;
input   m_axi_bias_RVALID;
output   m_axi_bias_RREADY;
input  [31:0] m_axi_bias_RDATA;
input   m_axi_bias_RLAST;
input  [0:0] m_axi_bias_RID;
input  [0:0] m_axi_bias_RUSER;
input  [1:0] m_axi_bias_RRESP;
input   m_axi_bias_BVALID;
output   m_axi_bias_BREADY;
input  [1:0] m_axi_bias_BRESP;
input  [0:0] m_axi_bias_BID;
input  [0:0] m_axi_bias_BUSER;
input  [29:0] bias7;
input  [31:0] curr_layer_out_ch;
input  [31:0] curr_layer_has_bias;
input  [31:0] to_r;
output  [3:0] biasbuf_address0;
output   biasbuf_ce0;
output   biasbuf_we0;
output  [31:0] biasbuf_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_bias_ARVALID;
reg m_axi_bias_RREADY;
reg[3:0] biasbuf_address0;
reg biasbuf_ce0;
reg biasbuf_we0;
reg[31:0] biasbuf_d0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_29;
reg    bias_blk_n_AR;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_106;
reg    bias_blk_n_R;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_114;
reg   [0:0] tmp_reg_271;
wire   [0:0] tmp_124_fu_222_p2;
wire   [3:0] i_5_fu_147_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_142;
wire   [0:0] tmp_fu_158_p2;
wire   [0:0] exitcond_fu_141_p2;
wire   [0:0] tmp_120_fu_163_p2;
reg   [0:0] tmp_120_reg_275;
wire   [31:0] n_biases_1_fu_188_p3;
reg   [31:0] n_biases_1_reg_280;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_162;
reg   [31:0] bias_addr_reg_286;
wire   [30:0] ii_3_fu_227_p2;
reg   [30:0] ii_3_reg_295;
reg    ap_sig_170;
reg   [31:0] bias_addr_read_reg_300;
reg   [3:0] i_reg_118;
reg   [30:0] ii_reg_129;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_188;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_195;
wire   [63:0] tmp_s_fu_153_p1;
wire   [63:0] tmp_127_fu_233_p1;
wire  signed [63:0] sum_cast_fu_208_p1;
reg    ap_reg_ioackin_m_axi_bias_ARREADY;
reg    ap_sig_ioackin_m_axi_bias_ARREADY;
wire   [31:0] n_biases_fu_168_p3;
wire   [31:0] tmp_121_fu_174_p2;
wire   [0:0] tmp_122_fu_179_p2;
wire   [31:0] tmp_123_fu_184_p2;
wire  signed [32:0] tmp_19_cast_fu_196_p1;
wire   [32:0] sext_cast_fu_199_p1;
wire   [32:0] sum_fu_202_p2;
wire   [31:0] ii_cast_fu_218_p1;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'b1;
#0 ap_reg_ioackin_m_axi_bias_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_bias_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
            if (~(1'b0 == ap_sig_ioackin_m_axi_bias_ARREADY)) begin
                ap_reg_ioackin_m_axi_bias_ARREADY <= 1'b0;
            end else if ((1'b1 == m_axi_bias_ARREADY)) begin
                ap_reg_ioackin_m_axi_bias_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond_fu_141_p2))) begin
        i_reg_118 <= i_5_fu_147_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_118 <= ap_const_lv4_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        ii_reg_129 <= ii_3_reg_295;
    end else if ((1'b1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        ii_reg_129 <= ap_const_lv31_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~(1'b0 == tmp_reg_271) & ~(1'b0 == tmp_124_fu_222_p2) & ~ap_sig_170)) begin
        bias_addr_read_reg_300 <= m_axi_bias_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        bias_addr_reg_286 <= sum_cast_fu_208_p1;
        n_biases_1_reg_280 <= n_biases_1_fu_188_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~(1'b0 == tmp_reg_271) & ~ap_sig_170)) begin
        ii_3_reg_295 <= ii_3_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond_fu_141_p2) & ~(1'b0 == tmp_fu_158_p2))) begin
        tmp_120_reg_275 <= tmp_120_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(1'b0 == exitcond_fu_141_p2))) begin
        tmp_reg_271 <= tmp_fu_158_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~ap_sig_170 & ((1'b0 == tmp_reg_271) | (1'b0 == tmp_124_fu_222_p2))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~ap_sig_170 & ((1'b0 == tmp_reg_271) | (1'b0 == tmp_124_fu_222_p2)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_188) begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_114) begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_195) begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_29) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_142) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_162) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_106) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_bias_ARREADY)) begin
        ap_sig_ioackin_m_axi_bias_ARREADY = m_axi_bias_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_bias_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        bias_blk_n_AR = m_axi_bias_ARREADY;
    end else begin
        bias_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~(1'b0 == tmp_reg_271) & ~(1'b0 == tmp_124_fu_222_p2))) begin
        bias_blk_n_R = m_axi_bias_RVALID;
    end else begin
        bias_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        biasbuf_address0 = tmp_127_fu_233_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        biasbuf_address0 = tmp_s_fu_153_p1;
    end else begin
        biasbuf_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) | (1'b1 == ap_sig_cseq_ST_st12_fsm_11))) begin
        biasbuf_ce0 = 1'b1;
    end else begin
        biasbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        biasbuf_d0 = bias_addr_read_reg_300;
    end else if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        biasbuf_d0 = ap_const_lv32_0;
    end else begin
        biasbuf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (1'b0 == exitcond_fu_141_p2)) | (1'b1 == ap_sig_cseq_ST_st12_fsm_11))) begin
        biasbuf_we0 = 1'b1;
    end else begin
        biasbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (1'b0 == ap_reg_ioackin_m_axi_bias_ARREADY))) begin
        m_axi_bias_ARVALID = 1'b1;
    end else begin
        m_axi_bias_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st11_fsm_10) & ~(1'b0 == tmp_reg_271) & ~(1'b0 == tmp_124_fu_222_p2) & ~ap_sig_170)) begin
        m_axi_bias_RREADY = 1'b1;
    end else begin
        m_axi_bias_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((~(1'b0 == exitcond_fu_141_p2) & (1'b0 == tmp_fu_158_p2))) begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end else if ((~(1'b0 == exitcond_fu_141_p2) & ~(1'b0 == tmp_fu_158_p2))) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            if (~(1'b0 == ap_sig_ioackin_m_axi_bias_ARREADY)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            if ((~ap_sig_170 & ((1'b0 == tmp_reg_271) | (1'b0 == tmp_124_fu_222_p2)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if ((~(1'b0 == tmp_reg_271) & ~(1'b0 == tmp_124_fu_222_p2) & ~ap_sig_170)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_106 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

always @ (*) begin
    ap_sig_114 = (1'b1 == ap_CS_fsm[ap_const_lv32_A]);
end

always @ (*) begin
    ap_sig_142 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_162 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_170 = (~(1'b0 == tmp_reg_271) & ~(1'b0 == tmp_124_fu_222_p2) & (m_axi_bias_RVALID == 1'b0));
end

always @ (*) begin
    ap_sig_188 = (1'b1 == ap_CS_fsm[ap_const_lv32_9]);
end

always @ (*) begin
    ap_sig_195 = (1'b1 == ap_CS_fsm[ap_const_lv32_B]);
end

always @ (*) begin
    ap_sig_29 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

assign exitcond_fu_141_p2 = ((i_reg_118 == ap_const_lv4_A) ? 1'b1 : 1'b0);

assign i_5_fu_147_p2 = (i_reg_118 + ap_const_lv4_1);

assign ii_3_fu_227_p2 = (ii_reg_129 + ap_const_lv31_1);

assign ii_cast_fu_218_p1 = ii_reg_129;

assign m_axi_bias_ARADDR = bias_addr_reg_286;

assign m_axi_bias_ARBURST = ap_const_lv2_0;

assign m_axi_bias_ARCACHE = ap_const_lv4_0;

assign m_axi_bias_ARID = 1'b0;

assign m_axi_bias_ARLEN = n_biases_1_reg_280;

assign m_axi_bias_ARLOCK = ap_const_lv2_0;

assign m_axi_bias_ARPROT = ap_const_lv3_0;

assign m_axi_bias_ARQOS = ap_const_lv4_0;

assign m_axi_bias_ARREGION = ap_const_lv4_0;

assign m_axi_bias_ARSIZE = ap_const_lv3_0;

assign m_axi_bias_ARUSER = 1'b0;

assign m_axi_bias_AWADDR = ap_const_lv32_0;

assign m_axi_bias_AWBURST = ap_const_lv2_0;

assign m_axi_bias_AWCACHE = ap_const_lv4_0;

assign m_axi_bias_AWID = 1'b0;

assign m_axi_bias_AWLEN = ap_const_lv32_0;

assign m_axi_bias_AWLOCK = ap_const_lv2_0;

assign m_axi_bias_AWPROT = ap_const_lv3_0;

assign m_axi_bias_AWQOS = ap_const_lv4_0;

assign m_axi_bias_AWREGION = ap_const_lv4_0;

assign m_axi_bias_AWSIZE = ap_const_lv3_0;

assign m_axi_bias_AWUSER = 1'b0;

assign m_axi_bias_AWVALID = 1'b0;

assign m_axi_bias_BREADY = 1'b0;

assign m_axi_bias_WDATA = ap_const_lv32_0;

assign m_axi_bias_WID = 1'b0;

assign m_axi_bias_WLAST = 1'b0;

assign m_axi_bias_WSTRB = ap_const_lv4_0;

assign m_axi_bias_WUSER = 1'b0;

assign m_axi_bias_WVALID = 1'b0;

assign n_biases_1_fu_188_p3 = ((tmp_122_fu_179_p2[0:0] === 1'b1) ? tmp_123_fu_184_p2 : n_biases_fu_168_p3);

assign n_biases_fu_168_p3 = ((tmp_120_reg_275[0:0] === 1'b1) ? ap_const_lv32_A : curr_layer_out_ch);

assign sext_cast_fu_199_p1 = bias7;

assign sum_cast_fu_208_p1 = $signed(sum_fu_202_p2);

assign sum_fu_202_p2 = ($signed(tmp_19_cast_fu_196_p1) + $signed(sext_cast_fu_199_p1));

assign tmp_120_fu_163_p2 = (($signed(curr_layer_out_ch) > $signed(32'b1010)) ? 1'b1 : 1'b0);

assign tmp_121_fu_174_p2 = (to_r + n_biases_fu_168_p3);

assign tmp_122_fu_179_p2 = (($signed(tmp_121_fu_174_p2) > $signed(curr_layer_out_ch)) ? 1'b1 : 1'b0);

assign tmp_123_fu_184_p2 = (curr_layer_out_ch - to_r);

assign tmp_124_fu_222_p2 = (($signed(ii_cast_fu_218_p1) < $signed(n_biases_1_reg_280)) ? 1'b1 : 1'b0);

assign tmp_127_fu_233_p1 = ii_reg_129;

assign tmp_19_cast_fu_196_p1 = $signed(to_r);

assign tmp_fu_158_p2 = ((curr_layer_has_bias == ap_const_lv32_1) ? 1'b1 : 1'b0);

assign tmp_s_fu_153_p1 = i_reg_118;

endmodule //zhang_cnn_read_bias
