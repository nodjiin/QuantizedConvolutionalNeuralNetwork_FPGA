-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity zhang_cnn_control_s_axi is
generic (
    C_S_AXI_ADDR_WIDTH    : INTEGER := 8;
    C_S_AXI_DATA_WIDTH    : INTEGER := 32);
port (
    -- axi4 lite slave signals
    ACLK                  :in   STD_LOGIC;
    ARESET                :in   STD_LOGIC;
    ACLK_EN               :in   STD_LOGIC;
    AWADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    AWVALID               :in   STD_LOGIC;
    AWREADY               :out  STD_LOGIC;
    WDATA                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    WSTRB                 :in   STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH/8-1 downto 0);
    WVALID                :in   STD_LOGIC;
    WREADY                :out  STD_LOGIC;
    BRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    BVALID                :out  STD_LOGIC;
    BREADY                :in   STD_LOGIC;
    ARADDR                :in   STD_LOGIC_VECTOR(C_S_AXI_ADDR_WIDTH-1 downto 0);
    ARVALID               :in   STD_LOGIC;
    ARREADY               :out  STD_LOGIC;
    RDATA                 :out  STD_LOGIC_VECTOR(C_S_AXI_DATA_WIDTH-1 downto 0);
    RRESP                 :out  STD_LOGIC_VECTOR(1 downto 0);
    RVALID                :out  STD_LOGIC;
    RREADY                :in   STD_LOGIC;
    interrupt             :out  STD_LOGIC;
    -- user signals
    ap_start              :out  STD_LOGIC;
    ap_done               :in   STD_LOGIC;
    ap_ready              :in   STD_LOGIC;
    ap_idle               :in   STD_LOGIC;
    image_r               :out  STD_LOGIC_VECTOR(31 downto 0);
    weights               :out  STD_LOGIC_VECTOR(31 downto 0);
    out_r                 :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_n_layer :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_in_w    :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_in_h    :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_out_w   :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_out_h   :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_in_ch   :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_out_ch  :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_ker_w   :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_ker_h   :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_ker_ch  :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_str_w   :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_str_h   :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_pad_w   :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_pad_h   :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_relu    :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_has_bias :out  STD_LOGIC_VECTOR(31 downto 0);
    curr_layer_in_act_type :out  STD_LOGIC_VECTOR(3 downto 0);
    input_offset          :out  STD_LOGIC_VECTOR(31 downto 0);
    weights_offset        :out  STD_LOGIC_VECTOR(31 downto 0);
    output_offset         :out  STD_LOGIC_VECTOR(31 downto 0);
    quantized_multiplier  :out  STD_LOGIC_VECTOR(31 downto 0);
    right_shift           :out  STD_LOGIC_VECTOR(31 downto 0)
);
end entity zhang_cnn_control_s_axi;

-- ------------------------Address Info-------------------
-- 0x00 : Control signals
--        bit 0  - ap_start (Read/Write/COH)
--        bit 1  - ap_done (Read/COR)
--        bit 2  - ap_idle (Read)
--        bit 3  - ap_ready (Read)
--        bit 7  - auto_restart (Read/Write)
--        others - reserved
-- 0x04 : Global Interrupt Enable Register
--        bit 0  - Global Interrupt Enable (Read/Write)
--        others - reserved
-- 0x08 : IP Interrupt Enable Register (Read/Write)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x0c : IP Interrupt Status Register (Read/TOW)
--        bit 0  - Channel 0 (ap_done)
--        bit 1  - Channel 1 (ap_ready)
--        others - reserved
-- 0x10 : Data signal of image_r
--        bit 31~0 - image_r[31:0] (Read/Write)
-- 0x14 : reserved
-- 0x18 : Data signal of weights
--        bit 31~0 - weights[31:0] (Read/Write)
-- 0x1c : reserved
-- 0x20 : Data signal of out_r
--        bit 31~0 - out_r[31:0] (Read/Write)
-- 0x24 : reserved
-- 0x28 : Data signal of curr_layer_in_n_layer
--        bit 31~0 - curr_layer_in_n_layer[31:0] (Read/Write)
-- 0x2c : reserved
-- 0x30 : Data signal of curr_layer_in_in_w
--        bit 31~0 - curr_layer_in_in_w[31:0] (Read/Write)
-- 0x34 : reserved
-- 0x38 : Data signal of curr_layer_in_in_h
--        bit 31~0 - curr_layer_in_in_h[31:0] (Read/Write)
-- 0x3c : reserved
-- 0x40 : Data signal of curr_layer_in_out_w
--        bit 31~0 - curr_layer_in_out_w[31:0] (Read/Write)
-- 0x44 : reserved
-- 0x48 : Data signal of curr_layer_in_out_h
--        bit 31~0 - curr_layer_in_out_h[31:0] (Read/Write)
-- 0x4c : reserved
-- 0x50 : Data signal of curr_layer_in_in_ch
--        bit 31~0 - curr_layer_in_in_ch[31:0] (Read/Write)
-- 0x54 : reserved
-- 0x58 : Data signal of curr_layer_in_out_ch
--        bit 31~0 - curr_layer_in_out_ch[31:0] (Read/Write)
-- 0x5c : reserved
-- 0x60 : Data signal of curr_layer_in_ker_w
--        bit 31~0 - curr_layer_in_ker_w[31:0] (Read/Write)
-- 0x64 : reserved
-- 0x68 : Data signal of curr_layer_in_ker_h
--        bit 31~0 - curr_layer_in_ker_h[31:0] (Read/Write)
-- 0x6c : reserved
-- 0x70 : Data signal of curr_layer_in_ker_ch
--        bit 31~0 - curr_layer_in_ker_ch[31:0] (Read/Write)
-- 0x74 : reserved
-- 0x78 : Data signal of curr_layer_in_str_w
--        bit 31~0 - curr_layer_in_str_w[31:0] (Read/Write)
-- 0x7c : reserved
-- 0x80 : Data signal of curr_layer_in_str_h
--        bit 31~0 - curr_layer_in_str_h[31:0] (Read/Write)
-- 0x84 : reserved
-- 0x88 : Data signal of curr_layer_in_pad_w
--        bit 31~0 - curr_layer_in_pad_w[31:0] (Read/Write)
-- 0x8c : reserved
-- 0x90 : Data signal of curr_layer_in_pad_h
--        bit 31~0 - curr_layer_in_pad_h[31:0] (Read/Write)
-- 0x94 : reserved
-- 0x98 : Data signal of curr_layer_in_relu
--        bit 31~0 - curr_layer_in_relu[31:0] (Read/Write)
-- 0x9c : reserved
-- 0xa0 : Data signal of curr_layer_in_has_bias
--        bit 31~0 - curr_layer_in_has_bias[31:0] (Read/Write)
-- 0xa4 : reserved
-- 0xa8 : Data signal of curr_layer_in_act_type
--        bit 3~0 - curr_layer_in_act_type[3:0] (Read/Write)
--        others  - reserved
-- 0xac : reserved
-- 0xb0 : Data signal of input_offset
--        bit 31~0 - input_offset[31:0] (Read/Write)
-- 0xb4 : reserved
-- 0xb8 : Data signal of weights_offset
--        bit 31~0 - weights_offset[31:0] (Read/Write)
-- 0xbc : reserved
-- 0xc0 : Data signal of output_offset
--        bit 31~0 - output_offset[31:0] (Read/Write)
-- 0xc4 : reserved
-- 0xc8 : Data signal of quantized_multiplier
--        bit 31~0 - quantized_multiplier[31:0] (Read/Write)
-- 0xcc : reserved
-- 0xd0 : Data signal of right_shift
--        bit 31~0 - right_shift[31:0] (Read/Write)
-- 0xd4 : reserved
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of zhang_cnn_control_s_axi is
    type states is (wridle, wrdata, wrresp, wrreset, rdidle, rddata, rdreset);  -- read and write fsm states
    signal wstate  : states := wrreset;
    signal rstate  : states := rdreset;
    signal wnext, rnext: states;
    constant ADDR_AP_CTRL                       : INTEGER := 16#00#;
    constant ADDR_GIE                           : INTEGER := 16#04#;
    constant ADDR_IER                           : INTEGER := 16#08#;
    constant ADDR_ISR                           : INTEGER := 16#0c#;
    constant ADDR_IMAGE_R_DATA_0                : INTEGER := 16#10#;
    constant ADDR_IMAGE_R_CTRL                  : INTEGER := 16#14#;
    constant ADDR_WEIGHTS_DATA_0                : INTEGER := 16#18#;
    constant ADDR_WEIGHTS_CTRL                  : INTEGER := 16#1c#;
    constant ADDR_OUT_R_DATA_0                  : INTEGER := 16#20#;
    constant ADDR_OUT_R_CTRL                    : INTEGER := 16#24#;
    constant ADDR_CURR_LAYER_IN_N_LAYER_DATA_0  : INTEGER := 16#28#;
    constant ADDR_CURR_LAYER_IN_N_LAYER_CTRL    : INTEGER := 16#2c#;
    constant ADDR_CURR_LAYER_IN_IN_W_DATA_0     : INTEGER := 16#30#;
    constant ADDR_CURR_LAYER_IN_IN_W_CTRL       : INTEGER := 16#34#;
    constant ADDR_CURR_LAYER_IN_IN_H_DATA_0     : INTEGER := 16#38#;
    constant ADDR_CURR_LAYER_IN_IN_H_CTRL       : INTEGER := 16#3c#;
    constant ADDR_CURR_LAYER_IN_OUT_W_DATA_0    : INTEGER := 16#40#;
    constant ADDR_CURR_LAYER_IN_OUT_W_CTRL      : INTEGER := 16#44#;
    constant ADDR_CURR_LAYER_IN_OUT_H_DATA_0    : INTEGER := 16#48#;
    constant ADDR_CURR_LAYER_IN_OUT_H_CTRL      : INTEGER := 16#4c#;
    constant ADDR_CURR_LAYER_IN_IN_CH_DATA_0    : INTEGER := 16#50#;
    constant ADDR_CURR_LAYER_IN_IN_CH_CTRL      : INTEGER := 16#54#;
    constant ADDR_CURR_LAYER_IN_OUT_CH_DATA_0   : INTEGER := 16#58#;
    constant ADDR_CURR_LAYER_IN_OUT_CH_CTRL     : INTEGER := 16#5c#;
    constant ADDR_CURR_LAYER_IN_KER_W_DATA_0    : INTEGER := 16#60#;
    constant ADDR_CURR_LAYER_IN_KER_W_CTRL      : INTEGER := 16#64#;
    constant ADDR_CURR_LAYER_IN_KER_H_DATA_0    : INTEGER := 16#68#;
    constant ADDR_CURR_LAYER_IN_KER_H_CTRL      : INTEGER := 16#6c#;
    constant ADDR_CURR_LAYER_IN_KER_CH_DATA_0   : INTEGER := 16#70#;
    constant ADDR_CURR_LAYER_IN_KER_CH_CTRL     : INTEGER := 16#74#;
    constant ADDR_CURR_LAYER_IN_STR_W_DATA_0    : INTEGER := 16#78#;
    constant ADDR_CURR_LAYER_IN_STR_W_CTRL      : INTEGER := 16#7c#;
    constant ADDR_CURR_LAYER_IN_STR_H_DATA_0    : INTEGER := 16#80#;
    constant ADDR_CURR_LAYER_IN_STR_H_CTRL      : INTEGER := 16#84#;
    constant ADDR_CURR_LAYER_IN_PAD_W_DATA_0    : INTEGER := 16#88#;
    constant ADDR_CURR_LAYER_IN_PAD_W_CTRL      : INTEGER := 16#8c#;
    constant ADDR_CURR_LAYER_IN_PAD_H_DATA_0    : INTEGER := 16#90#;
    constant ADDR_CURR_LAYER_IN_PAD_H_CTRL      : INTEGER := 16#94#;
    constant ADDR_CURR_LAYER_IN_RELU_DATA_0     : INTEGER := 16#98#;
    constant ADDR_CURR_LAYER_IN_RELU_CTRL       : INTEGER := 16#9c#;
    constant ADDR_CURR_LAYER_IN_HAS_BIAS_DATA_0 : INTEGER := 16#a0#;
    constant ADDR_CURR_LAYER_IN_HAS_BIAS_CTRL   : INTEGER := 16#a4#;
    constant ADDR_CURR_LAYER_IN_ACT_TYPE_DATA_0 : INTEGER := 16#a8#;
    constant ADDR_CURR_LAYER_IN_ACT_TYPE_CTRL   : INTEGER := 16#ac#;
    constant ADDR_INPUT_OFFSET_DATA_0           : INTEGER := 16#b0#;
    constant ADDR_INPUT_OFFSET_CTRL             : INTEGER := 16#b4#;
    constant ADDR_WEIGHTS_OFFSET_DATA_0         : INTEGER := 16#b8#;
    constant ADDR_WEIGHTS_OFFSET_CTRL           : INTEGER := 16#bc#;
    constant ADDR_OUTPUT_OFFSET_DATA_0          : INTEGER := 16#c0#;
    constant ADDR_OUTPUT_OFFSET_CTRL            : INTEGER := 16#c4#;
    constant ADDR_QUANTIZED_MULTIPLIER_DATA_0   : INTEGER := 16#c8#;
    constant ADDR_QUANTIZED_MULTIPLIER_CTRL     : INTEGER := 16#cc#;
    constant ADDR_RIGHT_SHIFT_DATA_0            : INTEGER := 16#d0#;
    constant ADDR_RIGHT_SHIFT_CTRL              : INTEGER := 16#d4#;
    constant ADDR_BITS         : INTEGER := 8;

    signal waddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask               : UNSIGNED(31 downto 0);
    signal aw_hs               : STD_LOGIC;
    signal w_hs                : STD_LOGIC;
    signal rdata_data          : UNSIGNED(31 downto 0);
    signal ar_hs               : STD_LOGIC;
    signal raddr               : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t           : STD_LOGIC;
    signal WREADY_t            : STD_LOGIC;
    signal ARREADY_t           : STD_LOGIC;
    signal RVALID_t            : STD_LOGIC;
    -- internal registers
    signal int_ap_idle         : STD_LOGIC;
    signal int_ap_ready        : STD_LOGIC;
    signal int_ap_done         : STD_LOGIC := '0';
    signal int_ap_start        : STD_LOGIC := '0';
    signal int_auto_restart    : STD_LOGIC := '0';
    signal int_gie             : STD_LOGIC := '0';
    signal int_ier             : UNSIGNED(1 downto 0) := (others => '0');
    signal int_isr             : UNSIGNED(1 downto 0) := (others => '0');
    signal int_image_r         : UNSIGNED(31 downto 0) := (others => '0');
    signal int_weights         : UNSIGNED(31 downto 0) := (others => '0');
    signal int_out_r           : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_n_layer : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_in_w : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_in_h : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_out_w : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_out_h : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_in_ch : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_out_ch : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_ker_w : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_ker_h : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_ker_ch : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_str_w : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_str_h : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_pad_w : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_pad_h : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_relu : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_has_bias : UNSIGNED(31 downto 0) := (others => '0');
    signal int_curr_layer_in_act_type : UNSIGNED(3 downto 0) := (others => '0');
    signal int_input_offset    : UNSIGNED(31 downto 0) := (others => '0');
    signal int_weights_offset  : UNSIGNED(31 downto 0) := (others => '0');
    signal int_output_offset   : UNSIGNED(31 downto 0) := (others => '0');
    signal int_quantized_multiplier : UNSIGNED(31 downto 0) := (others => '0');
    signal int_right_shift     : UNSIGNED(31 downto 0) := (others => '0');


begin
-- ----------------------- Instantiation------------------

-- ----------------------- AXI WRITE ---------------------
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                wstate <= wrreset;
            elsif (ACLK_EN = '1') then
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (aw_hs = '1') then
                    waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
                end if;
            end if;
        end if;
    end process;

-- ----------------------- AXI READ ----------------------
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID_t  <= '1' when (rstate = rddata) else '0';
    RVALID    <= RVALID_t;
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                rstate <= rdreset;
            elsif (ACLK_EN = '1') then
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY, RVALID_t)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1' and RVALID_t = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (ar_hs = '1') then
                    case (TO_INTEGER(raddr)) is
                    when ADDR_AP_CTRL =>
                        rdata_data <= (7 => int_auto_restart, 3 => int_ap_ready, 2 => int_ap_idle, 1 => int_ap_done, 0 => int_ap_start, others => '0');
                    when ADDR_GIE =>
                        rdata_data <= (0 => int_gie, others => '0');
                    when ADDR_IER =>
                        rdata_data <= (1 => int_ier(1), 0 => int_ier(0), others => '0');
                    when ADDR_ISR =>
                        rdata_data <= (1 => int_isr(1), 0 => int_isr(0), others => '0');
                    when ADDR_IMAGE_R_DATA_0 =>
                        rdata_data <= RESIZE(int_image_r(31 downto 0), 32);
                    when ADDR_WEIGHTS_DATA_0 =>
                        rdata_data <= RESIZE(int_weights(31 downto 0), 32);
                    when ADDR_OUT_R_DATA_0 =>
                        rdata_data <= RESIZE(int_out_r(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_N_LAYER_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_n_layer(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_IN_W_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_in_w(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_IN_H_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_in_h(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_OUT_W_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_out_w(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_OUT_H_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_out_h(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_IN_CH_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_in_ch(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_OUT_CH_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_out_ch(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_KER_W_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_ker_w(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_KER_H_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_ker_h(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_KER_CH_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_ker_ch(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_STR_W_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_str_w(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_STR_H_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_str_h(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_PAD_W_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_pad_w(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_PAD_H_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_pad_h(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_RELU_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_relu(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_HAS_BIAS_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_has_bias(31 downto 0), 32);
                    when ADDR_CURR_LAYER_IN_ACT_TYPE_DATA_0 =>
                        rdata_data <= RESIZE(int_curr_layer_in_act_type(3 downto 0), 32);
                    when ADDR_INPUT_OFFSET_DATA_0 =>
                        rdata_data <= RESIZE(int_input_offset(31 downto 0), 32);
                    when ADDR_WEIGHTS_OFFSET_DATA_0 =>
                        rdata_data <= RESIZE(int_weights_offset(31 downto 0), 32);
                    when ADDR_OUTPUT_OFFSET_DATA_0 =>
                        rdata_data <= RESIZE(int_output_offset(31 downto 0), 32);
                    when ADDR_QUANTIZED_MULTIPLIER_DATA_0 =>
                        rdata_data <= RESIZE(int_quantized_multiplier(31 downto 0), 32);
                    when ADDR_RIGHT_SHIFT_DATA_0 =>
                        rdata_data <= RESIZE(int_right_shift(31 downto 0), 32);
                    when others =>
                        rdata_data <= (others => '0');
                    end case;
                end if;
            end if;
        end if;
    end process;

-- ----------------------- Register logic ----------------
    interrupt            <= int_gie and (int_isr(0) or int_isr(1));
    ap_start             <= int_ap_start;
    image_r              <= STD_LOGIC_VECTOR(int_image_r);
    weights              <= STD_LOGIC_VECTOR(int_weights);
    out_r                <= STD_LOGIC_VECTOR(int_out_r);
    curr_layer_in_n_layer <= STD_LOGIC_VECTOR(int_curr_layer_in_n_layer);
    curr_layer_in_in_w   <= STD_LOGIC_VECTOR(int_curr_layer_in_in_w);
    curr_layer_in_in_h   <= STD_LOGIC_VECTOR(int_curr_layer_in_in_h);
    curr_layer_in_out_w  <= STD_LOGIC_VECTOR(int_curr_layer_in_out_w);
    curr_layer_in_out_h  <= STD_LOGIC_VECTOR(int_curr_layer_in_out_h);
    curr_layer_in_in_ch  <= STD_LOGIC_VECTOR(int_curr_layer_in_in_ch);
    curr_layer_in_out_ch <= STD_LOGIC_VECTOR(int_curr_layer_in_out_ch);
    curr_layer_in_ker_w  <= STD_LOGIC_VECTOR(int_curr_layer_in_ker_w);
    curr_layer_in_ker_h  <= STD_LOGIC_VECTOR(int_curr_layer_in_ker_h);
    curr_layer_in_ker_ch <= STD_LOGIC_VECTOR(int_curr_layer_in_ker_ch);
    curr_layer_in_str_w  <= STD_LOGIC_VECTOR(int_curr_layer_in_str_w);
    curr_layer_in_str_h  <= STD_LOGIC_VECTOR(int_curr_layer_in_str_h);
    curr_layer_in_pad_w  <= STD_LOGIC_VECTOR(int_curr_layer_in_pad_w);
    curr_layer_in_pad_h  <= STD_LOGIC_VECTOR(int_curr_layer_in_pad_h);
    curr_layer_in_relu   <= STD_LOGIC_VECTOR(int_curr_layer_in_relu);
    curr_layer_in_has_bias <= STD_LOGIC_VECTOR(int_curr_layer_in_has_bias);
    curr_layer_in_act_type <= STD_LOGIC_VECTOR(int_curr_layer_in_act_type);
    input_offset         <= STD_LOGIC_VECTOR(int_input_offset);
    weights_offset       <= STD_LOGIC_VECTOR(int_weights_offset);
    output_offset        <= STD_LOGIC_VECTOR(int_output_offset);
    quantized_multiplier <= STD_LOGIC_VECTOR(int_quantized_multiplier);
    right_shift          <= STD_LOGIC_VECTOR(int_right_shift);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_start <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1' and WDATA(0) = '1') then
                    int_ap_start <= '1';
                elsif (ap_ready = '1') then
                    int_ap_start <= int_auto_restart; -- clear on handshake/auto restart
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_done <= '0';
            elsif (ACLK_EN = '1') then
                if (ap_done = '1') then
                    int_ap_done <= '1';
                elsif (ar_hs = '1' and raddr = ADDR_AP_CTRL) then
                    int_ap_done <= '0'; -- clear on read
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_idle <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    int_ap_idle <= ap_idle;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ap_ready <= '0';
            elsif (ACLK_EN = '1') then
                if (true) then
                    int_ap_ready <= ap_ready;
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_auto_restart <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_AP_CTRL and WSTRB(0) = '1') then
                    int_auto_restart <= WDATA(7);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_gie <= '0';
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_GIE and WSTRB(0) = '1') then
                    int_gie <= WDATA(0);
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_ier <= "00";
            elsif (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IER and WSTRB(0) = '1') then
                    int_ier <= UNSIGNED(WDATA(1 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(0) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(0) = '1' and ap_done = '1') then
                    int_isr(0) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(0) <= int_isr(0) xor WDATA(0); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ARESET = '1') then
                int_isr(1) <= '0';
            elsif (ACLK_EN = '1') then
                if (int_ier(1) = '1' and ap_ready = '1') then
                    int_isr(1) <= '1';
                elsif (w_hs = '1' and waddr = ADDR_ISR and WSTRB(0) = '1') then
                    int_isr(1) <= int_isr(1) xor WDATA(1); -- toggle on write
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_IMAGE_R_DATA_0) then
                    int_image_r(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_image_r(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_WEIGHTS_DATA_0) then
                    int_weights(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_weights(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_OUT_R_DATA_0) then
                    int_out_r(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_out_r(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_N_LAYER_DATA_0) then
                    int_curr_layer_in_n_layer(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_n_layer(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_IN_W_DATA_0) then
                    int_curr_layer_in_in_w(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_in_w(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_IN_H_DATA_0) then
                    int_curr_layer_in_in_h(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_in_h(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_OUT_W_DATA_0) then
                    int_curr_layer_in_out_w(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_out_w(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_OUT_H_DATA_0) then
                    int_curr_layer_in_out_h(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_out_h(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_IN_CH_DATA_0) then
                    int_curr_layer_in_in_ch(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_in_ch(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_OUT_CH_DATA_0) then
                    int_curr_layer_in_out_ch(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_out_ch(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_KER_W_DATA_0) then
                    int_curr_layer_in_ker_w(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_ker_w(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_KER_H_DATA_0) then
                    int_curr_layer_in_ker_h(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_ker_h(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_KER_CH_DATA_0) then
                    int_curr_layer_in_ker_ch(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_ker_ch(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_STR_W_DATA_0) then
                    int_curr_layer_in_str_w(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_str_w(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_STR_H_DATA_0) then
                    int_curr_layer_in_str_h(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_str_h(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_PAD_W_DATA_0) then
                    int_curr_layer_in_pad_w(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_pad_w(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_PAD_H_DATA_0) then
                    int_curr_layer_in_pad_h(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_pad_h(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_RELU_DATA_0) then
                    int_curr_layer_in_relu(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_relu(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_HAS_BIAS_DATA_0) then
                    int_curr_layer_in_has_bias(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_curr_layer_in_has_bias(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_CURR_LAYER_IN_ACT_TYPE_DATA_0) then
                    int_curr_layer_in_act_type(3 downto 0) <= (UNSIGNED(WDATA(3 downto 0)) and wmask(3 downto 0)) or ((not wmask(3 downto 0)) and int_curr_layer_in_act_type(3 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_INPUT_OFFSET_DATA_0) then
                    int_input_offset(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_input_offset(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_WEIGHTS_OFFSET_DATA_0) then
                    int_weights_offset(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_weights_offset(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_OUTPUT_OFFSET_DATA_0) then
                    int_output_offset(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_output_offset(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_QUANTIZED_MULTIPLIER_DATA_0) then
                    int_quantized_multiplier(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_quantized_multiplier(31 downto 0));
                end if;
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') then
            if (ACLK_EN = '1') then
                if (w_hs = '1' and waddr = ADDR_RIGHT_SHIFT_DATA_0) then
                    int_right_shift(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_right_shift(31 downto 0));
                end if;
            end if;
        end if;
    end process;


-- ----------------------- Memory logic ------------------

end architecture behave;
