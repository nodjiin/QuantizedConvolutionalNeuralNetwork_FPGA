-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity read_input is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_input_r_AWVALID : OUT STD_LOGIC;
    m_axi_input_r_AWREADY : IN STD_LOGIC;
    m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_WVALID : OUT STD_LOGIC;
    m_axi_input_r_WREADY : IN STD_LOGIC;
    m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_WLAST : OUT STD_LOGIC;
    m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_ARVALID : OUT STD_LOGIC;
    m_axi_input_r_ARREADY : IN STD_LOGIC;
    m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RVALID : IN STD_LOGIC;
    m_axi_input_r_RREADY : OUT STD_LOGIC;
    m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_r_RLAST : IN STD_LOGIC;
    m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BVALID : IN STD_LOGIC;
    m_axi_input_r_BREADY : OUT STD_LOGIC;
    m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    curr_layer_in_w : IN STD_LOGIC_VECTOR (31 downto 0);
    curr_layer_in_h : IN STD_LOGIC_VECTOR (31 downto 0);
    curr_layer_in_ch : IN STD_LOGIC_VECTOR (31 downto 0);
    curr_layer_ker_w : IN STD_LOGIC_VECTOR (31 downto 0);
    curr_layer_ker_h : IN STD_LOGIC_VECTOR (31 downto 0);
    curr_layer_str_w : IN STD_LOGIC_VECTOR (31 downto 0);
    curr_layer_str_h : IN STD_LOGIC_VECTOR (31 downto 0);
    ti : IN STD_LOGIC_VECTOR (31 downto 0);
    row : IN STD_LOGIC_VECTOR (31 downto 0);
    col : IN STD_LOGIC_VECTOR (31 downto 0);
    inputfm_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    inputfm_0_ce0 : OUT STD_LOGIC;
    inputfm_0_we0 : OUT STD_LOGIC;
    inputfm_0_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputfm_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    inputfm_1_ce0 : OUT STD_LOGIC;
    inputfm_1_we0 : OUT STD_LOGIC;
    inputfm_1_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inputfm_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    inputfm_2_ce0 : OUT STD_LOGIC;
    inputfm_2_we0 : OUT STD_LOGIC;
    inputfm_2_d0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_offset_1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of read_input is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv12_1D : STD_LOGIC_VECTOR (11 downto 0) := "000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_r_blk_n_AR : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_40_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_40_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_r_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter10_tmp_40_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_i_reg_220 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_jj_reg_232 : STD_LOGIC_VECTOR (15 downto 0);
    signal itr_reg_244 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_reg_277 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_706 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal n_cols_fu_305_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cols_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_s_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_756 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_761 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_rows_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_rows_reg_766 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cols_2_fu_405_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cols_2_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_1_fu_428_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_1_reg_778 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_rows_2_fu_449_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_rows_2_reg_783 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp14_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp14_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_460_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_56_fu_468_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_56_reg_804 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp6_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_cast_fu_480_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_reg_819 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_40_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_input_r_ARREADY : STD_LOGIC;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_40_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_40_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_40_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_40_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_40_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_40_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_tmp_40_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_40_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal itr_2_fu_493_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_42_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_42_reg_833 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_504_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_3_fu_515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_3_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_sel_tmp_reg_849 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_535_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_2_fu_559_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_2_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp16_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp16_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter1_tmp16_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_572_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_61_reg_870 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_62_fu_576_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_62_reg_875 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_63_fu_580_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter1_tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter2_tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter3_tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter4_tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter5_tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter6_tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter7_tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter8_tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter9_tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter10_tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_reg_pp0_iter11_tmp_63_reg_880 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_594_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_695_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_51_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter2_tmp_51_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter3_tmp_51_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter4_tmp_51_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter5_tmp_51_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter6_tmp_51_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter7_tmp_51_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter8_tmp_51_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter9_tmp_51_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter10_tmp_51_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_reg_pp0_iter11_tmp_51_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal index_i_2_fu_611_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_i_2_reg_904 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal index_jj_2_fu_625_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_jj_2_reg_909 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_47_fu_655_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_addr_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_addr_read_reg_925 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_phi_mux_index_i_phi_fu_224_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_index_jj_phi_fu_236_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_i_phi_fu_259_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_jj_phi_fu_281_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_cast_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_input_r_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_49_fu_681_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_27_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_299_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_cols_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_313_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_fu_329_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_335_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_346_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_352_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp13_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_370_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_rows_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_400_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_400_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_400_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_fu_384_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_412_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_440_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_445_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_fu_476_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp15_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal itr_cast_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_fu_527_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal jj_4_fu_551_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_543_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal index_i_3_fu_598_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp1_fu_604_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_jj_3_fu_601_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_jj_4_fu_618_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_cast_fu_632_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_63_cast_fu_636_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp17_fu_640_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp25_cast_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp18_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_cast_fu_660_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_fu_663_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_48_fu_678_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_695_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component zhang_cnn_mac_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    zhang_cnn_mac_mulbkb_U1 : component zhang_cnn_mac_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 12,
        din2_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => grp_fu_695_p0,
        din1 => tmp_62_reg_875,
        din2 => tmp_61_reg_870,
        dout => grp_fu_695_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state6 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_input_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_input_r_ARREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_reg_pp0_iter3_tmp_40_reg_824 = ap_const_lv1_1))) then
                    if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_input_r_ARREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_1 = m_axi_input_r_ARREADY))) then 
                        ap_reg_ioackin_m_axi_input_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_40_reg_824 = ap_const_lv1_1))) then 
                i_reg_255 <= i_2_reg_855;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_255 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    index_i_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_40_reg_824))) then 
                index_i_reg_220 <= index_i_2_reg_904;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                index_i_reg_220 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    index_jj_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_40_reg_824))) then 
                index_jj_reg_232 <= index_jj_2_reg_909;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                index_jj_reg_232 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    itr_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = tmp_40_fu_488_p2))) then 
                itr_reg_244 <= itr_2_fu_493_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                itr_reg_244 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = tmp_40_fu_488_p2))) then 
                j_reg_266 <= j_3_fu_584_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_266 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    jj_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_40_reg_824 = ap_const_lv1_1))) then 
                jj_reg_277 <= jj_2_reg_860;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                jj_reg_277 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_tmp_40_reg_824 <= ap_reg_pp0_iter9_tmp_40_reg_824;
                ap_reg_pp0_iter10_tmp_51_reg_899 <= ap_reg_pp0_iter9_tmp_51_reg_899;
                ap_reg_pp0_iter10_tmp_63_reg_880 <= ap_reg_pp0_iter9_tmp_63_reg_880;
                ap_reg_pp0_iter11_tmp_51_reg_899 <= ap_reg_pp0_iter10_tmp_51_reg_899;
                ap_reg_pp0_iter11_tmp_63_reg_880 <= ap_reg_pp0_iter10_tmp_63_reg_880;
                ap_reg_pp0_iter2_tmp_40_reg_824 <= ap_reg_pp0_iter1_tmp_40_reg_824;
                ap_reg_pp0_iter2_tmp_51_reg_899 <= tmp_51_reg_899;
                ap_reg_pp0_iter2_tmp_63_reg_880 <= ap_reg_pp0_iter1_tmp_63_reg_880;
                ap_reg_pp0_iter3_tmp_40_reg_824 <= ap_reg_pp0_iter2_tmp_40_reg_824;
                ap_reg_pp0_iter3_tmp_51_reg_899 <= ap_reg_pp0_iter2_tmp_51_reg_899;
                ap_reg_pp0_iter3_tmp_63_reg_880 <= ap_reg_pp0_iter2_tmp_63_reg_880;
                ap_reg_pp0_iter4_tmp_40_reg_824 <= ap_reg_pp0_iter3_tmp_40_reg_824;
                ap_reg_pp0_iter4_tmp_51_reg_899 <= ap_reg_pp0_iter3_tmp_51_reg_899;
                ap_reg_pp0_iter4_tmp_63_reg_880 <= ap_reg_pp0_iter3_tmp_63_reg_880;
                ap_reg_pp0_iter5_tmp_40_reg_824 <= ap_reg_pp0_iter4_tmp_40_reg_824;
                ap_reg_pp0_iter5_tmp_51_reg_899 <= ap_reg_pp0_iter4_tmp_51_reg_899;
                ap_reg_pp0_iter5_tmp_63_reg_880 <= ap_reg_pp0_iter4_tmp_63_reg_880;
                ap_reg_pp0_iter6_tmp_40_reg_824 <= ap_reg_pp0_iter5_tmp_40_reg_824;
                ap_reg_pp0_iter6_tmp_51_reg_899 <= ap_reg_pp0_iter5_tmp_51_reg_899;
                ap_reg_pp0_iter6_tmp_63_reg_880 <= ap_reg_pp0_iter5_tmp_63_reg_880;
                ap_reg_pp0_iter7_tmp_40_reg_824 <= ap_reg_pp0_iter6_tmp_40_reg_824;
                ap_reg_pp0_iter7_tmp_51_reg_899 <= ap_reg_pp0_iter6_tmp_51_reg_899;
                ap_reg_pp0_iter7_tmp_63_reg_880 <= ap_reg_pp0_iter6_tmp_63_reg_880;
                ap_reg_pp0_iter8_tmp_40_reg_824 <= ap_reg_pp0_iter7_tmp_40_reg_824;
                ap_reg_pp0_iter8_tmp_51_reg_899 <= ap_reg_pp0_iter7_tmp_51_reg_899;
                ap_reg_pp0_iter8_tmp_63_reg_880 <= ap_reg_pp0_iter7_tmp_63_reg_880;
                ap_reg_pp0_iter9_tmp_40_reg_824 <= ap_reg_pp0_iter8_tmp_40_reg_824;
                ap_reg_pp0_iter9_tmp_51_reg_899 <= ap_reg_pp0_iter8_tmp_51_reg_899;
                ap_reg_pp0_iter9_tmp_63_reg_880 <= ap_reg_pp0_iter8_tmp_63_reg_880;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_sel_tmp_reg_849 <= sel_tmp_reg_849;
                ap_reg_pp0_iter1_tmp16_reg_865 <= tmp16_reg_865;
                ap_reg_pp0_iter1_tmp_40_reg_824 <= tmp_40_reg_824;
                ap_reg_pp0_iter1_tmp_42_reg_833 <= tmp_42_reg_833;
                ap_reg_pp0_iter1_tmp_63_reg_880 <= tmp_63_reg_880;
                tmp_40_reg_824 <= tmp_40_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = tmp_40_fu_488_p2))) then
                i_2_reg_855 <= i_2_fu_535_p3;
                jj_2_reg_860 <= jj_2_fu_559_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = tmp_40_fu_488_p2))) then
                i_3_reg_839 <= i_3_fu_504_p2;
                jj_3_reg_844 <= jj_3_fu_515_p2;
                sel_tmp_reg_849 <= sel_tmp_fu_521_p2;
                tmp16_reg_865 <= tmp16_fu_567_p2;
                tmp_42_reg_833 <= tmp_42_fu_499_p2;
                tmp_61_reg_870 <= tmp_61_fu_572_p1;
                tmp_62_reg_875 <= tmp_62_fu_576_p1;
                tmp_63_reg_880 <= tmp_63_fu_580_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                icmp_reg_733 <= icmp_fu_323_p2;
                n_cols_reg_727 <= n_cols_fu_305_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_40_reg_824))) then
                index_i_2_reg_904 <= index_i_2_fu_611_p3;
                index_jj_2_reg_909 <= index_jj_2_fu_625_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter10_tmp_40_reg_824))) then
                input_addr_read_reg_925 <= m_axi_input_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_40_reg_824))) then
                input_addr_reg_919 <= sum_cast_fu_668_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                n_cols_2_reg_772 <= n_cols_2_fu_405_p3;
                n_depth_1_reg_778 <= n_depth_1_fu_428_p3;
                n_rows_reg_766 <= n_rows_fu_376_p3;
                tmp_23_reg_756 <= tmp_23_fu_335_p2;
                tmp_24_reg_761 <= tmp_24_fu_341_p2;
                tmp_s_reg_751 <= tmp_s_fu_329_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                n_rows_2_reg_783 <= n_rows_2_fu_449_p3;
                tmp14_reg_789 <= tmp14_fu_456_p2;
                tmp_reg_794 <= tmp_fu_460_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sext_cast_reg_819 <= sext_cast_fu_480_p1;
                tmp15_reg_814 <= tmp15_fu_476_p2;
                tmp6_reg_809 <= tmp6_fu_472_p2;
                tmp_39_reg_799 <= tmp_39_fu_464_p2;
                tmp_56_reg_804 <= tmp_56_fu_468_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_27_reg_706 <= tmp_27_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = sel_tmp_reg_849) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = tmp_42_reg_833) and (tmp_40_reg_824 = ap_const_lv1_1))) then
                tmp_43_reg_889 <= tmp_43_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = sel_tmp_reg_849) and (ap_const_lv1_1 = tmp_42_reg_833) and (tmp_40_reg_824 = ap_const_lv1_1))) then
                tmp_46_reg_894 <= tmp_46_fu_594_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_40_reg_824))) then
                tmp_47_reg_914 <= tmp_47_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_40_reg_824 = ap_const_lv1_1))) then
                tmp_51_reg_899 <= grp_fu_695_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter11, tmp_40_fu_488_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_lv1_0 = tmp_40_fu_488_p2) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and not(((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0)) or ((ap_const_lv1_0 = tmp_40_fu_488_p2) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_input_r_RVALID, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_tmp_40_reg_824)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_logic_0 = m_axi_input_r_RVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_1 = ap_reg_pp0_iter10_tmp_40_reg_824));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_input_r_RVALID, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_tmp_40_reg_824, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_logic_0 = m_axi_input_r_RVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_1 = ap_reg_pp0_iter10_tmp_40_reg_824)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_boolean_1 = ap_block_state10_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_input_r_RVALID, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_tmp_40_reg_824, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_logic_0 = m_axi_input_r_RVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_1 = ap_reg_pp0_iter10_tmp_40_reg_824)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_boolean_1 = ap_block_state10_io)));
    end process;


    ap_block_state10_io_assign_proc : process(ap_reg_pp0_iter3_tmp_40_reg_824, ap_sig_ioackin_m_axi_input_r_ARREADY)
    begin
                ap_block_state10_io <= ((ap_const_logic_0 = ap_sig_ioackin_m_axi_input_r_ARREADY) and (ap_reg_pp0_iter3_tmp_40_reg_824 = ap_const_lv1_1));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter11_assign_proc : process(m_axi_input_r_RVALID, ap_reg_pp0_iter10_tmp_40_reg_824)
    begin
                ap_block_state17_pp0_stage0_iter11 <= ((ap_const_logic_0 = m_axi_input_r_RVALID) and (ap_const_lv1_1 = ap_reg_pp0_iter10_tmp_40_reg_824));
    end process;

        ap_block_state18_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(tmp_40_fu_488_p2)
    begin
        if ((ap_const_lv1_0 = tmp_40_fu_488_p2)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_259_p4_assign_proc : process(ap_block_pp0_stage0, tmp_40_reg_824, i_reg_255, ap_CS_fsm_pp0_stage0, i_2_reg_855, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_40_reg_824 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            ap_phi_mux_i_phi_fu_259_p4 <= i_2_reg_855;
        else 
            ap_phi_mux_i_phi_fu_259_p4 <= i_reg_255;
        end if; 
    end process;


    ap_phi_mux_index_i_phi_fu_224_p4_assign_proc : process(ap_block_pp0_stage0, index_i_reg_220, ap_reg_pp0_iter2_tmp_40_reg_824, index_i_2_reg_904, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_40_reg_824) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            ap_phi_mux_index_i_phi_fu_224_p4 <= index_i_2_reg_904;
        else 
            ap_phi_mux_index_i_phi_fu_224_p4 <= index_i_reg_220;
        end if; 
    end process;


    ap_phi_mux_index_jj_phi_fu_236_p4_assign_proc : process(ap_block_pp0_stage0, index_jj_reg_232, ap_reg_pp0_iter2_tmp_40_reg_824, index_jj_2_reg_909, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_40_reg_824) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            ap_phi_mux_index_jj_phi_fu_236_p4 <= index_jj_2_reg_909;
        else 
            ap_phi_mux_index_jj_phi_fu_236_p4 <= index_jj_reg_232;
        end if; 
    end process;


    ap_phi_mux_jj_phi_fu_281_p4_assign_proc : process(ap_block_pp0_stage0, tmp_40_reg_824, jj_reg_277, ap_CS_fsm_pp0_stage0, jj_2_reg_860, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_40_reg_824 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            ap_phi_mux_jj_phi_fu_281_p4 <= jj_2_reg_860;
        else 
            ap_phi_mux_jj_phi_fu_281_p4 <= jj_reg_277;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_input_r_ARREADY_assign_proc : process(m_axi_input_r_ARREADY, ap_reg_ioackin_m_axi_input_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_input_r_ARREADY)) then 
            ap_sig_ioackin_m_axi_input_r_ARREADY <= m_axi_input_r_ARREADY;
        else 
            ap_sig_ioackin_m_axi_input_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_695_p0 <= ap_const_lv12_1D(6 - 1 downto 0);
    i_2_fu_535_p3 <= 
        sel_tmp9_fu_527_p3 when (tmp_42_fu_499_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_259_p4;
    i_3_fu_504_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i_phi_fu_259_p4));
    icmp_fu_323_p2 <= "1" when (signed(tmp_55_fu_313_p4) > signed(ap_const_lv30_0)) else "0";
    index_i_2_fu_611_p3 <= 
        sel_tmp1_fu_604_p3 when (ap_reg_pp0_iter1_tmp_42_reg_833(0) = '1') else 
        ap_phi_mux_index_i_phi_fu_224_p4;
    index_i_3_fu_598_p1 <= tmp_43_reg_889(16 - 1 downto 0);
    index_jj_2_fu_625_p3 <= 
        index_jj_4_fu_618_p3 when (ap_reg_pp0_iter1_tmp_42_reg_833(0) = '1') else 
        ap_phi_mux_index_jj_phi_fu_236_p4;
    index_jj_3_fu_601_p1 <= tmp_46_reg_894(16 - 1 downto 0);
    index_jj_4_fu_618_p3 <= 
        index_jj_3_fu_601_p1 when (ap_reg_pp0_iter1_sel_tmp_reg_849(0) = '1') else 
        ap_phi_mux_index_jj_phi_fu_236_p4;

    input_r_blk_n_AR_assign_proc : process(m_axi_input_r_ARREADY, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_reg_pp0_iter3_tmp_40_reg_824)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_reg_pp0_iter3_tmp_40_reg_824 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            input_r_blk_n_AR <= m_axi_input_r_ARREADY;
        else 
            input_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    input_r_blk_n_R_assign_proc : process(m_axi_input_r_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_tmp_40_reg_824)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_1 = ap_reg_pp0_iter10_tmp_40_reg_824) and (ap_block_pp0_stage0 = ap_const_boolean_0))) then 
            input_r_blk_n_R <= m_axi_input_r_RVALID;
        else 
            input_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    inputfm_0_address0 <= tmp_60_cast_fu_689_p1(11 - 1 downto 0);

    inputfm_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            inputfm_0_ce0 <= ap_const_logic_1;
        else 
            inputfm_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputfm_0_d0 <= tmp_49_fu_681_p2;

    inputfm_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter11_tmp_63_reg_880, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_lv2_0 = ap_reg_pp0_iter11_tmp_63_reg_880) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            inputfm_0_we0 <= ap_const_logic_1;
        else 
            inputfm_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    inputfm_1_address0 <= tmp_60_cast_fu_689_p1(11 - 1 downto 0);

    inputfm_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            inputfm_1_ce0 <= ap_const_logic_1;
        else 
            inputfm_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputfm_1_d0 <= tmp_49_fu_681_p2;

    inputfm_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter11_tmp_63_reg_880, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_reg_pp0_iter11_tmp_63_reg_880 = ap_const_lv2_1) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            inputfm_1_we0 <= ap_const_logic_1;
        else 
            inputfm_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    inputfm_2_address0 <= tmp_60_cast_fu_689_p1(11 - 1 downto 0);

    inputfm_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            inputfm_2_ce0 <= ap_const_logic_1;
        else 
            inputfm_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputfm_2_d0 <= tmp_49_fu_681_p2;

    inputfm_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_reg_pp0_iter11_tmp_63_reg_880, ap_enable_reg_pp0_iter12)
    begin
        if ((not((ap_const_lv2_0 = ap_reg_pp0_iter11_tmp_63_reg_880)) and not((ap_reg_pp0_iter11_tmp_63_reg_880 = ap_const_lv2_1)) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter12))) then 
            inputfm_2_we0 <= ap_const_logic_1;
        else 
            inputfm_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    itr_2_fu_493_p2 <= std_logic_vector(unsigned(itr_reg_244) + unsigned(ap_const_lv31_1));
    itr_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(itr_reg_244),32));
    j_2_fu_543_p3 <= 
        ap_const_lv32_0 when (tmp_42_fu_499_p2(0) = '1') else 
        j_reg_266;
    j_3_fu_584_p2 <= std_logic_vector(unsigned(j_2_fu_543_p3) + unsigned(ap_const_lv32_1));
    jj_2_fu_559_p3 <= 
        jj_4_fu_551_p3 when (tmp_42_fu_499_p2(0) = '1') else 
        ap_phi_mux_jj_phi_fu_281_p4;
    jj_3_fu_515_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_jj_phi_fu_281_p4));
    jj_4_fu_551_p3 <= 
        jj_3_fu_515_p2 when (sel_tmp_fu_521_p2(0) = '1') else 
        ap_phi_mux_jj_phi_fu_281_p4;
    m_axi_input_r_ARADDR <= input_addr_reg_919;
    m_axi_input_r_ARBURST <= ap_const_lv2_0;
    m_axi_input_r_ARCACHE <= ap_const_lv4_0;
    m_axi_input_r_ARID <= ap_const_lv1_0;
    m_axi_input_r_ARLEN <= ap_const_lv32_1;
    m_axi_input_r_ARLOCK <= ap_const_lv2_0;
    m_axi_input_r_ARPROT <= ap_const_lv3_0;
    m_axi_input_r_ARQOS <= ap_const_lv4_0;
    m_axi_input_r_ARREGION <= ap_const_lv4_0;
    m_axi_input_r_ARSIZE <= ap_const_lv3_0;
    m_axi_input_r_ARUSER <= ap_const_lv1_0;

    m_axi_input_r_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_reg_pp0_iter3_tmp_40_reg_824, ap_reg_ioackin_m_axi_input_r_ARREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_input_r_ARREADY) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_reg_pp0_iter3_tmp_40_reg_824 = ap_const_lv1_1))) then 
            m_axi_input_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_input_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_r_AWADDR <= ap_const_lv32_0;
    m_axi_input_r_AWBURST <= ap_const_lv2_0;
    m_axi_input_r_AWCACHE <= ap_const_lv4_0;
    m_axi_input_r_AWID <= ap_const_lv1_0;
    m_axi_input_r_AWLEN <= ap_const_lv32_0;
    m_axi_input_r_AWLOCK <= ap_const_lv2_0;
    m_axi_input_r_AWPROT <= ap_const_lv3_0;
    m_axi_input_r_AWQOS <= ap_const_lv4_0;
    m_axi_input_r_AWREGION <= ap_const_lv4_0;
    m_axi_input_r_AWSIZE <= ap_const_lv3_0;
    m_axi_input_r_AWUSER <= ap_const_lv1_0;
    m_axi_input_r_AWVALID <= ap_const_logic_0;
    m_axi_input_r_BREADY <= ap_const_logic_0;

    m_axi_input_r_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, ap_reg_pp0_iter10_tmp_40_reg_824, ap_block_pp0_stage0_11001)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_const_lv1_1 = ap_reg_pp0_iter10_tmp_40_reg_824))) then 
            m_axi_input_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_input_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_input_r_WDATA <= ap_const_lv8_0;
    m_axi_input_r_WID <= ap_const_lv1_0;
    m_axi_input_r_WLAST <= ap_const_logic_0;
    m_axi_input_r_WSTRB <= ap_const_lv1_0;
    m_axi_input_r_WUSER <= ap_const_lv1_0;
    m_axi_input_r_WVALID <= ap_const_logic_0;
    n_cols_2_fu_405_p3 <= 
        tmp_35_fu_400_p2 when (tmp_34_fu_395_p2(0) = '1') else 
        n_cols_reg_727;
    n_cols_fu_305_p2 <= curr_layer_in_w;
    n_cols_fu_305_p3 <= 
        tmp_28_fu_294_p2 when (tmp_29_fu_299_p2(0) = '1') else 
        n_cols_fu_305_p2;
    n_depth_1_fu_428_p3 <= 
        tmp_38_fu_423_p2 when (tmp_37_fu_418_p2(0) = '1') else 
        n_depth_fu_384_p3;
    n_depth_fu_384_p3 <= 
        ap_const_lv32_3 when (icmp_reg_733(0) = '1') else 
        curr_layer_in_ch;
    n_rows_2_fu_449_p3 <= 
        tmp_32_fu_445_p2 when (tmp_31_fu_440_p2(0) = '1') else 
        n_rows_reg_766;
    n_rows_fu_376_p2 <= curr_layer_in_h;
    n_rows_fu_376_p3 <= 
        tmp_25_fu_364_p2 when (tmp_26_fu_370_p2(0) = '1') else 
        n_rows_fu_376_p2;
    sel_tmp1_fu_604_p3 <= 
        ap_const_lv16_0 when (ap_reg_pp0_iter1_sel_tmp_reg_849(0) = '1') else 
        index_i_3_fu_598_p1;
    sel_tmp9_fu_527_p3 <= 
        ap_const_lv32_0 when (sel_tmp_fu_521_p2(0) = '1') else 
        i_3_fu_504_p2;
    sel_tmp_fu_521_p2 <= (tmp_45_fu_510_p2 and tmp_42_fu_499_p2);
        sext_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_offset),33));

        sum_cast_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_fu_663_p2),64));

    sum_fu_663_p2 <= std_logic_vector(signed(sext_cast_reg_819) + signed(tmp_52_cast_fu_660_p1));
    tmp13_fu_358_p2 <= std_logic_vector(unsigned(tmp_52_fu_352_p2) + unsigned(curr_layer_ker_h));
    tmp14_fu_456_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(n_depth_1_reg_778) * signed(n_cols_2_reg_772))), 32));
    tmp15_fu_476_p0 <= curr_layer_in_h;
    tmp15_fu_476_p1 <= curr_layer_in_w;
    tmp15_fu_476_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp15_fu_476_p0) * signed(tmp15_fu_476_p1))), 32));
    tmp16_fu_567_p2 <= std_logic_vector(unsigned(tmp6_reg_809) + unsigned(j_2_fu_543_p3));
    tmp17_fu_640_p2 <= std_logic_vector(unsigned(tmp_62_cast_fu_632_p1) + unsigned(tmp_63_cast_fu_636_p1));
    tmp18_fu_650_p2 <= std_logic_vector(unsigned(tmp_24_reg_761) + unsigned(tmp25_cast_fu_646_p1));
    tmp25_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp17_fu_640_p2),32));
    tmp6_fu_472_p1 <= curr_layer_in_w;
    tmp6_fu_472_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_reg_794) * signed(tmp6_fu_472_p1))), 32));
    tmp_23_fu_335_p0 <= curr_layer_str_h;
    tmp_23_fu_335_p1 <= row;
    tmp_23_fu_335_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_23_fu_335_p0) * signed(tmp_23_fu_335_p1))), 32));
    tmp_24_fu_341_p0 <= curr_layer_str_w;
    tmp_24_fu_341_p1 <= col;
    tmp_24_fu_341_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_24_fu_341_p0) * signed(tmp_24_fu_341_p1))), 32));
    tmp_25_fu_364_p2 <= std_logic_vector(unsigned(tmp_44_fu_346_p2) + unsigned(tmp13_fu_358_p2));
    tmp_26_fu_370_p1 <= curr_layer_in_h;
    tmp_26_fu_370_p2 <= "1" when (signed(tmp_25_fu_364_p2) < signed(tmp_26_fu_370_p1)) else "0";
    tmp_27_fu_288_p1 <= curr_layer_str_w;
    tmp_27_fu_288_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv32_1A) * signed(tmp_27_fu_288_p1))), 32));
    tmp_28_fu_294_p2 <= std_logic_vector(unsigned(tmp_27_reg_706) + unsigned(curr_layer_ker_w));
    tmp_29_fu_299_p1 <= curr_layer_in_w;
    tmp_29_fu_299_p2 <= "1" when (signed(tmp_28_fu_294_p2) < signed(tmp_29_fu_299_p1)) else "0";
    tmp_30_fu_436_p1 <= row;
    tmp_30_fu_436_p2 <= std_logic_vector(unsigned(n_rows_reg_766) + unsigned(tmp_30_fu_436_p1));
    tmp_31_fu_440_p1 <= curr_layer_in_h;
    tmp_31_fu_440_p2 <= "1" when (signed(tmp_30_fu_436_p2) > signed(tmp_31_fu_440_p1)) else "0";
    tmp_32_fu_445_p0 <= curr_layer_in_h;
    tmp_32_fu_445_p1 <= row;
    tmp_32_fu_445_p2 <= std_logic_vector(signed(tmp_32_fu_445_p0) - signed(tmp_32_fu_445_p1));
    tmp_33_fu_390_p1 <= col;
    tmp_33_fu_390_p2 <= std_logic_vector(unsigned(n_cols_reg_727) + unsigned(tmp_33_fu_390_p1));
    tmp_34_fu_395_p1 <= curr_layer_in_w;
    tmp_34_fu_395_p2 <= "1" when (signed(tmp_33_fu_390_p2) > signed(tmp_34_fu_395_p1)) else "0";
    tmp_35_fu_400_p0 <= curr_layer_in_w;
    tmp_35_fu_400_p1 <= col;
    tmp_35_fu_400_p2 <= std_logic_vector(signed(tmp_35_fu_400_p0) - signed(tmp_35_fu_400_p1));
    tmp_36_fu_412_p1 <= ti;
    tmp_36_fu_412_p2 <= std_logic_vector(unsigned(n_depth_fu_384_p3) + unsigned(tmp_36_fu_412_p1));
    tmp_37_fu_418_p2 <= "1" when (signed(tmp_36_fu_412_p2) > signed(curr_layer_in_ch)) else "0";
    tmp_38_fu_423_p1 <= ti;
    tmp_38_fu_423_p2 <= std_logic_vector(unsigned(curr_layer_in_ch) - unsigned(tmp_38_fu_423_p1));
    tmp_39_fu_464_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(n_rows_2_reg_783) * signed(tmp14_reg_789))), 32));
    tmp_40_fu_488_p2 <= "1" when (signed(itr_cast_fu_484_p1) < signed(tmp_39_reg_799)) else "0";
    tmp_42_fu_499_p2 <= "1" when (j_reg_266 = n_cols_2_reg_772) else "0";
    tmp_43_fu_590_p1 <= curr_layer_in_w;
    tmp_43_fu_590_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(i_3_reg_839) * signed(tmp_43_fu_590_p1))), 32));
    tmp_44_fu_346_p0 <= curr_layer_str_h;
    tmp_44_fu_346_p2 <= std_logic_vector(shift_left(unsigned(tmp_44_fu_346_p0),to_integer(unsigned('0' & ap_const_lv32_5(31-1 downto 0)))));
    tmp_45_fu_510_p2 <= "1" when (i_3_fu_504_p2 = n_rows_2_reg_783) else "0";
    tmp_46_fu_594_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(jj_3_reg_844) * signed(tmp15_reg_814))), 32));
    tmp_47_fu_655_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter1_tmp16_reg_865) + unsigned(tmp18_fu_650_p2));
    tmp_48_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_addr_read_reg_925),10));
    tmp_49_fu_681_p2 <= std_logic_vector(unsigned(tmp_48_fu_678_p1) + unsigned(tmp_56_reg_804));
        tmp_52_cast_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_47_reg_914),33));

    tmp_52_fu_352_p0 <= curr_layer_str_h;
    tmp_52_fu_352_p2 <= std_logic_vector(shift_left(unsigned(tmp_52_fu_352_p0),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    tmp_55_fu_313_p4 <= curr_layer_in_ch(31 downto 2);
    tmp_56_fu_468_p1 <= input_offset_1(10 - 1 downto 0);
        tmp_60_cast_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_reg_pp0_iter11_tmp_51_reg_899),64));

    tmp_61_fu_572_p1 <= j_2_fu_543_p3(12 - 1 downto 0);
    tmp_62_cast_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_jj_2_fu_625_p3),17));
    tmp_62_fu_576_p1 <= i_2_fu_535_p3(12 - 1 downto 0);
    tmp_63_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_i_2_fu_611_p3),17));
    tmp_63_fu_580_p1 <= jj_2_fu_559_p3(2 - 1 downto 0);
    tmp_fu_460_p2 <= std_logic_vector(unsigned(tmp_s_reg_751) + unsigned(tmp_23_reg_756));
    tmp_s_fu_329_p0 <= curr_layer_in_h;
    tmp_s_fu_329_p1 <= ti;
    tmp_s_fu_329_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_s_fu_329_p0) * signed(tmp_s_fu_329_p1))), 32));
end behav;
