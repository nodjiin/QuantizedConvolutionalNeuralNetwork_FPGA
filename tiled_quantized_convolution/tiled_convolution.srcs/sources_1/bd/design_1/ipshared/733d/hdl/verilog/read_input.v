// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module read_input (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR,
        m_axi_input_r_AWID,
        m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID,
        m_axi_input_r_WREADY,
        m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST,
        m_axi_input_r_WID,
        m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR,
        m_axi_input_r_ARID,
        m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID,
        m_axi_input_r_RREADY,
        m_axi_input_r_RDATA,
        m_axi_input_r_RLAST,
        m_axi_input_r_RID,
        m_axi_input_r_RUSER,
        m_axi_input_r_RRESP,
        m_axi_input_r_BVALID,
        m_axi_input_r_BREADY,
        m_axi_input_r_BRESP,
        m_axi_input_r_BID,
        m_axi_input_r_BUSER,
        input_offset,
        curr_layer_in_w,
        curr_layer_in_h,
        curr_layer_in_ch,
        curr_layer_ker_w,
        curr_layer_ker_h,
        curr_layer_str_w,
        curr_layer_str_h,
        ti,
        row,
        col,
        inputfm_0_address0,
        inputfm_0_ce0,
        inputfm_0_we0,
        inputfm_0_d0,
        inputfm_1_address0,
        inputfm_1_ce0,
        inputfm_1_we0,
        inputfm_1_d0,
        inputfm_2_address0,
        inputfm_2_ce0,
        inputfm_2_we0,
        inputfm_2_d0,
        input_offset_1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state19 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_r_AWVALID;
input   m_axi_input_r_AWREADY;
output  [31:0] m_axi_input_r_AWADDR;
output  [0:0] m_axi_input_r_AWID;
output  [31:0] m_axi_input_r_AWLEN;
output  [2:0] m_axi_input_r_AWSIZE;
output  [1:0] m_axi_input_r_AWBURST;
output  [1:0] m_axi_input_r_AWLOCK;
output  [3:0] m_axi_input_r_AWCACHE;
output  [2:0] m_axi_input_r_AWPROT;
output  [3:0] m_axi_input_r_AWQOS;
output  [3:0] m_axi_input_r_AWREGION;
output  [0:0] m_axi_input_r_AWUSER;
output   m_axi_input_r_WVALID;
input   m_axi_input_r_WREADY;
output  [7:0] m_axi_input_r_WDATA;
output  [0:0] m_axi_input_r_WSTRB;
output   m_axi_input_r_WLAST;
output  [0:0] m_axi_input_r_WID;
output  [0:0] m_axi_input_r_WUSER;
output   m_axi_input_r_ARVALID;
input   m_axi_input_r_ARREADY;
output  [31:0] m_axi_input_r_ARADDR;
output  [0:0] m_axi_input_r_ARID;
output  [31:0] m_axi_input_r_ARLEN;
output  [2:0] m_axi_input_r_ARSIZE;
output  [1:0] m_axi_input_r_ARBURST;
output  [1:0] m_axi_input_r_ARLOCK;
output  [3:0] m_axi_input_r_ARCACHE;
output  [2:0] m_axi_input_r_ARPROT;
output  [3:0] m_axi_input_r_ARQOS;
output  [3:0] m_axi_input_r_ARREGION;
output  [0:0] m_axi_input_r_ARUSER;
input   m_axi_input_r_RVALID;
output   m_axi_input_r_RREADY;
input  [7:0] m_axi_input_r_RDATA;
input   m_axi_input_r_RLAST;
input  [0:0] m_axi_input_r_RID;
input  [0:0] m_axi_input_r_RUSER;
input  [1:0] m_axi_input_r_RRESP;
input   m_axi_input_r_BVALID;
output   m_axi_input_r_BREADY;
input  [1:0] m_axi_input_r_BRESP;
input  [0:0] m_axi_input_r_BID;
input  [0:0] m_axi_input_r_BUSER;
input  [31:0] input_offset;
input  [31:0] curr_layer_in_w;
input  [31:0] curr_layer_in_h;
input  [31:0] curr_layer_in_ch;
input  [31:0] curr_layer_ker_w;
input  [31:0] curr_layer_ker_h;
input  [31:0] curr_layer_str_w;
input  [31:0] curr_layer_str_h;
input  [31:0] ti;
input  [31:0] row;
input  [31:0] col;
output  [10:0] inputfm_0_address0;
output   inputfm_0_ce0;
output   inputfm_0_we0;
output  [9:0] inputfm_0_d0;
output  [10:0] inputfm_1_address0;
output   inputfm_1_ce0;
output   inputfm_1_we0;
output  [9:0] inputfm_1_d0;
output  [10:0] inputfm_2_address0;
output   inputfm_2_ce0;
output   inputfm_2_we0;
output  [9:0] inputfm_2_d0;
input  [31:0] input_offset_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_r_ARVALID;
reg m_axi_input_r_RREADY;
reg inputfm_0_ce0;
reg inputfm_0_we0;
reg inputfm_1_ce0;
reg inputfm_1_we0;
reg inputfm_2_ce0;
reg inputfm_2_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    input_r_blk_n_AR;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_40_reg_824;
reg   [0:0] ap_reg_pp0_iter3_tmp_40_reg_824;
reg    input_r_blk_n_R;
reg    ap_enable_reg_pp0_iter11;
reg   [0:0] ap_reg_pp0_iter10_tmp_40_reg_824;
reg   [15:0] index_i_reg_220;
reg   [15:0] index_jj_reg_232;
reg   [30:0] itr_reg_244;
reg   [31:0] i_reg_255;
reg   [31:0] j_reg_266;
reg   [31:0] jj_reg_277;
wire   [31:0] tmp_27_fu_288_p2;
reg   [31:0] tmp_27_reg_706;
wire    ap_CS_fsm_state2;
wire   [31:0] n_cols_fu_305_p3;
reg   [31:0] n_cols_reg_727;
wire   [0:0] icmp_fu_323_p2;
reg   [0:0] icmp_reg_733;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_s_fu_329_p2;
reg   [31:0] tmp_s_reg_751;
wire   [31:0] tmp_23_fu_335_p2;
reg   [31:0] tmp_23_reg_756;
wire   [31:0] tmp_24_fu_341_p2;
reg   [31:0] tmp_24_reg_761;
wire   [31:0] n_rows_fu_376_p3;
reg   [31:0] n_rows_reg_766;
wire  signed [31:0] n_cols_2_fu_405_p3;
reg  signed [31:0] n_cols_2_reg_772;
wire  signed [31:0] n_depth_1_fu_428_p3;
reg  signed [31:0] n_depth_1_reg_778;
wire  signed [31:0] n_rows_2_fu_449_p3;
reg  signed [31:0] n_rows_2_reg_783;
wire    ap_CS_fsm_state4;
wire  signed [31:0] tmp14_fu_456_p2;
reg  signed [31:0] tmp14_reg_789;
wire  signed [31:0] tmp_fu_460_p2;
reg  signed [31:0] tmp_reg_794;
wire   [31:0] tmp_39_fu_464_p2;
reg   [31:0] tmp_39_reg_799;
wire    ap_CS_fsm_state5;
wire   [9:0] tmp_56_fu_468_p1;
reg   [9:0] tmp_56_reg_804;
wire   [31:0] tmp6_fu_472_p2;
reg   [31:0] tmp6_reg_809;
wire  signed [31:0] tmp15_fu_476_p2;
reg  signed [31:0] tmp15_reg_814;
wire  signed [32:0] sext_cast_fu_480_p1;
reg  signed [32:0] sext_cast_reg_819;
wire   [0:0] tmp_40_fu_488_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
reg    ap_sig_ioackin_m_axi_input_r_ARREADY;
reg    ap_block_state10_io;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state12_pp0_stage0_iter6;
wire    ap_block_state13_pp0_stage0_iter7;
wire    ap_block_state14_pp0_stage0_iter8;
wire    ap_block_state15_pp0_stage0_iter9;
wire    ap_block_state16_pp0_stage0_iter10;
reg    ap_block_state17_pp0_stage0_iter11;
wire    ap_block_state18_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_tmp_40_reg_824;
reg   [0:0] ap_reg_pp0_iter2_tmp_40_reg_824;
reg   [0:0] ap_reg_pp0_iter4_tmp_40_reg_824;
reg   [0:0] ap_reg_pp0_iter5_tmp_40_reg_824;
reg   [0:0] ap_reg_pp0_iter6_tmp_40_reg_824;
reg   [0:0] ap_reg_pp0_iter7_tmp_40_reg_824;
reg   [0:0] ap_reg_pp0_iter8_tmp_40_reg_824;
reg   [0:0] ap_reg_pp0_iter9_tmp_40_reg_824;
wire   [30:0] itr_2_fu_493_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_42_fu_499_p2;
reg   [0:0] tmp_42_reg_833;
reg   [0:0] ap_reg_pp0_iter1_tmp_42_reg_833;
wire  signed [31:0] i_3_fu_504_p2;
reg  signed [31:0] i_3_reg_839;
wire  signed [31:0] jj_3_fu_515_p2;
reg  signed [31:0] jj_3_reg_844;
wire   [0:0] sel_tmp_fu_521_p2;
reg   [0:0] sel_tmp_reg_849;
reg   [0:0] ap_reg_pp0_iter1_sel_tmp_reg_849;
wire   [31:0] i_2_fu_535_p3;
reg   [31:0] i_2_reg_855;
wire   [31:0] jj_2_fu_559_p3;
reg   [31:0] jj_2_reg_860;
wire   [31:0] tmp16_fu_567_p2;
reg   [31:0] tmp16_reg_865;
reg   [31:0] ap_reg_pp0_iter1_tmp16_reg_865;
wire   [11:0] tmp_61_fu_572_p1;
reg   [11:0] tmp_61_reg_870;
wire  signed [11:0] tmp_62_fu_576_p1;
reg  signed [11:0] tmp_62_reg_875;
wire   [1:0] tmp_63_fu_580_p1;
reg   [1:0] tmp_63_reg_880;
reg   [1:0] ap_reg_pp0_iter1_tmp_63_reg_880;
reg   [1:0] ap_reg_pp0_iter2_tmp_63_reg_880;
reg   [1:0] ap_reg_pp0_iter3_tmp_63_reg_880;
reg   [1:0] ap_reg_pp0_iter4_tmp_63_reg_880;
reg   [1:0] ap_reg_pp0_iter5_tmp_63_reg_880;
reg   [1:0] ap_reg_pp0_iter6_tmp_63_reg_880;
reg   [1:0] ap_reg_pp0_iter7_tmp_63_reg_880;
reg   [1:0] ap_reg_pp0_iter8_tmp_63_reg_880;
reg   [1:0] ap_reg_pp0_iter9_tmp_63_reg_880;
reg   [1:0] ap_reg_pp0_iter10_tmp_63_reg_880;
reg   [1:0] ap_reg_pp0_iter11_tmp_63_reg_880;
wire   [31:0] j_3_fu_584_p2;
wire   [31:0] tmp_43_fu_590_p2;
reg   [31:0] tmp_43_reg_889;
wire   [31:0] tmp_46_fu_594_p2;
reg   [31:0] tmp_46_reg_894;
wire  signed [11:0] grp_fu_695_p3;
reg  signed [11:0] tmp_51_reg_899;
reg    ap_enable_reg_pp0_iter1;
reg  signed [11:0] ap_reg_pp0_iter2_tmp_51_reg_899;
reg  signed [11:0] ap_reg_pp0_iter3_tmp_51_reg_899;
reg  signed [11:0] ap_reg_pp0_iter4_tmp_51_reg_899;
reg  signed [11:0] ap_reg_pp0_iter5_tmp_51_reg_899;
reg  signed [11:0] ap_reg_pp0_iter6_tmp_51_reg_899;
reg  signed [11:0] ap_reg_pp0_iter7_tmp_51_reg_899;
reg  signed [11:0] ap_reg_pp0_iter8_tmp_51_reg_899;
reg  signed [11:0] ap_reg_pp0_iter9_tmp_51_reg_899;
reg  signed [11:0] ap_reg_pp0_iter10_tmp_51_reg_899;
reg  signed [11:0] ap_reg_pp0_iter11_tmp_51_reg_899;
wire   [15:0] index_i_2_fu_611_p3;
reg   [15:0] index_i_2_reg_904;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] index_jj_2_fu_625_p3;
reg   [15:0] index_jj_2_reg_909;
wire   [31:0] tmp_47_fu_655_p2;
reg   [31:0] tmp_47_reg_914;
reg   [31:0] input_addr_reg_919;
reg   [7:0] input_addr_read_reg_925;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter12;
reg   [15:0] ap_phi_mux_index_i_phi_fu_224_p4;
reg   [15:0] ap_phi_mux_index_jj_phi_fu_236_p4;
reg   [31:0] ap_phi_mux_i_phi_fu_259_p4;
reg   [31:0] ap_phi_mux_jj_phi_fu_281_p4;
wire  signed [63:0] tmp_60_cast_fu_689_p1;
wire  signed [63:0] sum_cast_fu_668_p1;
reg    ap_reg_ioackin_m_axi_input_r_ARREADY;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] tmp_49_fu_681_p2;
wire  signed [31:0] tmp_27_fu_288_p1;
wire   [31:0] tmp_28_fu_294_p2;
wire  signed [31:0] tmp_29_fu_299_p1;
wire   [0:0] tmp_29_fu_299_p2;
wire  signed [31:0] n_cols_fu_305_p2;
wire   [29:0] tmp_55_fu_313_p4;
wire  signed [31:0] tmp_s_fu_329_p0;
wire  signed [31:0] tmp_s_fu_329_p1;
wire  signed [31:0] tmp_23_fu_335_p0;
wire  signed [31:0] tmp_23_fu_335_p1;
wire  signed [31:0] tmp_24_fu_341_p0;
wire  signed [31:0] tmp_24_fu_341_p1;
wire  signed [31:0] tmp_44_fu_346_p0;
wire  signed [31:0] tmp_52_fu_352_p0;
wire   [31:0] tmp_52_fu_352_p2;
wire   [31:0] tmp_44_fu_346_p2;
wire   [31:0] tmp13_fu_358_p2;
wire   [31:0] tmp_25_fu_364_p2;
wire  signed [31:0] tmp_26_fu_370_p1;
wire   [0:0] tmp_26_fu_370_p2;
wire  signed [31:0] n_rows_fu_376_p2;
wire  signed [31:0] tmp_33_fu_390_p1;
wire   [31:0] tmp_33_fu_390_p2;
wire  signed [31:0] tmp_34_fu_395_p1;
wire  signed [31:0] tmp_35_fu_400_p0;
wire  signed [31:0] tmp_35_fu_400_p1;
wire   [0:0] tmp_34_fu_395_p2;
wire   [31:0] tmp_35_fu_400_p2;
wire   [31:0] n_depth_fu_384_p3;
wire  signed [31:0] tmp_36_fu_412_p1;
wire   [31:0] tmp_36_fu_412_p2;
wire  signed [31:0] tmp_38_fu_423_p1;
wire   [0:0] tmp_37_fu_418_p2;
wire   [31:0] tmp_38_fu_423_p2;
wire  signed [31:0] tmp_30_fu_436_p1;
wire   [31:0] tmp_30_fu_436_p2;
wire  signed [31:0] tmp_31_fu_440_p1;
wire  signed [31:0] tmp_32_fu_445_p0;
wire  signed [31:0] tmp_32_fu_445_p1;
wire   [0:0] tmp_31_fu_440_p2;
wire   [31:0] tmp_32_fu_445_p2;
wire  signed [31:0] tmp6_fu_472_p1;
wire  signed [31:0] tmp15_fu_476_p0;
wire  signed [31:0] tmp15_fu_476_p1;
wire   [31:0] itr_cast_fu_484_p1;
wire   [0:0] tmp_45_fu_510_p2;
wire   [31:0] sel_tmp9_fu_527_p3;
wire   [31:0] jj_4_fu_551_p3;
wire   [31:0] j_2_fu_543_p3;
wire  signed [31:0] tmp_43_fu_590_p1;
wire   [15:0] index_i_3_fu_598_p1;
wire   [15:0] sel_tmp1_fu_604_p3;
wire   [15:0] index_jj_3_fu_601_p1;
wire   [15:0] index_jj_4_fu_618_p3;
wire   [16:0] tmp_62_cast_fu_632_p1;
wire   [16:0] tmp_63_cast_fu_636_p1;
wire   [16:0] tmp17_fu_640_p2;
wire   [31:0] tmp25_cast_fu_646_p1;
wire   [31:0] tmp18_fu_650_p2;
wire  signed [32:0] tmp_52_cast_fu_660_p1;
wire   [32:0] sum_fu_663_p2;
wire   [9:0] tmp_48_fu_678_p1;
wire   [5:0] grp_fu_695_p0;
wire    ap_CS_fsm_state19;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_reg_ioackin_m_axi_input_r_ARREADY = 1'b0;
end

zhang_cnn_mac_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
zhang_cnn_mac_mulbkb_U1(
    .din0(grp_fu_695_p0),
    .din1(tmp_62_reg_875),
    .din2(tmp_61_reg_870),
    .dout(grp_fu_695_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state6 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter4) & (ap_reg_pp0_iter3_tmp_40_reg_824 == 1'd1))) begin
            if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'b1 == m_axi_input_r_ARREADY))) begin
                ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_40_reg_824 == 1'd1))) begin
        i_reg_255 <= i_2_reg_855;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_255 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'd1 == ap_reg_pp0_iter2_tmp_40_reg_824))) begin
        index_i_reg_220 <= index_i_2_reg_904;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        index_i_reg_220 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3) & (1'd1 == ap_reg_pp0_iter2_tmp_40_reg_824))) begin
        index_jj_reg_232 <= index_jj_2_reg_909;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        index_jj_reg_232 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_40_fu_488_p2))) begin
        itr_reg_244 <= itr_2_fu_493_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        itr_reg_244 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_40_fu_488_p2))) begin
        j_reg_266 <= j_3_fu_584_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_266 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_40_reg_824 == 1'd1))) begin
        jj_reg_277 <= jj_2_reg_860;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        jj_reg_277 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
        ap_reg_pp0_iter10_tmp_40_reg_824 <= ap_reg_pp0_iter9_tmp_40_reg_824;
        ap_reg_pp0_iter10_tmp_51_reg_899 <= ap_reg_pp0_iter9_tmp_51_reg_899;
        ap_reg_pp0_iter10_tmp_63_reg_880 <= ap_reg_pp0_iter9_tmp_63_reg_880;
        ap_reg_pp0_iter11_tmp_51_reg_899 <= ap_reg_pp0_iter10_tmp_51_reg_899;
        ap_reg_pp0_iter11_tmp_63_reg_880 <= ap_reg_pp0_iter10_tmp_63_reg_880;
        ap_reg_pp0_iter2_tmp_40_reg_824 <= ap_reg_pp0_iter1_tmp_40_reg_824;
        ap_reg_pp0_iter2_tmp_51_reg_899 <= tmp_51_reg_899;
        ap_reg_pp0_iter2_tmp_63_reg_880 <= ap_reg_pp0_iter1_tmp_63_reg_880;
        ap_reg_pp0_iter3_tmp_40_reg_824 <= ap_reg_pp0_iter2_tmp_40_reg_824;
        ap_reg_pp0_iter3_tmp_51_reg_899 <= ap_reg_pp0_iter2_tmp_51_reg_899;
        ap_reg_pp0_iter3_tmp_63_reg_880 <= ap_reg_pp0_iter2_tmp_63_reg_880;
        ap_reg_pp0_iter4_tmp_40_reg_824 <= ap_reg_pp0_iter3_tmp_40_reg_824;
        ap_reg_pp0_iter4_tmp_51_reg_899 <= ap_reg_pp0_iter3_tmp_51_reg_899;
        ap_reg_pp0_iter4_tmp_63_reg_880 <= ap_reg_pp0_iter3_tmp_63_reg_880;
        ap_reg_pp0_iter5_tmp_40_reg_824 <= ap_reg_pp0_iter4_tmp_40_reg_824;
        ap_reg_pp0_iter5_tmp_51_reg_899 <= ap_reg_pp0_iter4_tmp_51_reg_899;
        ap_reg_pp0_iter5_tmp_63_reg_880 <= ap_reg_pp0_iter4_tmp_63_reg_880;
        ap_reg_pp0_iter6_tmp_40_reg_824 <= ap_reg_pp0_iter5_tmp_40_reg_824;
        ap_reg_pp0_iter6_tmp_51_reg_899 <= ap_reg_pp0_iter5_tmp_51_reg_899;
        ap_reg_pp0_iter6_tmp_63_reg_880 <= ap_reg_pp0_iter5_tmp_63_reg_880;
        ap_reg_pp0_iter7_tmp_40_reg_824 <= ap_reg_pp0_iter6_tmp_40_reg_824;
        ap_reg_pp0_iter7_tmp_51_reg_899 <= ap_reg_pp0_iter6_tmp_51_reg_899;
        ap_reg_pp0_iter7_tmp_63_reg_880 <= ap_reg_pp0_iter6_tmp_63_reg_880;
        ap_reg_pp0_iter8_tmp_40_reg_824 <= ap_reg_pp0_iter7_tmp_40_reg_824;
        ap_reg_pp0_iter8_tmp_51_reg_899 <= ap_reg_pp0_iter7_tmp_51_reg_899;
        ap_reg_pp0_iter8_tmp_63_reg_880 <= ap_reg_pp0_iter7_tmp_63_reg_880;
        ap_reg_pp0_iter9_tmp_40_reg_824 <= ap_reg_pp0_iter8_tmp_40_reg_824;
        ap_reg_pp0_iter9_tmp_51_reg_899 <= ap_reg_pp0_iter8_tmp_51_reg_899;
        ap_reg_pp0_iter9_tmp_63_reg_880 <= ap_reg_pp0_iter8_tmp_63_reg_880;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_sel_tmp_reg_849 <= sel_tmp_reg_849;
        ap_reg_pp0_iter1_tmp16_reg_865 <= tmp16_reg_865;
        ap_reg_pp0_iter1_tmp_40_reg_824 <= tmp_40_reg_824;
        ap_reg_pp0_iter1_tmp_42_reg_833 <= tmp_42_reg_833;
        ap_reg_pp0_iter1_tmp_63_reg_880 <= tmp_63_reg_880;
        tmp_40_reg_824 <= tmp_40_fu_488_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_40_fu_488_p2))) begin
        i_2_reg_855 <= i_2_fu_535_p3;
        jj_2_reg_860 <= jj_2_fu_559_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_40_fu_488_p2))) begin
        i_3_reg_839 <= i_3_fu_504_p2;
        jj_3_reg_844 <= jj_3_fu_515_p2;
        sel_tmp_reg_849 <= sel_tmp_fu_521_p2;
        tmp16_reg_865 <= tmp16_fu_567_p2;
        tmp_42_reg_833 <= tmp_42_fu_499_p2;
        tmp_61_reg_870 <= tmp_61_fu_572_p1;
        tmp_62_reg_875 <= tmp_62_fu_576_p1;
        tmp_63_reg_880 <= tmp_63_fu_580_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_reg_733 <= icmp_fu_323_p2;
        n_cols_reg_727 <= n_cols_fu_305_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_tmp_40_reg_824))) begin
        index_i_2_reg_904 <= index_i_2_fu_611_p3;
        index_jj_2_reg_909 <= index_jj_2_fu_625_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter10_tmp_40_reg_824))) begin
        input_addr_read_reg_925 <= m_axi_input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_40_reg_824))) begin
        input_addr_reg_919 <= sum_cast_fu_668_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        n_cols_2_reg_772 <= n_cols_2_fu_405_p3;
        n_depth_1_reg_778 <= n_depth_1_fu_428_p3;
        n_rows_reg_766 <= n_rows_fu_376_p3;
        tmp_23_reg_756 <= tmp_23_fu_335_p2;
        tmp_24_reg_761 <= tmp_24_fu_341_p2;
        tmp_s_reg_751 <= tmp_s_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        n_rows_2_reg_783 <= n_rows_2_fu_449_p3;
        tmp14_reg_789 <= tmp14_fu_456_p2;
        tmp_reg_794 <= tmp_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        sext_cast_reg_819 <= sext_cast_fu_480_p1;
        tmp15_reg_814 <= tmp15_fu_476_p2;
        tmp6_reg_809 <= tmp6_fu_472_p2;
        tmp_39_reg_799 <= tmp_39_fu_464_p2;
        tmp_56_reg_804 <= tmp_56_fu_468_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_27_reg_706 <= tmp_27_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == sel_tmp_reg_849) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == tmp_42_reg_833) & (tmp_40_reg_824 == 1'd1))) begin
        tmp_43_reg_889 <= tmp_43_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == sel_tmp_reg_849) & (1'd1 == tmp_42_reg_833) & (tmp_40_reg_824 == 1'd1))) begin
        tmp_46_reg_894 <= tmp_46_fu_594_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_tmp_40_reg_824))) begin
        tmp_47_reg_914 <= tmp_47_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_40_reg_824 == 1'd1))) begin
        tmp_51_reg_899 <= grp_fu_695_p3;
    end
end

always @ (*) begin
    if ((1'd0 == tmp_40_fu_488_p2)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter12) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter4))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_40_reg_824 == 1'd1) & (ap_block_pp0_stage0 == 1'b0))) begin
        ap_phi_mux_i_phi_fu_259_p4 = i_2_reg_855;
    end else begin
        ap_phi_mux_i_phi_fu_259_p4 = i_reg_255;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (1'd1 == ap_reg_pp0_iter2_tmp_40_reg_824) & (ap_block_pp0_stage0 == 1'b0))) begin
        ap_phi_mux_index_i_phi_fu_224_p4 = index_i_2_reg_904;
    end else begin
        ap_phi_mux_index_i_phi_fu_224_p4 = index_i_reg_220;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter3) & (1'd1 == ap_reg_pp0_iter2_tmp_40_reg_824) & (ap_block_pp0_stage0 == 1'b0))) begin
        ap_phi_mux_index_jj_phi_fu_236_p4 = index_jj_2_reg_909;
    end else begin
        ap_phi_mux_index_jj_phi_fu_236_p4 = index_jj_reg_232;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_40_reg_824 == 1'd1) & (ap_block_pp0_stage0 == 1'b0))) begin
        ap_phi_mux_jj_phi_fu_281_p4 = jj_2_reg_860;
    end else begin
        ap_phi_mux_jj_phi_fu_281_p4 = jj_reg_277;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = m_axi_input_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter4) & (ap_reg_pp0_iter3_tmp_40_reg_824 == 1'd1) & (ap_block_pp0_stage0 == 1'b0))) begin
        input_r_blk_n_AR = m_axi_input_r_ARREADY;
    end else begin
        input_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter11) & (1'd1 == ap_reg_pp0_iter10_tmp_40_reg_824) & (ap_block_pp0_stage0 == 1'b0))) begin
        input_r_blk_n_R = m_axi_input_r_RVALID;
    end else begin
        input_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        inputfm_0_ce0 = 1'b1;
    end else begin
        inputfm_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((2'd0 == ap_reg_pp0_iter11_tmp_63_reg_880) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        inputfm_0_we0 = 1'b1;
    end else begin
        inputfm_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        inputfm_1_ce0 = 1'b1;
    end else begin
        inputfm_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter11_tmp_63_reg_880 == 2'd1) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        inputfm_1_we0 = 1'b1;
    end else begin
        inputfm_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        inputfm_2_ce0 = 1'b1;
    end else begin
        inputfm_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(2'd0 == ap_reg_pp0_iter11_tmp_63_reg_880) & ~(ap_reg_pp0_iter11_tmp_63_reg_880 == 2'd1) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12))) begin
        inputfm_2_we0 = 1'b1;
    end else begin
        inputfm_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_reg_pp0_iter3_tmp_40_reg_824 == 1'd1))) begin
        m_axi_input_r_ARVALID = 1'b1;
    end else begin
        m_axi_input_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter11) & (1'd1 == ap_reg_pp0_iter10_tmp_40_reg_824))) begin
        m_axi_input_r_RREADY = 1'b1;
    end else begin
        m_axi_input_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'd0 == tmp_40_fu_488_p2) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) & ~((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12) & (ap_enable_reg_pp0_iter11 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter12) & (ap_enable_reg_pp0_iter11 == 1'b0)) | ((1'd0 == tmp_40_fu_488_p2) & (ap_block_pp0_stage0_subdone == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == m_axi_input_r_RVALID) & (1'b1 == ap_enable_reg_pp0_iter11) & (1'd1 == ap_reg_pp0_iter10_tmp_40_reg_824));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == m_axi_input_r_RVALID) & (1'b1 == ap_enable_reg_pp0_iter11) & (1'd1 == ap_reg_pp0_iter10_tmp_40_reg_824)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state10_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == m_axi_input_r_RVALID) & (1'b1 == ap_enable_reg_pp0_iter11) & (1'd1 == ap_reg_pp0_iter10_tmp_40_reg_824)) | ((1'b1 == ap_enable_reg_pp0_iter4) & (1'b1 == ap_block_state10_io)));
end

always @ (*) begin
    ap_block_state10_io = ((1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY) & (ap_reg_pp0_iter3_tmp_40_reg_824 == 1'd1));
end

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter11 = ((1'b0 == m_axi_input_r_RVALID) & (1'd1 == ap_reg_pp0_iter10_tmp_40_reg_824));
end

assign ap_block_state18_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign grp_fu_695_p0 = 12'd29;

assign i_2_fu_535_p3 = ((tmp_42_fu_499_p2[0:0] === 1'b1) ? sel_tmp9_fu_527_p3 : ap_phi_mux_i_phi_fu_259_p4);

assign i_3_fu_504_p2 = (32'd1 + ap_phi_mux_i_phi_fu_259_p4);

assign icmp_fu_323_p2 = (($signed(tmp_55_fu_313_p4) > $signed(30'd0)) ? 1'b1 : 1'b0);

assign index_i_2_fu_611_p3 = ((ap_reg_pp0_iter1_tmp_42_reg_833[0:0] === 1'b1) ? sel_tmp1_fu_604_p3 : ap_phi_mux_index_i_phi_fu_224_p4);

assign index_i_3_fu_598_p1 = tmp_43_reg_889[15:0];

assign index_jj_2_fu_625_p3 = ((ap_reg_pp0_iter1_tmp_42_reg_833[0:0] === 1'b1) ? index_jj_4_fu_618_p3 : ap_phi_mux_index_jj_phi_fu_236_p4);

assign index_jj_3_fu_601_p1 = tmp_46_reg_894[15:0];

assign index_jj_4_fu_618_p3 = ((ap_reg_pp0_iter1_sel_tmp_reg_849[0:0] === 1'b1) ? index_jj_3_fu_601_p1 : ap_phi_mux_index_jj_phi_fu_236_p4);

assign inputfm_0_address0 = tmp_60_cast_fu_689_p1;

assign inputfm_0_d0 = tmp_49_fu_681_p2;

assign inputfm_1_address0 = tmp_60_cast_fu_689_p1;

assign inputfm_1_d0 = tmp_49_fu_681_p2;

assign inputfm_2_address0 = tmp_60_cast_fu_689_p1;

assign inputfm_2_d0 = tmp_49_fu_681_p2;

assign itr_2_fu_493_p2 = (itr_reg_244 + 31'd1);

assign itr_cast_fu_484_p1 = itr_reg_244;

assign j_2_fu_543_p3 = ((tmp_42_fu_499_p2[0:0] === 1'b1) ? 32'd0 : j_reg_266);

assign j_3_fu_584_p2 = (j_2_fu_543_p3 + 32'd1);

assign jj_2_fu_559_p3 = ((tmp_42_fu_499_p2[0:0] === 1'b1) ? jj_4_fu_551_p3 : ap_phi_mux_jj_phi_fu_281_p4);

assign jj_3_fu_515_p2 = (32'd1 + ap_phi_mux_jj_phi_fu_281_p4);

assign jj_4_fu_551_p3 = ((sel_tmp_fu_521_p2[0:0] === 1'b1) ? jj_3_fu_515_p2 : ap_phi_mux_jj_phi_fu_281_p4);

assign m_axi_input_r_ARADDR = input_addr_reg_919;

assign m_axi_input_r_ARBURST = 2'd0;

assign m_axi_input_r_ARCACHE = 4'd0;

assign m_axi_input_r_ARID = 1'd0;

assign m_axi_input_r_ARLEN = 32'd1;

assign m_axi_input_r_ARLOCK = 2'd0;

assign m_axi_input_r_ARPROT = 3'd0;

assign m_axi_input_r_ARQOS = 4'd0;

assign m_axi_input_r_ARREGION = 4'd0;

assign m_axi_input_r_ARSIZE = 3'd0;

assign m_axi_input_r_ARUSER = 1'd0;

assign m_axi_input_r_AWADDR = 32'd0;

assign m_axi_input_r_AWBURST = 2'd0;

assign m_axi_input_r_AWCACHE = 4'd0;

assign m_axi_input_r_AWID = 1'd0;

assign m_axi_input_r_AWLEN = 32'd0;

assign m_axi_input_r_AWLOCK = 2'd0;

assign m_axi_input_r_AWPROT = 3'd0;

assign m_axi_input_r_AWQOS = 4'd0;

assign m_axi_input_r_AWREGION = 4'd0;

assign m_axi_input_r_AWSIZE = 3'd0;

assign m_axi_input_r_AWUSER = 1'd0;

assign m_axi_input_r_AWVALID = 1'b0;

assign m_axi_input_r_BREADY = 1'b0;

assign m_axi_input_r_WDATA = 8'd0;

assign m_axi_input_r_WID = 1'd0;

assign m_axi_input_r_WLAST = 1'b0;

assign m_axi_input_r_WSTRB = 1'd0;

assign m_axi_input_r_WUSER = 1'd0;

assign m_axi_input_r_WVALID = 1'b0;

assign n_cols_2_fu_405_p3 = ((tmp_34_fu_395_p2[0:0] === 1'b1) ? tmp_35_fu_400_p2 : n_cols_reg_727);

assign n_cols_fu_305_p2 = curr_layer_in_w;

assign n_cols_fu_305_p3 = ((tmp_29_fu_299_p2[0:0] === 1'b1) ? tmp_28_fu_294_p2 : n_cols_fu_305_p2);

assign n_depth_1_fu_428_p3 = ((tmp_37_fu_418_p2[0:0] === 1'b1) ? tmp_38_fu_423_p2 : n_depth_fu_384_p3);

assign n_depth_fu_384_p3 = ((icmp_reg_733[0:0] === 1'b1) ? 32'd3 : curr_layer_in_ch);

assign n_rows_2_fu_449_p3 = ((tmp_31_fu_440_p2[0:0] === 1'b1) ? tmp_32_fu_445_p2 : n_rows_reg_766);

assign n_rows_fu_376_p2 = curr_layer_in_h;

assign n_rows_fu_376_p3 = ((tmp_26_fu_370_p2[0:0] === 1'b1) ? tmp_25_fu_364_p2 : n_rows_fu_376_p2);

assign sel_tmp1_fu_604_p3 = ((ap_reg_pp0_iter1_sel_tmp_reg_849[0:0] === 1'b1) ? 16'd0 : index_i_3_fu_598_p1);

assign sel_tmp9_fu_527_p3 = ((sel_tmp_fu_521_p2[0:0] === 1'b1) ? 32'd0 : i_3_fu_504_p2);

assign sel_tmp_fu_521_p2 = (tmp_45_fu_510_p2 & tmp_42_fu_499_p2);

assign sext_cast_fu_480_p1 = $signed(input_offset);

assign sum_cast_fu_668_p1 = $signed(sum_fu_663_p2);

assign sum_fu_663_p2 = ($signed(sext_cast_reg_819) + $signed(tmp_52_cast_fu_660_p1));

assign tmp13_fu_358_p2 = (tmp_52_fu_352_p2 + curr_layer_ker_h);

assign tmp14_fu_456_p2 = ($signed(n_depth_1_reg_778) * $signed(n_cols_2_reg_772));

assign tmp15_fu_476_p0 = curr_layer_in_h;

assign tmp15_fu_476_p1 = curr_layer_in_w;

assign tmp15_fu_476_p2 = ($signed(tmp15_fu_476_p0) * $signed(tmp15_fu_476_p1));

assign tmp16_fu_567_p2 = (tmp6_reg_809 + j_2_fu_543_p3);

assign tmp17_fu_640_p2 = (tmp_62_cast_fu_632_p1 + tmp_63_cast_fu_636_p1);

assign tmp18_fu_650_p2 = (tmp_24_reg_761 + tmp25_cast_fu_646_p1);

assign tmp25_cast_fu_646_p1 = tmp17_fu_640_p2;

assign tmp6_fu_472_p1 = curr_layer_in_w;

assign tmp6_fu_472_p2 = ($signed(tmp_reg_794) * $signed(tmp6_fu_472_p1));

assign tmp_23_fu_335_p0 = curr_layer_str_h;

assign tmp_23_fu_335_p1 = row;

assign tmp_23_fu_335_p2 = ($signed(tmp_23_fu_335_p0) * $signed(tmp_23_fu_335_p1));

assign tmp_24_fu_341_p0 = curr_layer_str_w;

assign tmp_24_fu_341_p1 = col;

assign tmp_24_fu_341_p2 = ($signed(tmp_24_fu_341_p0) * $signed(tmp_24_fu_341_p1));

assign tmp_25_fu_364_p2 = (tmp_44_fu_346_p2 + tmp13_fu_358_p2);

assign tmp_26_fu_370_p1 = curr_layer_in_h;

assign tmp_26_fu_370_p2 = (($signed(tmp_25_fu_364_p2) < $signed(tmp_26_fu_370_p1)) ? 1'b1 : 1'b0);

assign tmp_27_fu_288_p1 = curr_layer_str_w;

assign tmp_27_fu_288_p2 = ($signed({{1'b0}, {32'd26}}) * $signed(tmp_27_fu_288_p1));

assign tmp_28_fu_294_p2 = (tmp_27_reg_706 + curr_layer_ker_w);

assign tmp_29_fu_299_p1 = curr_layer_in_w;

assign tmp_29_fu_299_p2 = (($signed(tmp_28_fu_294_p2) < $signed(tmp_29_fu_299_p1)) ? 1'b1 : 1'b0);

assign tmp_30_fu_436_p1 = row;

assign tmp_30_fu_436_p2 = ($signed(n_rows_reg_766) + $signed(tmp_30_fu_436_p1));

assign tmp_31_fu_440_p1 = curr_layer_in_h;

assign tmp_31_fu_440_p2 = (($signed(tmp_30_fu_436_p2) > $signed(tmp_31_fu_440_p1)) ? 1'b1 : 1'b0);

assign tmp_32_fu_445_p0 = curr_layer_in_h;

assign tmp_32_fu_445_p1 = row;

assign tmp_32_fu_445_p2 = ($signed(tmp_32_fu_445_p0) - $signed(tmp_32_fu_445_p1));

assign tmp_33_fu_390_p1 = col;

assign tmp_33_fu_390_p2 = ($signed(n_cols_reg_727) + $signed(tmp_33_fu_390_p1));

assign tmp_34_fu_395_p1 = curr_layer_in_w;

assign tmp_34_fu_395_p2 = (($signed(tmp_33_fu_390_p2) > $signed(tmp_34_fu_395_p1)) ? 1'b1 : 1'b0);

assign tmp_35_fu_400_p0 = curr_layer_in_w;

assign tmp_35_fu_400_p1 = col;

assign tmp_35_fu_400_p2 = ($signed(tmp_35_fu_400_p0) - $signed(tmp_35_fu_400_p1));

assign tmp_36_fu_412_p1 = ti;

assign tmp_36_fu_412_p2 = ($signed(n_depth_fu_384_p3) + $signed(tmp_36_fu_412_p1));

assign tmp_37_fu_418_p2 = (($signed(tmp_36_fu_412_p2) > $signed(curr_layer_in_ch)) ? 1'b1 : 1'b0);

assign tmp_38_fu_423_p1 = ti;

assign tmp_38_fu_423_p2 = ($signed(curr_layer_in_ch) - $signed(tmp_38_fu_423_p1));

assign tmp_39_fu_464_p2 = ($signed(n_rows_2_reg_783) * $signed(tmp14_reg_789));

assign tmp_40_fu_488_p2 = (($signed(itr_cast_fu_484_p1) < $signed(tmp_39_reg_799)) ? 1'b1 : 1'b0);

assign tmp_42_fu_499_p2 = ((j_reg_266 == n_cols_2_reg_772) ? 1'b1 : 1'b0);

assign tmp_43_fu_590_p1 = curr_layer_in_w;

assign tmp_43_fu_590_p2 = ($signed(i_3_reg_839) * $signed(tmp_43_fu_590_p1));

assign tmp_44_fu_346_p0 = curr_layer_str_h;

assign tmp_44_fu_346_p2 = tmp_44_fu_346_p0 << 32'd5;

assign tmp_45_fu_510_p2 = ((i_3_fu_504_p2 == n_rows_2_reg_783) ? 1'b1 : 1'b0);

assign tmp_46_fu_594_p2 = ($signed(jj_3_reg_844) * $signed(tmp15_reg_814));

assign tmp_47_fu_655_p2 = (ap_reg_pp0_iter1_tmp16_reg_865 + tmp18_fu_650_p2);

assign tmp_48_fu_678_p1 = input_addr_read_reg_925;

assign tmp_49_fu_681_p2 = (tmp_48_fu_678_p1 + tmp_56_reg_804);

assign tmp_52_cast_fu_660_p1 = $signed(tmp_47_reg_914);

assign tmp_52_fu_352_p0 = curr_layer_str_h;

assign tmp_52_fu_352_p2 = tmp_52_fu_352_p0 << 32'd2;

assign tmp_55_fu_313_p4 = {{curr_layer_in_ch[31:2]}};

assign tmp_56_fu_468_p1 = input_offset_1[9:0];

assign tmp_60_cast_fu_689_p1 = ap_reg_pp0_iter11_tmp_51_reg_899;

assign tmp_61_fu_572_p1 = j_2_fu_543_p3[11:0];

assign tmp_62_cast_fu_632_p1 = index_jj_2_fu_625_p3;

assign tmp_62_fu_576_p1 = i_2_fu_535_p3[11:0];

assign tmp_63_cast_fu_636_p1 = index_i_2_fu_611_p3;

assign tmp_63_fu_580_p1 = jj_2_fu_559_p3[1:0];

assign tmp_fu_460_p2 = (tmp_s_reg_751 + tmp_23_reg_756);

assign tmp_s_fu_329_p0 = curr_layer_in_h;

assign tmp_s_fu_329_p1 = ti;

assign tmp_s_fu_329_p2 = ($signed(tmp_s_fu_329_p0) * $signed(tmp_s_fu_329_p1));

endmodule //read_input
