// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XZHANG_CNN_H
#define XZHANG_CNN_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xzhang_cnn_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Control_BaseAddress;
} XZhang_cnn_Config;
#endif

typedef struct {
    u32 Control_BaseAddress;
    u32 IsReady;
} XZhang_cnn;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XZhang_cnn_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XZhang_cnn_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XZhang_cnn_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XZhang_cnn_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XZhang_cnn_Initialize(XZhang_cnn *InstancePtr, u16 DeviceId);
XZhang_cnn_Config* XZhang_cnn_LookupConfig(u16 DeviceId);
int XZhang_cnn_CfgInitialize(XZhang_cnn *InstancePtr, XZhang_cnn_Config *ConfigPtr);
#else
int XZhang_cnn_Initialize(XZhang_cnn *InstancePtr, const char* InstanceName);
int XZhang_cnn_Release(XZhang_cnn *InstancePtr);
#endif

void XZhang_cnn_Start(XZhang_cnn *InstancePtr);
u32 XZhang_cnn_IsDone(XZhang_cnn *InstancePtr);
u32 XZhang_cnn_IsIdle(XZhang_cnn *InstancePtr);
u32 XZhang_cnn_IsReady(XZhang_cnn *InstancePtr);
void XZhang_cnn_EnableAutoRestart(XZhang_cnn *InstancePtr);
void XZhang_cnn_DisableAutoRestart(XZhang_cnn *InstancePtr);

void XZhang_cnn_Set_image_r(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_image_r(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_weights(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_weights(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_out_r(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_out_r(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_n_layer(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_n_layer(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_in_w(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_in_w(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_in_h(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_in_h(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_out_w(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_out_w(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_out_h(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_out_h(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_in_ch(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_in_ch(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_out_ch(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_out_ch(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_ker_w(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_ker_w(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_ker_h(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_ker_h(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_ker_ch(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_ker_ch(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_str_w(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_str_w(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_str_h(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_str_h(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_pad_w(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_pad_w(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_pad_h(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_pad_h(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_relu(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_relu(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_has_bias(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_has_bias(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_curr_layer_in_act_type(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_curr_layer_in_act_type(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_input_offset(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_input_offset(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_weights_offset(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_weights_offset(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_output_offset(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_output_offset(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_quantized_multiplier(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_quantized_multiplier(XZhang_cnn *InstancePtr);
void XZhang_cnn_Set_right_shift(XZhang_cnn *InstancePtr, u32 Data);
u32 XZhang_cnn_Get_right_shift(XZhang_cnn *InstancePtr);

void XZhang_cnn_InterruptGlobalEnable(XZhang_cnn *InstancePtr);
void XZhang_cnn_InterruptGlobalDisable(XZhang_cnn *InstancePtr);
void XZhang_cnn_InterruptEnable(XZhang_cnn *InstancePtr, u32 Mask);
void XZhang_cnn_InterruptDisable(XZhang_cnn *InstancePtr, u32 Mask);
void XZhang_cnn_InterruptClear(XZhang_cnn *InstancePtr, u32 Mask);
u32 XZhang_cnn_InterruptGetEnabled(XZhang_cnn *InstancePtr);
u32 XZhang_cnn_InterruptGetStatus(XZhang_cnn *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
