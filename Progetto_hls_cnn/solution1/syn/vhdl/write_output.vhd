-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity write_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    curr_layer_out_w_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    curr_layer_out_w_empty_n : IN STD_LOGIC;
    curr_layer_out_w_read : OUT STD_LOGIC;
    curr_layer_out_h_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    curr_layer_out_h_empty_n : IN STD_LOGIC;
    curr_layer_out_h_read : OUT STD_LOGIC;
    curr_layer_out_ch_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    curr_layer_out_ch_empty_n : IN STD_LOGIC;
    curr_layer_out_ch_read : OUT STD_LOGIC;
    m_axi_out_r_AWVALID : OUT STD_LOGIC;
    m_axi_out_r_AWREADY : IN STD_LOGIC;
    m_axi_out_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_WVALID : OUT STD_LOGIC;
    m_axi_out_r_WREADY : IN STD_LOGIC;
    m_axi_out_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_WLAST : OUT STD_LOGIC;
    m_axi_out_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_ARVALID : OUT STD_LOGIC;
    m_axi_out_r_ARREADY : IN STD_LOGIC;
    m_axi_out_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_RVALID : IN STD_LOGIC;
    m_axi_out_r_RREADY : OUT STD_LOGIC;
    m_axi_out_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_r_RLAST : IN STD_LOGIC;
    m_axi_out_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_BVALID : IN STD_LOGIC;
    m_axi_out_r_BREADY : OUT STD_LOGIC;
    m_axi_out_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    out_offset_empty_n : IN STD_LOGIC;
    out_offset_read : OUT STD_LOGIC;
    to_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    to_r_empty_n : IN STD_LOGIC;
    to_r_read : OUT STD_LOGIC;
    row_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    row_empty_n : IN STD_LOGIC;
    row_read : OUT STD_LOGIC;
    col_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    col_empty_n : IN STD_LOGIC;
    col_read : OUT STD_LOGIC;
    output_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    output_offset_empty_n : IN STD_LOGIC;
    output_offset_read : OUT STD_LOGIC;
    quantized_multiplier_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    quantized_multiplier_empty_n : IN STD_LOGIC;
    quantized_multiplier_read : OUT STD_LOGIC;
    right_shift_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    right_shift_empty_n : IN STD_LOGIC;
    right_shift_read : OUT STD_LOGIC;
    outputfm_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_0_ce0 : OUT STD_LOGIC;
    outputfm_0_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_1_ce0 : OUT STD_LOGIC;
    outputfm_1_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_10_ce0 : OUT STD_LOGIC;
    outputfm_10_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_11_ce0 : OUT STD_LOGIC;
    outputfm_11_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_12_ce0 : OUT STD_LOGIC;
    outputfm_12_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_13_ce0 : OUT STD_LOGIC;
    outputfm_13_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_14_ce0 : OUT STD_LOGIC;
    outputfm_14_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_15_ce0 : OUT STD_LOGIC;
    outputfm_15_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_16_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_16_ce0 : OUT STD_LOGIC;
    outputfm_16_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_17_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_17_ce0 : OUT STD_LOGIC;
    outputfm_17_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_18_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_18_ce0 : OUT STD_LOGIC;
    outputfm_18_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_19_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_19_ce0 : OUT STD_LOGIC;
    outputfm_19_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_2_ce0 : OUT STD_LOGIC;
    outputfm_2_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_20_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_20_ce0 : OUT STD_LOGIC;
    outputfm_20_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_21_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_21_ce0 : OUT STD_LOGIC;
    outputfm_21_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_22_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_22_ce0 : OUT STD_LOGIC;
    outputfm_22_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_23_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_23_ce0 : OUT STD_LOGIC;
    outputfm_23_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_24_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_24_ce0 : OUT STD_LOGIC;
    outputfm_24_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_25_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_25_ce0 : OUT STD_LOGIC;
    outputfm_25_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_26_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_26_ce0 : OUT STD_LOGIC;
    outputfm_26_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_27_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_27_ce0 : OUT STD_LOGIC;
    outputfm_27_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_3_ce0 : OUT STD_LOGIC;
    outputfm_3_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_4_ce0 : OUT STD_LOGIC;
    outputfm_4_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_5_ce0 : OUT STD_LOGIC;
    outputfm_5_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_6_ce0 : OUT STD_LOGIC;
    outputfm_6_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_7_ce0 : OUT STD_LOGIC;
    outputfm_7_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_8_ce0 : OUT STD_LOGIC;
    outputfm_8_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    outputfm_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    outputfm_9_ce0 : OUT STD_LOGIC;
    outputfm_9_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
    rounding : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of write_output is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv59_7FFFFFFFFFF8001 : STD_LOGIC_VECTOR (58 downto 0) := "11111111111111111111111111111111111111111111000000000000001";
    constant ap_const_lv59_8000 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000001000000000000000";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal curr_layer_out_w_blk_n : STD_LOGIC;
    signal curr_layer_out_h_blk_n : STD_LOGIC;
    signal curr_layer_out_ch_blk_n : STD_LOGIC;
    signal out_r_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_offset_blk_n : STD_LOGIC;
    signal to_r_blk_n : STD_LOGIC;
    signal row_blk_n : STD_LOGIC;
    signal col_blk_n : STD_LOGIC;
    signal output_offset_blk_n : STD_LOGIC;
    signal quantized_multiplier_blk_n : STD_LOGIC;
    signal right_shift_blk_n : STD_LOGIC;
    signal i_index_i_i_i_reg_240 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_index_i_i_i_reg_252 : STD_LOGIC_VECTOR (15 downto 0);
    signal itr_i_i_i_reg_264 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_i_i_i_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_i_i_i_reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_i_i_i_reg_297 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_offset_read_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal curr_layer_out_w_rea_reg_836 : STD_LOGIC_VECTOR (31 downto 0);
    signal curr_layer_out_h_rea_reg_847 : STD_LOGIC_VECTOR (31 downto 0);
    signal curr_layer_out_ch_re_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal to_read_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_read_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_read_reg_876 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_offset_read_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal quantized_multiplier_2_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal right_shift_read_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i_i_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i_i_reg_898 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_i_i_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_i_i_i_reg_903 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_383_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_908 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_size_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_size_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_2_i_i_i_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_i_i_reg_919 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_rows_1_fu_422_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_rows_1_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_o_1_fu_444_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_o_1_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_i_i_i_17_fu_456_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_i_17_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cols_1_fu_480_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cols_1_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_i_fu_488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_i_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_i_i_fu_492_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_i_i_i_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal b_64_i_cast_i_i_i_fu_496_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal b_64_i_cast_i_i_i_reg_961 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp2_i_fu_503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_i_reg_966 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_cast_i_fu_508_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_cast_i_reg_971 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_15_i_i_i_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter8 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_out_r_AWREADY : STD_LOGIC;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter9 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_out_r_WREADY : STD_LOGIC;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_tmp_15_i_i_i_reg_976 : STD_LOGIC_VECTOR (0 downto 0);
    signal itr_i_fu_520_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_16_i_i_i_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_i_i_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_16_i_i_i_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_531_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_991 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_reg_996 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_i_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_i_reg_1001 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_sel_tmp_i_reg_1001 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_i_i_i_fu_562_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_i_i_i_reg_1007 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_i_i_i_fu_570_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_i_i_i_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter1_j_2_i_i_i_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_2_fu_586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_2_reg_1019 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_594_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_reg_1024 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_i_i_i_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_i_i_i_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_i_i_i_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_i_i_i_reg_1039 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_index_2_i_i_i_fu_625_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_index_2_i_i_i_reg_1044 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ii_index_2_fu_639_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_index_2_reg_1049 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_i_i_i_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_i_i_i_reg_1054 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_ap_return : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp6_i_reg_1059 : STD_LOGIC_VECTOR (26 downto 0);
    signal out_addr_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter4_out_addr_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter5_out_addr_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter6_out_addr_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter7_out_addr_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal ab_64_fu_695_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal ab_64_reg_1070 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_124_i_i_i_i_fu_715_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_124_i_i_i_i_reg_1076 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_24_i_i_i_fu_769_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_i_i_i_reg_1083 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_i_i_i_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_i_i_i_reg_1088 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp1_i_i_i_fu_783_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp1_i_i_i_reg_1093 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_i_i_i_fu_824_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_i_i_i_reg_1098 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal grp_aesl_mux_load_28_37_s_fu_308_ap_start : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_ap_done : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_ap_idle : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_ap_ready : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_ap_ce : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_ce0 : STD_LOGIC;
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_ce0 : STD_LOGIC;
    signal ap_phi_mux_i_index_i_i_i_phi_fu_244_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_ii_index_i_i_i_phi_fu_256_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_i_i_i_i_phi_fu_279_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ii_i_i_i_phi_fu_301_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start : STD_LOGIC := '0';
    signal sum_cast_i_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_out_r_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_out_r_WREADY : STD_LOGIC := '0';
    signal tmp_1_i_i_i_fu_371_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_rows_fu_391_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_i_i_fu_408_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_i_i_i_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_i_i_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_depth_o_fu_402_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_i_i_i_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_i_i_i_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i_i_i_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_cols_fu_460_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i_i_fu_466_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_i_i_i_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_i_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp3_i_fu_499_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal itr_i_i_cast_i_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_i_i_i_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp9_i_fu_554_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ii_1_fu_578_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_index_fu_612_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp1_i_fu_618_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_index_fu_615_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_index_1_fu_632_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_i_i_cast_i_fu_646_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_30_i_i_cast_i_fu_650_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_i_fu_654_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp5_cast_i_fu_660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_i_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_i_i_cast_i_fu_674_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum_i_fu_677_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ab_64_fu_695_p0 : STD_LOGIC_VECTOR (26 downto 0);
    signal ab_64_fu_695_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_700_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_123_i_cast_i_i_c_fu_707_p3 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_neg_i_i_i_i_fu_727_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_88_i_i_i_i_fu_732_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_720_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_i_i_i_i_fu_742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_i_i_i_i_fu_748_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ab_x2_high32_fu_757_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_779_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_i_i_i_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_i_i_i_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_804_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_i_i_i_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_i_i_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component aesl_mux_load_28_37_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        empty_12 : IN STD_LOGIC_VECTOR (4 downto 0);
        empty_13 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty : IN STD_LOGIC_VECTOR (31 downto 0);
        outputfm_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_0_ce0 : OUT STD_LOGIC;
        outputfm_0_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_1_ce0 : OUT STD_LOGIC;
        outputfm_1_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_10_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_10_ce0 : OUT STD_LOGIC;
        outputfm_10_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_11_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_11_ce0 : OUT STD_LOGIC;
        outputfm_11_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_12_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_12_ce0 : OUT STD_LOGIC;
        outputfm_12_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_13_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_13_ce0 : OUT STD_LOGIC;
        outputfm_13_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_14_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_14_ce0 : OUT STD_LOGIC;
        outputfm_14_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_15_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_15_ce0 : OUT STD_LOGIC;
        outputfm_15_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_16_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_16_ce0 : OUT STD_LOGIC;
        outputfm_16_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_17_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_17_ce0 : OUT STD_LOGIC;
        outputfm_17_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_18_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_18_ce0 : OUT STD_LOGIC;
        outputfm_18_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_19_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_19_ce0 : OUT STD_LOGIC;
        outputfm_19_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_2_ce0 : OUT STD_LOGIC;
        outputfm_2_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_20_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_20_ce0 : OUT STD_LOGIC;
        outputfm_20_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_21_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_21_ce0 : OUT STD_LOGIC;
        outputfm_21_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_22_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_22_ce0 : OUT STD_LOGIC;
        outputfm_22_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_23_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_23_ce0 : OUT STD_LOGIC;
        outputfm_23_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_24_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_24_ce0 : OUT STD_LOGIC;
        outputfm_24_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_25_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_25_ce0 : OUT STD_LOGIC;
        outputfm_25_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_26_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_26_ce0 : OUT STD_LOGIC;
        outputfm_26_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_27_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_27_ce0 : OUT STD_LOGIC;
        outputfm_27_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_3_ce0 : OUT STD_LOGIC;
        outputfm_3_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_4_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_4_ce0 : OUT STD_LOGIC;
        outputfm_4_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_5_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_5_ce0 : OUT STD_LOGIC;
        outputfm_5_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_6_ce0 : OUT STD_LOGIC;
        outputfm_6_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_7_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_7_ce0 : OUT STD_LOGIC;
        outputfm_7_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_8_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_8_ce0 : OUT STD_LOGIC;
        outputfm_8_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        outputfm_9_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        outputfm_9_ce0 : OUT STD_LOGIC;
        outputfm_9_q0 : IN STD_LOGIC_VECTOR (26 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;



begin
    grp_aesl_mux_load_28_37_s_fu_308 : component aesl_mux_load_28_37_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_aesl_mux_load_28_37_s_fu_308_ap_start,
        ap_done => grp_aesl_mux_load_28_37_s_fu_308_ap_done,
        ap_idle => grp_aesl_mux_load_28_37_s_fu_308_ap_idle,
        ap_ready => grp_aesl_mux_load_28_37_s_fu_308_ap_ready,
        ap_ce => grp_aesl_mux_load_28_37_s_fu_308_ap_ce,
        empty_12 => tmp_21_reg_1024,
        empty_13 => i_2_i_i_i_reg_1007,
        empty => j_2_i_i_i_reg_1013,
        outputfm_0_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_address0,
        outputfm_0_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_ce0,
        outputfm_0_q0 => outputfm_0_q0,
        outputfm_1_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_address0,
        outputfm_1_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_ce0,
        outputfm_1_q0 => outputfm_1_q0,
        outputfm_10_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_address0,
        outputfm_10_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_ce0,
        outputfm_10_q0 => outputfm_10_q0,
        outputfm_11_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_address0,
        outputfm_11_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_ce0,
        outputfm_11_q0 => outputfm_11_q0,
        outputfm_12_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_address0,
        outputfm_12_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_ce0,
        outputfm_12_q0 => outputfm_12_q0,
        outputfm_13_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_address0,
        outputfm_13_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_ce0,
        outputfm_13_q0 => outputfm_13_q0,
        outputfm_14_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_address0,
        outputfm_14_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_ce0,
        outputfm_14_q0 => outputfm_14_q0,
        outputfm_15_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_address0,
        outputfm_15_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_ce0,
        outputfm_15_q0 => outputfm_15_q0,
        outputfm_16_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_address0,
        outputfm_16_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_ce0,
        outputfm_16_q0 => outputfm_16_q0,
        outputfm_17_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_address0,
        outputfm_17_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_ce0,
        outputfm_17_q0 => outputfm_17_q0,
        outputfm_18_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_address0,
        outputfm_18_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_ce0,
        outputfm_18_q0 => outputfm_18_q0,
        outputfm_19_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_address0,
        outputfm_19_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_ce0,
        outputfm_19_q0 => outputfm_19_q0,
        outputfm_2_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_address0,
        outputfm_2_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_ce0,
        outputfm_2_q0 => outputfm_2_q0,
        outputfm_20_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_address0,
        outputfm_20_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_ce0,
        outputfm_20_q0 => outputfm_20_q0,
        outputfm_21_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_address0,
        outputfm_21_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_ce0,
        outputfm_21_q0 => outputfm_21_q0,
        outputfm_22_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_address0,
        outputfm_22_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_ce0,
        outputfm_22_q0 => outputfm_22_q0,
        outputfm_23_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_address0,
        outputfm_23_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_ce0,
        outputfm_23_q0 => outputfm_23_q0,
        outputfm_24_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_address0,
        outputfm_24_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_ce0,
        outputfm_24_q0 => outputfm_24_q0,
        outputfm_25_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_address0,
        outputfm_25_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_ce0,
        outputfm_25_q0 => outputfm_25_q0,
        outputfm_26_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_address0,
        outputfm_26_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_ce0,
        outputfm_26_q0 => outputfm_26_q0,
        outputfm_27_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_address0,
        outputfm_27_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_ce0,
        outputfm_27_q0 => outputfm_27_q0,
        outputfm_3_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_address0,
        outputfm_3_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_ce0,
        outputfm_3_q0 => outputfm_3_q0,
        outputfm_4_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_address0,
        outputfm_4_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_ce0,
        outputfm_4_q0 => outputfm_4_q0,
        outputfm_5_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_address0,
        outputfm_5_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_ce0,
        outputfm_5_q0 => outputfm_5_q0,
        outputfm_6_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_address0,
        outputfm_6_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_ce0,
        outputfm_6_q0 => outputfm_6_q0,
        outputfm_7_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_address0,
        outputfm_7_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_ce0,
        outputfm_7_q0 => outputfm_7_q0,
        outputfm_8_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_address0,
        outputfm_8_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_ce0,
        outputfm_8_q0 => outputfm_8_q0,
        outputfm_9_address0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_address0,
        outputfm_9_ce0 => grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_ce0,
        outputfm_9_q0 => outputfm_9_q0,
        ap_return => grp_aesl_mux_load_28_37_s_fu_308_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state5 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_subdone = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_15_i_i_i_fu_515_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_aesl_mux_load_28_37_s_fu_308_ap_ready)) then 
                    ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_out_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_out_r_AWREADY <= ap_const_logic_0;
            else
                if (((ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8))) then
                    if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_out_r_AWREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_1 = m_axi_out_r_AWREADY))) then 
                        ap_reg_ioackin_m_axi_out_r_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_out_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_out_r_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9))) then
                    if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_out_r_WREADY <= ap_const_logic_0;
                    elsif (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_logic_1 = m_axi_out_r_WREADY))) then 
                        ap_reg_ioackin_m_axi_out_r_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_i_i_i_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (tmp_15_i_i_i_reg_976 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_i_i_i_reg_275 <= i_2_i_i_i_reg_1007;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_i_i_i_reg_275 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_index_i_i_i_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
                i_index_i_i_i_reg_240 <= i_index_2_i_i_i_reg_1044;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_index_i_i_i_reg_240 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    ii_i_i_i_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (tmp_15_i_i_i_reg_976 = ap_const_lv1_1) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ii_i_i_i_reg_297 <= ii_2_reg_1019;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ii_i_i_i_reg_297 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    ii_index_i_i_i_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
                ii_index_i_i_i_reg_252 <= ii_index_2_reg_1049;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ii_index_i_i_i_reg_252 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    itr_i_i_i_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_15_i_i_i_fu_515_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                itr_i_i_i_reg_264 <= itr_i_fu_520_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                itr_i_i_i_reg_264 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    j_i_i_i_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_15_i_i_i_fu_515_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_i_i_i_reg_286 <= j_fu_598_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_i_i_i_reg_286 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter3_tmp_15_i_i_i_reg_976))) then
                ab_64_reg_1070 <= ab_64_fu_695_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_11001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter9_tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter11_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter10_tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter12_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter11_tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter12_tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter1_tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter3_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter4_out_addr_reg_1064 <= out_addr_reg_1064;
                ap_reg_pp0_iter4_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter3_tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter5_out_addr_reg_1064 <= ap_reg_pp0_iter4_out_addr_reg_1064;
                ap_reg_pp0_iter5_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter4_tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter6_out_addr_reg_1064 <= ap_reg_pp0_iter5_out_addr_reg_1064;
                ap_reg_pp0_iter6_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter5_tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter7_out_addr_reg_1064 <= ap_reg_pp0_iter6_out_addr_reg_1064;
                ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter6_tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter9_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_j_2_i_i_i_reg_1013 <= j_2_i_i_i_reg_1013;
                ap_reg_pp0_iter1_sel_tmp_i_reg_1001 <= sel_tmp_i_reg_1001;
                ap_reg_pp0_iter1_tmp_15_i_i_i_reg_976 <= tmp_15_i_i_i_reg_976;
                ap_reg_pp0_iter1_tmp_16_i_i_i_reg_985 <= tmp_16_i_i_i_reg_985;
                tmp_15_i_i_i_reg_976 <= tmp_15_i_i_i_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                b_64_i_cast_i_i_i_reg_961 <= b_64_i_cast_i_i_i_fu_496_p1;
                sext_cast_i_reg_971 <= sext_cast_i_fu_508_p1;
                tmp2_i_reg_966 <= tmp2_i_fu_503_p2;
                tmp_14_i_i_i_reg_956 <= tmp_14_i_i_i_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                col_read_reg_876 <= col_dout;
                curr_layer_out_ch_re_reg_855 <= curr_layer_out_ch_dout;
                curr_layer_out_h_rea_reg_847 <= curr_layer_out_h_dout;
                curr_layer_out_w_rea_reg_836 <= curr_layer_out_w_dout;
                out_offset_read_reg_831 <= out_offset_dout;
                output_offset_read_reg_883 <= output_offset_dout;
                quantized_multiplier_2_reg_888 <= quantized_multiplier_dout;
                right_shift_read_reg_893 <= right_shift_dout;
                row_read_reg_869 <= row_dout;
                tmp_1_i_i_i_reg_898 <= tmp_1_i_i_i_fu_371_p2;
                tmp_3_i_i_i_reg_903 <= tmp_3_i_i_i_fu_377_p2;
                tmp_reg_908 <= tmp_fu_383_p1;
                to_read_reg_862 <= to_r_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_15_i_i_i_fu_515_p2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_2_i_i_i_reg_1007 <= i_2_i_i_i_fu_562_p3;
                ii_2_reg_1019 <= ii_2_fu_586_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_15_i_i_i_reg_976) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then
                i_index_2_i_i_i_reg_1044 <= i_index_2_i_i_i_fu_625_p3;
                ii_index_2_reg_1049 <= ii_index_2_fu_639_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_15_i_i_i_fu_515_p2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_991 <= i_fu_531_p2;
                ii_reg_996 <= ii_fu_542_p2;
                j_2_i_i_i_reg_1013 <= j_2_i_i_i_fu_570_p3;
                sel_tmp_i_reg_1001 <= sel_tmp_i_fu_548_p2;
                tmp_16_i_i_i_reg_985 <= tmp_16_i_i_i_fu_526_p2;
                tmp_21_reg_1024 <= tmp_21_fu_594_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                n_cols_1_reg_945 <= n_cols_1_fu_480_p3;
                tmp1_i_reg_951 <= tmp1_i_fu_488_p2;
                tmp_i_i_i_17_reg_940 <= tmp_i_i_i_17_fu_456_p2;
                tmp_i_i_i_reg_935 <= tmp_i_i_i_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                n_depth_o_1_reg_930 <= n_depth_o_1_fu_444_p3;
                n_rows_1_reg_924 <= n_rows_1_fu_422_p3;
                out_size_reg_913 <= out_size_fu_387_p2;
                tmp_2_i_i_i_reg_919 <= tmp_2_i_i_i_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976))) then
                out_addr_reg_1064 <= sum_cast_i_fu_682_p1(32 - 1 downto 0);
                tmp6_i_reg_1059 <= grp_aesl_mux_load_28_37_s_fu_308_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter6_tmp_15_i_i_i_reg_976))) then
                phitmp1_i_i_i_reg_1093 <= phitmp1_i_i_i_fu_783_p2;
                tmp_25_i_i_i_reg_1088 <= tmp_25_i_i_i_fu_775_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter4_tmp_15_i_i_i_reg_976))) then
                tmp_124_i_i_i_i_reg_1076 <= tmp_124_i_i_i_i_fu_715_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = sel_tmp_i_reg_1001) and (ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_16_i_i_i_reg_985) and (tmp_15_i_i_i_reg_976 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_17_i_i_i_reg_1034 <= tmp_17_i_i_i_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = sel_tmp_i_reg_1001) and (ap_const_lv1_1 = tmp_16_i_i_i_reg_985) and (tmp_15_i_i_i_reg_976 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_19_i_i_i_reg_1039 <= tmp_19_i_i_i_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter5_tmp_15_i_i_i_reg_976))) then
                tmp_24_i_i_i_reg_1083 <= tmp_24_i_i_i_fu_769_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 = ap_const_lv1_1))) then
                tmp_28_i_i_i_reg_1098 <= tmp_28_i_i_i_fu_824_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_15_i_i_i_reg_976))) then
                tmp_34_i_i_i_reg_1054 <= tmp_34_i_i_i_fu_669_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n, ap_enable_reg_pp0_iter14, tmp_15_i_i_i_fu_515_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_lv1_0 = tmp_15_i_i_i_fu_515_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) and not(((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_lv1_0 = tmp_15_i_i_i_fu_515_p2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_block_pp0_stage0_subdone = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ab_64_fu_695_p0 <= tmp6_i_reg_1059;
    ab_64_fu_695_p1 <= b_64_i_cast_i_i_i_reg_961(32 - 1 downto 0);
    ab_64_fu_695_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(ab_64_fu_695_p0) * signed(ab_64_fu_695_p1))), 59));
    ab_x2_high32_fu_757_p3 <= 
        tmp_89_i_i_i_i_fu_742_p2 when (tmp_23_fu_720_p3(0) = '1') else 
        tmp_90_i_i_i_i_fu_748_p4;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(5);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_out_r_BVALID, ap_enable_reg_pp0_iter14, ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_const_lv1_1 = ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) and (ap_const_logic_0 = m_axi_out_r_BVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_out_r_BVALID, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976, ap_block_state13_io, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_lv1_1 = ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) and (ap_const_logic_0 = m_axi_out_r_BVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9)) or ((ap_const_boolean_1 = ap_block_state13_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_out_r_BVALID, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976, ap_block_state13_io, ap_block_state14_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_lv1_1 = ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) and (ap_const_logic_0 = m_axi_out_r_BVALID) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14)) or ((ap_const_boolean_1 = ap_block_state14_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9)) or ((ap_const_boolean_1 = ap_block_state13_io) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976, ap_sig_ioackin_m_axi_out_r_AWREADY)
    begin
                ap_block_state13_io <= ((ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 = ap_const_lv1_1) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_out_r_AWREADY));
    end process;

        ap_block_state13_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_io_assign_proc : process(ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976, ap_sig_ioackin_m_axi_out_r_WREADY)
    begin
                ap_block_state14_io <= ((ap_const_lv1_1 = ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_out_r_WREADY));
    end process;

        ap_block_state14_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp0_stage0_iter14_assign_proc : process(m_axi_out_r_BVALID, ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976)
    begin
                ap_block_state19_pp0_stage0_iter14 <= ((ap_const_lv1_1 = ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) and (ap_const_logic_0 = m_axi_out_r_BVALID));
    end process;

        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(tmp_15_i_i_i_fu_515_p2)
    begin
        if ((ap_const_lv1_0 = tmp_15_i_i_i_fu_515_p2)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter13) and (ap_const_logic_0 = ap_enable_reg_pp0_iter12) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter14) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_i_i_i_phi_fu_279_p4_assign_proc : process(ap_block_pp0_stage0, tmp_15_i_i_i_reg_976, i_i_i_i_reg_275, ap_CS_fsm_pp0_stage0, i_2_i_i_i_reg_1007, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_15_i_i_i_reg_976 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_i_i_i_phi_fu_279_p4 <= i_2_i_i_i_reg_1007;
        else 
            ap_phi_mux_i_i_i_i_phi_fu_279_p4 <= i_i_i_i_reg_275;
        end if; 
    end process;


    ap_phi_mux_i_index_i_i_i_phi_fu_244_p4_assign_proc : process(ap_block_pp0_stage0, i_index_i_i_i_reg_240, ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976, i_index_2_i_i_i_reg_1044, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            ap_phi_mux_i_index_i_i_i_phi_fu_244_p4 <= i_index_2_i_i_i_reg_1044;
        else 
            ap_phi_mux_i_index_i_i_i_phi_fu_244_p4 <= i_index_i_i_i_reg_240;
        end if; 
    end process;


    ap_phi_mux_ii_i_i_i_phi_fu_301_p4_assign_proc : process(ap_block_pp0_stage0, tmp_15_i_i_i_reg_976, ii_i_i_i_reg_297, ap_CS_fsm_pp0_stage0, ii_2_reg_1019, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_15_i_i_i_reg_976 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ii_i_i_i_phi_fu_301_p4 <= ii_2_reg_1019;
        else 
            ap_phi_mux_ii_i_i_i_phi_fu_301_p4 <= ii_i_i_i_reg_297;
        end if; 
    end process;


    ap_phi_mux_ii_index_i_i_i_phi_fu_256_p4_assign_proc : process(ap_block_pp0_stage0, ii_index_i_i_i_reg_252, ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976, ii_index_2_reg_1049, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_lv1_1 = ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then 
            ap_phi_mux_ii_index_i_i_i_phi_fu_256_p4 <= ii_index_2_reg_1049;
        else 
            ap_phi_mux_ii_index_i_i_i_phi_fu_256_p4 <= ii_index_i_i_i_reg_252;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_out_r_AWREADY_assign_proc : process(m_axi_out_r_AWREADY, ap_reg_ioackin_m_axi_out_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_out_r_AWREADY)) then 
            ap_sig_ioackin_m_axi_out_r_AWREADY <= m_axi_out_r_AWREADY;
        else 
            ap_sig_ioackin_m_axi_out_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_out_r_WREADY_assign_proc : process(m_axi_out_r_WREADY, ap_reg_ioackin_m_axi_out_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_out_r_WREADY)) then 
            ap_sig_ioackin_m_axi_out_r_WREADY <= m_axi_out_r_WREADY;
        else 
            ap_sig_ioackin_m_axi_out_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;

        b_64_i_cast_i_i_i_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(quantized_multiplier_2_reg_888),59));


    col_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, col_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_blk_n <= col_empty_n;
        else 
            col_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    col_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            col_read <= ap_const_logic_1;
        else 
            col_read <= ap_const_logic_0;
        end if; 
    end process;


    curr_layer_out_ch_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_ch_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_ch_blk_n <= curr_layer_out_ch_empty_n;
        else 
            curr_layer_out_ch_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    curr_layer_out_ch_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_ch_read <= ap_const_logic_1;
        else 
            curr_layer_out_ch_read <= ap_const_logic_0;
        end if; 
    end process;


    curr_layer_out_h_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_h_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_h_blk_n <= curr_layer_out_h_empty_n;
        else 
            curr_layer_out_h_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    curr_layer_out_h_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_h_read <= ap_const_logic_1;
        else 
            curr_layer_out_h_read <= ap_const_logic_0;
        end if; 
    end process;


    curr_layer_out_w_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_w_blk_n <= curr_layer_out_w_empty_n;
        else 
            curr_layer_out_w_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    curr_layer_out_w_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            curr_layer_out_w_read <= ap_const_logic_1;
        else 
            curr_layer_out_w_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_aesl_mux_load_28_37_s_fu_308_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_aesl_mux_load_28_37_s_fu_308_ap_ce <= ap_const_logic_1;
        else 
            grp_aesl_mux_load_28_37_s_fu_308_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_aesl_mux_load_28_37_s_fu_308_ap_start <= ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start;
    i_2_i_i_i_fu_562_p3 <= 
        sel_tmp9_i_fu_554_p3 when (tmp_16_i_i_i_fu_526_p2(0) = '1') else 
        ap_phi_mux_i_i_i_i_phi_fu_279_p4;
    i_fu_531_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_i_i_i_i_phi_fu_279_p4));
    i_index_2_i_i_i_fu_625_p3 <= 
        sel_tmp1_i_fu_618_p3 when (ap_reg_pp0_iter1_tmp_16_i_i_i_reg_985(0) = '1') else 
        ap_phi_mux_i_index_i_i_i_phi_fu_244_p4;
    i_index_fu_612_p1 <= tmp_17_i_i_i_reg_1034(16 - 1 downto 0);
    ii_1_fu_578_p3 <= 
        ii_fu_542_p2 when (sel_tmp_i_fu_548_p2(0) = '1') else 
        ap_phi_mux_ii_i_i_i_phi_fu_301_p4;
    ii_2_fu_586_p3 <= 
        ii_1_fu_578_p3 when (tmp_16_i_i_i_fu_526_p2(0) = '1') else 
        ap_phi_mux_ii_i_i_i_phi_fu_301_p4;
    ii_fu_542_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_ii_i_i_i_phi_fu_301_p4));
    ii_index_1_fu_632_p3 <= 
        ii_index_fu_615_p1 when (ap_reg_pp0_iter1_sel_tmp_i_reg_1001(0) = '1') else 
        ap_phi_mux_ii_index_i_i_i_phi_fu_256_p4;
    ii_index_2_fu_639_p3 <= 
        ii_index_1_fu_632_p3 when (ap_reg_pp0_iter1_tmp_16_i_i_i_reg_985(0) = '1') else 
        ap_phi_mux_ii_index_i_i_i_phi_fu_256_p4;
    ii_index_fu_615_p1 <= tmp_19_i_i_i_reg_1039(16 - 1 downto 0);
    itr_i_fu_520_p2 <= std_logic_vector(unsigned(itr_i_i_i_reg_264) + unsigned(ap_const_lv31_1));
    itr_i_i_cast_i_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(itr_i_i_i_reg_264),32));
    j_2_i_i_i_fu_570_p3 <= 
        ap_const_lv32_0 when (tmp_16_i_i_i_fu_526_p2(0) = '1') else 
        j_i_i_i_reg_286;
    j_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(j_2_i_i_i_fu_570_p3));
    m_axi_out_r_ARADDR <= ap_const_lv32_0;
    m_axi_out_r_ARBURST <= ap_const_lv2_0;
    m_axi_out_r_ARCACHE <= ap_const_lv4_0;
    m_axi_out_r_ARID <= ap_const_lv1_0;
    m_axi_out_r_ARLEN <= ap_const_lv32_0;
    m_axi_out_r_ARLOCK <= ap_const_lv2_0;
    m_axi_out_r_ARPROT <= ap_const_lv3_0;
    m_axi_out_r_ARQOS <= ap_const_lv4_0;
    m_axi_out_r_ARREGION <= ap_const_lv4_0;
    m_axi_out_r_ARSIZE <= ap_const_lv3_0;
    m_axi_out_r_ARUSER <= ap_const_lv1_0;
    m_axi_out_r_ARVALID <= ap_const_logic_0;
    m_axi_out_r_AWADDR <= ap_reg_pp0_iter7_out_addr_reg_1064;
    m_axi_out_r_AWBURST <= ap_const_lv2_0;
    m_axi_out_r_AWCACHE <= ap_const_lv4_0;
    m_axi_out_r_AWID <= ap_const_lv1_0;
    m_axi_out_r_AWLEN <= ap_const_lv32_1;
    m_axi_out_r_AWLOCK <= ap_const_lv2_0;
    m_axi_out_r_AWPROT <= ap_const_lv3_0;
    m_axi_out_r_AWQOS <= ap_const_lv4_0;
    m_axi_out_r_AWREGION <= ap_const_lv4_0;
    m_axi_out_r_AWSIZE <= ap_const_lv3_0;
    m_axi_out_r_AWUSER <= ap_const_lv1_0;

    m_axi_out_r_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter8, ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976, ap_reg_ioackin_m_axi_out_r_AWREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 = ap_const_lv1_1) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_out_r_AWREADY) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8))) then 
            m_axi_out_r_AWVALID <= ap_const_logic_1;
        else 
            m_axi_out_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_out_r_BREADY_assign_proc : process(ap_enable_reg_pp0_iter14, ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976, ap_block_pp0_stage0_11001)
    begin
        if (((ap_block_pp0_stage0_11001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14))) then 
            m_axi_out_r_BREADY <= ap_const_logic_1;
        else 
            m_axi_out_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_out_r_RREADY <= ap_const_logic_0;
    m_axi_out_r_WDATA <= tmp_28_i_i_i_reg_1098;
    m_axi_out_r_WID <= ap_const_lv1_0;
    m_axi_out_r_WLAST <= ap_const_logic_0;
    m_axi_out_r_WSTRB <= ap_const_lv1_1;
    m_axi_out_r_WUSER <= ap_const_lv1_0;

    m_axi_out_r_WVALID_assign_proc : process(ap_enable_reg_pp0_iter9, ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976, ap_block_pp0_stage0_01001, ap_reg_ioackin_m_axi_out_r_WREADY)
    begin
        if (((ap_block_pp0_stage0_01001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_out_r_WREADY) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9))) then 
            m_axi_out_r_WVALID <= ap_const_logic_1;
        else 
            m_axi_out_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    n_cols_1_fu_480_p3 <= 
        tmp_9_i_i_i_fu_476_p2 when (tmp_8_i_i_i_fu_471_p2(0) = '1') else 
        n_cols_fu_460_p3;
    n_cols_fu_460_p3 <= 
        ap_const_lv32_1B when (tmp_2_i_i_i_reg_919(0) = '1') else 
        curr_layer_out_w_rea_reg_836;
    n_depth_o_1_fu_444_p3 <= 
        tmp_12_i_i_i_fu_440_p2 when (tmp_11_i_i_i_fu_435_p2(0) = '1') else 
        n_depth_o_fu_402_p3;
    n_depth_o_fu_402_p3 <= 
        ap_const_lv32_1C when (tmp_3_i_i_i_reg_903(0) = '1') else 
        curr_layer_out_ch_re_reg_855;
    n_rows_1_fu_422_p3 <= 
        tmp_6_i_i_i_fu_418_p2 when (tmp_5_i_i_i_fu_413_p2(0) = '1') else 
        n_rows_fu_391_p3;
    n_rows_fu_391_p3 <= 
        ap_const_lv32_25 when (tmp_1_i_i_i_reg_898(0) = '1') else 
        curr_layer_out_h_rea_reg_847;
    or_cond_i_i_i_fu_812_p2 <= (tmp_25_fu_804_p3 and p_not_i_i_i_fu_798_p2);

    out_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_offset_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_offset_blk_n <= out_offset_empty_n;
        else 
            out_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_offset_read <= ap_const_logic_1;
        else 
            out_offset_read <= ap_const_logic_0;
        end if; 
    end process;


    out_r_blk_n_AW_assign_proc : process(m_axi_out_r_AWREADY, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976)
    begin
        if (((ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 = ap_const_lv1_1) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8))) then 
            out_r_blk_n_AW <= m_axi_out_r_AWREADY;
        else 
            out_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    out_r_blk_n_B_assign_proc : process(m_axi_out_r_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976)
    begin
        if (((ap_const_lv1_1 = ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter14))) then 
            out_r_blk_n_B <= m_axi_out_r_BVALID;
        else 
            out_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    out_r_blk_n_W_assign_proc : process(m_axi_out_r_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976)
    begin
        if (((ap_const_lv1_1 = ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976) and (ap_block_pp0_stage0 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9))) then 
            out_r_blk_n_W <= m_axi_out_r_WREADY;
        else 
            out_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    out_size_fu_387_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(curr_layer_out_w_rea_reg_836) * signed(curr_layer_out_h_rea_reg_847))), 32));

    output_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_offset_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_offset_blk_n <= output_offset_empty_n;
        else 
            output_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_offset_read <= ap_const_logic_1;
        else 
            output_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    outputfm_0_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_address0;
    outputfm_0_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_ce0;
    outputfm_10_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_address0;
    outputfm_10_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_ce0;
    outputfm_11_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_address0;
    outputfm_11_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_ce0;
    outputfm_12_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_address0;
    outputfm_12_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_ce0;
    outputfm_13_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_address0;
    outputfm_13_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_ce0;
    outputfm_14_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_address0;
    outputfm_14_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_ce0;
    outputfm_15_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_address0;
    outputfm_15_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_ce0;
    outputfm_16_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_address0;
    outputfm_16_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_ce0;
    outputfm_17_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_address0;
    outputfm_17_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_ce0;
    outputfm_18_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_address0;
    outputfm_18_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_ce0;
    outputfm_19_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_address0;
    outputfm_19_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_ce0;
    outputfm_1_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_address0;
    outputfm_1_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_ce0;
    outputfm_20_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_address0;
    outputfm_20_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_ce0;
    outputfm_21_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_address0;
    outputfm_21_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_ce0;
    outputfm_22_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_address0;
    outputfm_22_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_ce0;
    outputfm_23_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_address0;
    outputfm_23_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_ce0;
    outputfm_24_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_address0;
    outputfm_24_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_ce0;
    outputfm_25_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_address0;
    outputfm_25_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_ce0;
    outputfm_26_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_address0;
    outputfm_26_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_ce0;
    outputfm_27_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_address0;
    outputfm_27_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_ce0;
    outputfm_2_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_address0;
    outputfm_2_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_ce0;
    outputfm_3_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_address0;
    outputfm_3_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_ce0;
    outputfm_4_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_address0;
    outputfm_4_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_ce0;
    outputfm_5_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_address0;
    outputfm_5_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_ce0;
    outputfm_6_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_address0;
    outputfm_6_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_ce0;
    outputfm_7_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_address0;
    outputfm_7_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_ce0;
    outputfm_8_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_address0;
    outputfm_8_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_ce0;
    outputfm_9_address0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_address0;
    outputfm_9_ce0 <= grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_ce0;
    p_neg_i_i_i_i_fu_727_p2 <= std_logic_vector(unsigned(ap_const_lv59_0) - unsigned(tmp_124_i_i_i_i_reg_1076));
    p_not_i_i_i_fu_798_p2 <= (tmp_27_i_i_i_fu_792_p2 xor ap_const_lv1_1);
    phitmp1_i_i_i_fu_783_p2 <= std_logic_vector(unsigned(tmp_24_fu_779_p1) + unsigned(tmp_reg_908));

    quantized_multiplier_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, quantized_multiplier_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            quantized_multiplier_blk_n <= quantized_multiplier_empty_n;
        else 
            quantized_multiplier_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    quantized_multiplier_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            quantized_multiplier_read <= ap_const_logic_1;
        else 
            quantized_multiplier_read <= ap_const_logic_0;
        end if; 
    end process;


    right_shift_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, right_shift_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            right_shift_blk_n <= right_shift_empty_n;
        else 
            right_shift_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    right_shift_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            right_shift_read <= ap_const_logic_1;
        else 
            right_shift_read <= ap_const_logic_0;
        end if; 
    end process;


    row_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, row_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            row_blk_n <= row_empty_n;
        else 
            row_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    row_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            row_read <= ap_const_logic_1;
        else 
            row_read <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_i_fu_618_p3 <= 
        ap_const_lv16_0 when (ap_reg_pp0_iter1_sel_tmp_i_reg_1001(0) = '1') else 
        i_index_fu_612_p1;
    sel_tmp9_i_fu_554_p3 <= 
        ap_const_lv32_0 when (sel_tmp_i_fu_548_p2(0) = '1') else 
        i_fu_531_p2;
    sel_tmp_i_fu_548_p2 <= (tmp_18_i_i_i_fu_537_p2 and tmp_16_i_i_i_fu_526_p2);
        sext_cast_i_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(out_offset_read_reg_831),33));

        sum_cast_i_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_i_fu_677_p2),64));

    sum_i_fu_677_p2 <= std_logic_vector(signed(tmp_35_i_i_cast_i_fu_674_p1) + signed(sext_cast_i_reg_971));
    tmp1_i_fu_488_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(n_depth_o_1_reg_930) * signed(n_rows_1_reg_924))), 32));
    tmp2_i_fu_503_p2 <= std_logic_vector(unsigned(tmp3_i_fu_499_p2) + unsigned(col_read_reg_876));
    tmp3_i_fu_499_p2 <= std_logic_vector(unsigned(tmp_i_i_i_17_reg_940) + unsigned(tmp_i_i_i_reg_935));
    tmp4_i_fu_664_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter1_j_2_i_i_i_reg_1013) + unsigned(tmp5_cast_i_fu_660_p1));
    tmp5_cast_i_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_i_fu_654_p2),32));
    tmp5_i_fu_654_p2 <= std_logic_vector(unsigned(tmp_29_i_i_cast_i_fu_646_p1) + unsigned(tmp_30_i_i_cast_i_fu_650_p1));
    tmp_10_i_i_i_fu_430_p2 <= std_logic_vector(unsigned(n_depth_o_fu_402_p3) + unsigned(to_read_reg_862));
    tmp_11_i_i_i_fu_435_p2 <= "1" when (signed(tmp_10_i_i_i_fu_430_p2) > signed(curr_layer_out_ch_re_reg_855)) else "0";
    tmp_123_i_cast_i_i_c_fu_707_p3 <= 
        ap_const_lv59_7FFFFFFFFFF8001 when (tmp_22_fu_700_p3(0) = '1') else 
        ap_const_lv59_8000;
    tmp_124_i_i_i_i_fu_715_p2 <= std_logic_vector(unsigned(ab_64_reg_1070) + unsigned(tmp_123_i_cast_i_i_c_fu_707_p3));
    tmp_12_i_i_i_fu_440_p2 <= std_logic_vector(unsigned(curr_layer_out_ch_re_reg_855) - unsigned(to_read_reg_862));
    tmp_14_i_i_i_fu_492_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(n_cols_1_reg_945) * signed(tmp1_i_reg_951))), 32));
    tmp_15_i_i_i_fu_515_p2 <= "1" when (signed(itr_i_i_cast_i_fu_511_p1) < signed(tmp_14_i_i_i_reg_956)) else "0";
    tmp_16_i_i_i_fu_526_p2 <= "1" when (j_i_i_i_reg_286 = n_cols_1_reg_945) else "0";
    tmp_17_i_i_i_fu_604_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(i_reg_991) * signed(curr_layer_out_w_rea_reg_836))), 32));
    tmp_18_i_i_i_fu_537_p2 <= "1" when (i_fu_531_p2 = n_rows_1_reg_924) else "0";
    tmp_19_i_i_i_fu_608_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(out_size_reg_913) * signed(ii_reg_996))), 32));
    tmp_1_i_i_i_fu_371_p0 <= curr_layer_out_h_dout;
    tmp_1_i_i_i_fu_371_p2 <= "1" when (signed(tmp_1_i_i_i_fu_371_p0) > signed(ap_const_lv32_25)) else "0";
    tmp_21_fu_594_p1 <= ii_2_fu_586_p3(5 - 1 downto 0);
    tmp_22_fu_700_p3 <= ab_64_reg_1070(58 downto 58);
    tmp_23_fu_720_p3 <= tmp_124_i_i_i_i_reg_1076(58 downto 58);
    tmp_24_fu_779_p1 <= tmp_25_i_i_i_fu_775_p2(8 - 1 downto 0);
    tmp_24_i_i_i_fu_769_p2 <= std_logic_vector(unsigned(ab_x2_high32_fu_757_p3) + unsigned(rounding));
    tmp_25_fu_804_p3 <= tmp_26_i_i_i_fu_788_p2(31 downto 31);
    tmp_25_i_i_i_fu_775_p2 <= std_logic_vector(shift_right(signed(tmp_24_i_i_i_reg_1083),to_integer(unsigned('0' & right_shift_read_reg_893(31-1 downto 0)))));
    tmp_26_i_i_i_fu_788_p2 <= std_logic_vector(unsigned(tmp_25_i_i_i_reg_1088) + unsigned(output_offset_read_reg_883));
    tmp_27_i_i_i_fu_792_p2 <= "1" when (signed(tmp_26_i_i_i_fu_788_p2) > signed(ap_const_lv32_100)) else "0";
    tmp_28_i_i_i_fu_824_p3 <= 
        ap_const_lv8_0 when (tmp_6_i_fu_818_p2(0) = '1') else 
        phitmp1_i_i_i_reg_1093;
    tmp_29_i_i_cast_i_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_index_2_fu_639_p3),17));
    tmp_2_i_i_i_fu_397_p2 <= "1" when (signed(curr_layer_out_w_rea_reg_836) > signed(ap_const_lv32_1B)) else "0";
    tmp_30_i_i_cast_i_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_index_2_i_i_i_fu_625_p3),17));
    tmp_34_i_i_i_fu_669_p2 <= std_logic_vector(unsigned(tmp2_i_reg_966) + unsigned(tmp4_i_fu_664_p2));
        tmp_35_i_i_cast_i_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_34_i_i_i_reg_1054),33));

    tmp_3_i_i_i_fu_377_p2 <= "1" when (signed(curr_layer_out_ch_dout) > signed(ap_const_lv32_1C)) else "0";
    tmp_4_i_i_i_fu_408_p2 <= std_logic_vector(unsigned(n_rows_fu_391_p3) + unsigned(row_read_reg_869));
    tmp_5_i_i_i_fu_413_p2 <= "1" when (signed(tmp_4_i_i_i_fu_408_p2) > signed(curr_layer_out_h_rea_reg_847)) else "0";
    tmp_6_i_fu_818_p2 <= (tmp_27_i_i_i_fu_792_p2 or or_cond_i_i_i_fu_812_p2);
    tmp_6_i_i_i_fu_418_p2 <= std_logic_vector(signed(curr_layer_out_h_rea_reg_847) - signed(row_read_reg_869));
    tmp_7_i_i_i_fu_466_p2 <= std_logic_vector(unsigned(n_cols_fu_460_p3) + unsigned(col_read_reg_876));
    tmp_88_i_i_i_i_fu_732_p4 <= p_neg_i_i_i_i_fu_727_p2(47 downto 16);
    tmp_89_i_i_i_i_fu_742_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_88_i_i_i_i_fu_732_p4));
    tmp_8_i_i_i_fu_471_p2 <= "1" when (signed(tmp_7_i_i_i_fu_466_p2) > signed(curr_layer_out_w_rea_reg_836)) else "0";
    tmp_90_i_i_i_i_fu_748_p4 <= tmp_124_i_i_i_i_reg_1076(47 downto 16);
    tmp_9_i_i_i_fu_476_p2 <= std_logic_vector(signed(curr_layer_out_w_rea_reg_836) - signed(col_read_reg_876));
    tmp_fu_383_p1 <= output_offset_dout(8 - 1 downto 0);
    tmp_i_i_i_17_fu_456_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(row_read_reg_869) * signed(curr_layer_out_w_rea_reg_836))), 32));
    tmp_i_i_i_fu_452_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(out_size_reg_913) * signed(to_read_reg_862))), 32));

    to_r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, to_r_empty_n)
    begin
        if ((not(((ap_const_logic_0 = ap_start) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            to_r_blk_n <= to_r_empty_n;
        else 
            to_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    to_r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, curr_layer_out_w_empty_n, curr_layer_out_h_empty_n, curr_layer_out_ch_empty_n, out_offset_empty_n, to_r_empty_n, row_empty_n, col_empty_n, output_offset_empty_n, quantized_multiplier_empty_n, right_shift_empty_n)
    begin
        if ((not(((ap_const_logic_0 = out_offset_empty_n) or (ap_const_logic_0 = curr_layer_out_ch_empty_n) or (ap_const_logic_0 = curr_layer_out_h_empty_n) or (ap_const_logic_0 = curr_layer_out_w_empty_n) or (ap_const_logic_0 = right_shift_empty_n) or (ap_const_logic_0 = quantized_multiplier_empty_n) or (ap_const_logic_0 = output_offset_empty_n) or (ap_const_logic_0 = ap_start) or (ap_const_logic_0 = col_empty_n) or (ap_const_logic_0 = row_empty_n) or (ap_const_logic_0 = to_r_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            to_r_read <= ap_const_logic_1;
        else 
            to_r_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
