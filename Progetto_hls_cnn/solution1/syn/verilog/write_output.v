// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module write_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        curr_layer_out_w_dout,
        curr_layer_out_w_empty_n,
        curr_layer_out_w_read,
        curr_layer_out_h_dout,
        curr_layer_out_h_empty_n,
        curr_layer_out_h_read,
        curr_layer_out_ch_dout,
        curr_layer_out_ch_empty_n,
        curr_layer_out_ch_read,
        m_axi_out_r_AWVALID,
        m_axi_out_r_AWREADY,
        m_axi_out_r_AWADDR,
        m_axi_out_r_AWID,
        m_axi_out_r_AWLEN,
        m_axi_out_r_AWSIZE,
        m_axi_out_r_AWBURST,
        m_axi_out_r_AWLOCK,
        m_axi_out_r_AWCACHE,
        m_axi_out_r_AWPROT,
        m_axi_out_r_AWQOS,
        m_axi_out_r_AWREGION,
        m_axi_out_r_AWUSER,
        m_axi_out_r_WVALID,
        m_axi_out_r_WREADY,
        m_axi_out_r_WDATA,
        m_axi_out_r_WSTRB,
        m_axi_out_r_WLAST,
        m_axi_out_r_WID,
        m_axi_out_r_WUSER,
        m_axi_out_r_ARVALID,
        m_axi_out_r_ARREADY,
        m_axi_out_r_ARADDR,
        m_axi_out_r_ARID,
        m_axi_out_r_ARLEN,
        m_axi_out_r_ARSIZE,
        m_axi_out_r_ARBURST,
        m_axi_out_r_ARLOCK,
        m_axi_out_r_ARCACHE,
        m_axi_out_r_ARPROT,
        m_axi_out_r_ARQOS,
        m_axi_out_r_ARREGION,
        m_axi_out_r_ARUSER,
        m_axi_out_r_RVALID,
        m_axi_out_r_RREADY,
        m_axi_out_r_RDATA,
        m_axi_out_r_RLAST,
        m_axi_out_r_RID,
        m_axi_out_r_RUSER,
        m_axi_out_r_RRESP,
        m_axi_out_r_BVALID,
        m_axi_out_r_BREADY,
        m_axi_out_r_BRESP,
        m_axi_out_r_BID,
        m_axi_out_r_BUSER,
        out_offset_dout,
        out_offset_empty_n,
        out_offset_read,
        to_r_dout,
        to_r_empty_n,
        to_r_read,
        row_dout,
        row_empty_n,
        row_read,
        col_dout,
        col_empty_n,
        col_read,
        output_offset_dout,
        output_offset_empty_n,
        output_offset_read,
        quantized_multiplier_dout,
        quantized_multiplier_empty_n,
        quantized_multiplier_read,
        right_shift_dout,
        right_shift_empty_n,
        right_shift_read,
        outputfm_0_address0,
        outputfm_0_ce0,
        outputfm_0_q0,
        outputfm_1_address0,
        outputfm_1_ce0,
        outputfm_1_q0,
        outputfm_10_address0,
        outputfm_10_ce0,
        outputfm_10_q0,
        outputfm_11_address0,
        outputfm_11_ce0,
        outputfm_11_q0,
        outputfm_12_address0,
        outputfm_12_ce0,
        outputfm_12_q0,
        outputfm_13_address0,
        outputfm_13_ce0,
        outputfm_13_q0,
        outputfm_14_address0,
        outputfm_14_ce0,
        outputfm_14_q0,
        outputfm_15_address0,
        outputfm_15_ce0,
        outputfm_15_q0,
        outputfm_16_address0,
        outputfm_16_ce0,
        outputfm_16_q0,
        outputfm_17_address0,
        outputfm_17_ce0,
        outputfm_17_q0,
        outputfm_18_address0,
        outputfm_18_ce0,
        outputfm_18_q0,
        outputfm_19_address0,
        outputfm_19_ce0,
        outputfm_19_q0,
        outputfm_2_address0,
        outputfm_2_ce0,
        outputfm_2_q0,
        outputfm_20_address0,
        outputfm_20_ce0,
        outputfm_20_q0,
        outputfm_21_address0,
        outputfm_21_ce0,
        outputfm_21_q0,
        outputfm_22_address0,
        outputfm_22_ce0,
        outputfm_22_q0,
        outputfm_23_address0,
        outputfm_23_ce0,
        outputfm_23_q0,
        outputfm_24_address0,
        outputfm_24_ce0,
        outputfm_24_q0,
        outputfm_25_address0,
        outputfm_25_ce0,
        outputfm_25_q0,
        outputfm_26_address0,
        outputfm_26_ce0,
        outputfm_26_q0,
        outputfm_27_address0,
        outputfm_27_ce0,
        outputfm_27_q0,
        outputfm_3_address0,
        outputfm_3_ce0,
        outputfm_3_q0,
        outputfm_4_address0,
        outputfm_4_ce0,
        outputfm_4_q0,
        outputfm_5_address0,
        outputfm_5_ce0,
        outputfm_5_q0,
        outputfm_6_address0,
        outputfm_6_ce0,
        outputfm_6_q0,
        outputfm_7_address0,
        outputfm_7_ce0,
        outputfm_7_q0,
        outputfm_8_address0,
        outputfm_8_ce0,
        outputfm_8_q0,
        outputfm_9_address0,
        outputfm_9_ce0,
        outputfm_9_q0,
        rounding
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp0_stage0 = 6'd16;
parameter    ap_ST_fsm_state20 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] curr_layer_out_w_dout;
input   curr_layer_out_w_empty_n;
output   curr_layer_out_w_read;
input  [31:0] curr_layer_out_h_dout;
input   curr_layer_out_h_empty_n;
output   curr_layer_out_h_read;
input  [31:0] curr_layer_out_ch_dout;
input   curr_layer_out_ch_empty_n;
output   curr_layer_out_ch_read;
output   m_axi_out_r_AWVALID;
input   m_axi_out_r_AWREADY;
output  [31:0] m_axi_out_r_AWADDR;
output  [0:0] m_axi_out_r_AWID;
output  [31:0] m_axi_out_r_AWLEN;
output  [2:0] m_axi_out_r_AWSIZE;
output  [1:0] m_axi_out_r_AWBURST;
output  [1:0] m_axi_out_r_AWLOCK;
output  [3:0] m_axi_out_r_AWCACHE;
output  [2:0] m_axi_out_r_AWPROT;
output  [3:0] m_axi_out_r_AWQOS;
output  [3:0] m_axi_out_r_AWREGION;
output  [0:0] m_axi_out_r_AWUSER;
output   m_axi_out_r_WVALID;
input   m_axi_out_r_WREADY;
output  [7:0] m_axi_out_r_WDATA;
output  [0:0] m_axi_out_r_WSTRB;
output   m_axi_out_r_WLAST;
output  [0:0] m_axi_out_r_WID;
output  [0:0] m_axi_out_r_WUSER;
output   m_axi_out_r_ARVALID;
input   m_axi_out_r_ARREADY;
output  [31:0] m_axi_out_r_ARADDR;
output  [0:0] m_axi_out_r_ARID;
output  [31:0] m_axi_out_r_ARLEN;
output  [2:0] m_axi_out_r_ARSIZE;
output  [1:0] m_axi_out_r_ARBURST;
output  [1:0] m_axi_out_r_ARLOCK;
output  [3:0] m_axi_out_r_ARCACHE;
output  [2:0] m_axi_out_r_ARPROT;
output  [3:0] m_axi_out_r_ARQOS;
output  [3:0] m_axi_out_r_ARREGION;
output  [0:0] m_axi_out_r_ARUSER;
input   m_axi_out_r_RVALID;
output   m_axi_out_r_RREADY;
input  [7:0] m_axi_out_r_RDATA;
input   m_axi_out_r_RLAST;
input  [0:0] m_axi_out_r_RID;
input  [0:0] m_axi_out_r_RUSER;
input  [1:0] m_axi_out_r_RRESP;
input   m_axi_out_r_BVALID;
output   m_axi_out_r_BREADY;
input  [1:0] m_axi_out_r_BRESP;
input  [0:0] m_axi_out_r_BID;
input  [0:0] m_axi_out_r_BUSER;
input  [31:0] out_offset_dout;
input   out_offset_empty_n;
output   out_offset_read;
input  [31:0] to_r_dout;
input   to_r_empty_n;
output   to_r_read;
input  [31:0] row_dout;
input   row_empty_n;
output   row_read;
input  [31:0] col_dout;
input   col_empty_n;
output   col_read;
input  [31:0] output_offset_dout;
input   output_offset_empty_n;
output   output_offset_read;
input  [31:0] quantized_multiplier_dout;
input   quantized_multiplier_empty_n;
output   quantized_multiplier_read;
input  [31:0] right_shift_dout;
input   right_shift_empty_n;
output   right_shift_read;
output  [9:0] outputfm_0_address0;
output   outputfm_0_ce0;
input  [26:0] outputfm_0_q0;
output  [9:0] outputfm_1_address0;
output   outputfm_1_ce0;
input  [26:0] outputfm_1_q0;
output  [9:0] outputfm_10_address0;
output   outputfm_10_ce0;
input  [26:0] outputfm_10_q0;
output  [9:0] outputfm_11_address0;
output   outputfm_11_ce0;
input  [26:0] outputfm_11_q0;
output  [9:0] outputfm_12_address0;
output   outputfm_12_ce0;
input  [26:0] outputfm_12_q0;
output  [9:0] outputfm_13_address0;
output   outputfm_13_ce0;
input  [26:0] outputfm_13_q0;
output  [9:0] outputfm_14_address0;
output   outputfm_14_ce0;
input  [26:0] outputfm_14_q0;
output  [9:0] outputfm_15_address0;
output   outputfm_15_ce0;
input  [26:0] outputfm_15_q0;
output  [9:0] outputfm_16_address0;
output   outputfm_16_ce0;
input  [26:0] outputfm_16_q0;
output  [9:0] outputfm_17_address0;
output   outputfm_17_ce0;
input  [26:0] outputfm_17_q0;
output  [9:0] outputfm_18_address0;
output   outputfm_18_ce0;
input  [26:0] outputfm_18_q0;
output  [9:0] outputfm_19_address0;
output   outputfm_19_ce0;
input  [26:0] outputfm_19_q0;
output  [9:0] outputfm_2_address0;
output   outputfm_2_ce0;
input  [26:0] outputfm_2_q0;
output  [9:0] outputfm_20_address0;
output   outputfm_20_ce0;
input  [26:0] outputfm_20_q0;
output  [9:0] outputfm_21_address0;
output   outputfm_21_ce0;
input  [26:0] outputfm_21_q0;
output  [9:0] outputfm_22_address0;
output   outputfm_22_ce0;
input  [26:0] outputfm_22_q0;
output  [9:0] outputfm_23_address0;
output   outputfm_23_ce0;
input  [26:0] outputfm_23_q0;
output  [9:0] outputfm_24_address0;
output   outputfm_24_ce0;
input  [26:0] outputfm_24_q0;
output  [9:0] outputfm_25_address0;
output   outputfm_25_ce0;
input  [26:0] outputfm_25_q0;
output  [9:0] outputfm_26_address0;
output   outputfm_26_ce0;
input  [26:0] outputfm_26_q0;
output  [9:0] outputfm_27_address0;
output   outputfm_27_ce0;
input  [26:0] outputfm_27_q0;
output  [9:0] outputfm_3_address0;
output   outputfm_3_ce0;
input  [26:0] outputfm_3_q0;
output  [9:0] outputfm_4_address0;
output   outputfm_4_ce0;
input  [26:0] outputfm_4_q0;
output  [9:0] outputfm_5_address0;
output   outputfm_5_ce0;
input  [26:0] outputfm_5_q0;
output  [9:0] outputfm_6_address0;
output   outputfm_6_ce0;
input  [26:0] outputfm_6_q0;
output  [9:0] outputfm_7_address0;
output   outputfm_7_ce0;
input  [26:0] outputfm_7_q0;
output  [9:0] outputfm_8_address0;
output   outputfm_8_ce0;
input  [26:0] outputfm_8_q0;
output  [9:0] outputfm_9_address0;
output   outputfm_9_ce0;
input  [26:0] outputfm_9_q0;
input  [31:0] rounding;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg curr_layer_out_w_read;
reg curr_layer_out_h_read;
reg curr_layer_out_ch_read;
reg m_axi_out_r_AWVALID;
reg m_axi_out_r_WVALID;
reg m_axi_out_r_BREADY;
reg out_offset_read;
reg to_r_read;
reg row_read;
reg col_read;
reg output_offset_read;
reg quantized_multiplier_read;
reg right_shift_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    curr_layer_out_w_blk_n;
reg    curr_layer_out_h_blk_n;
reg    curr_layer_out_ch_blk_n;
reg    out_r_blk_n_AW;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_15_i_i_i_reg_976;
reg   [0:0] ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976;
reg    out_r_blk_n_W;
reg    ap_enable_reg_pp0_iter9;
reg   [0:0] ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976;
reg    out_r_blk_n_B;
reg    ap_enable_reg_pp0_iter14;
reg   [0:0] ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976;
reg    out_offset_blk_n;
reg    to_r_blk_n;
reg    row_blk_n;
reg    col_blk_n;
reg    output_offset_blk_n;
reg    quantized_multiplier_blk_n;
reg    right_shift_blk_n;
reg   [15:0] i_index_i_i_i_reg_240;
reg   [15:0] ii_index_i_i_i_reg_252;
reg   [30:0] itr_i_i_i_reg_264;
reg   [31:0] i_i_i_i_reg_275;
reg   [31:0] j_i_i_i_reg_286;
reg   [31:0] ii_i_i_i_reg_297;
reg   [31:0] out_offset_read_reg_831;
reg    ap_block_state1;
reg  signed [31:0] curr_layer_out_w_rea_reg_836;
reg  signed [31:0] curr_layer_out_h_rea_reg_847;
reg   [31:0] curr_layer_out_ch_re_reg_855;
reg  signed [31:0] to_read_reg_862;
reg  signed [31:0] row_read_reg_869;
reg   [31:0] col_read_reg_876;
reg   [31:0] output_offset_read_reg_883;
reg   [31:0] quantized_multiplier_2_reg_888;
reg   [31:0] right_shift_read_reg_893;
wire   [0:0] tmp_1_i_i_i_fu_371_p2;
reg   [0:0] tmp_1_i_i_i_reg_898;
wire   [0:0] tmp_3_i_i_i_fu_377_p2;
reg   [0:0] tmp_3_i_i_i_reg_903;
wire   [7:0] tmp_fu_383_p1;
reg   [7:0] tmp_reg_908;
wire  signed [31:0] out_size_fu_387_p2;
reg  signed [31:0] out_size_reg_913;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_2_i_i_i_fu_397_p2;
reg   [0:0] tmp_2_i_i_i_reg_919;
wire  signed [31:0] n_rows_1_fu_422_p3;
reg  signed [31:0] n_rows_1_reg_924;
wire  signed [31:0] n_depth_o_1_fu_444_p3;
reg  signed [31:0] n_depth_o_1_reg_930;
wire   [31:0] tmp_i_i_i_fu_452_p2;
reg   [31:0] tmp_i_i_i_reg_935;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_i_i_i_17_fu_456_p2;
reg   [31:0] tmp_i_i_i_17_reg_940;
wire  signed [31:0] n_cols_1_fu_480_p3;
reg  signed [31:0] n_cols_1_reg_945;
wire  signed [31:0] tmp1_i_fu_488_p2;
reg  signed [31:0] tmp1_i_reg_951;
wire   [31:0] tmp_14_i_i_i_fu_492_p2;
reg   [31:0] tmp_14_i_i_i_reg_956;
wire    ap_CS_fsm_state4;
wire  signed [58:0] b_64_i_cast_i_i_i_fu_496_p1;
reg  signed [58:0] b_64_i_cast_i_i_i_reg_961;
wire   [31:0] tmp2_i_fu_503_p2;
reg   [31:0] tmp2_i_reg_966;
wire  signed [32:0] sext_cast_i_fu_508_p1;
reg  signed [32:0] sext_cast_i_reg_971;
wire   [0:0] tmp_15_i_i_i_fu_515_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state10_pp0_stage0_iter5;
wire    ap_block_state11_pp0_stage0_iter6;
wire    ap_block_state12_pp0_stage0_iter7;
wire    ap_block_state13_pp0_stage0_iter8;
reg    ap_sig_ioackin_m_axi_out_r_AWREADY;
reg    ap_block_state13_io;
wire    ap_block_state14_pp0_stage0_iter9;
reg    ap_sig_ioackin_m_axi_out_r_WREADY;
reg    ap_block_state14_io;
wire    ap_block_state15_pp0_stage0_iter10;
wire    ap_block_state16_pp0_stage0_iter11;
wire    ap_block_state17_pp0_stage0_iter12;
wire    ap_block_state18_pp0_stage0_iter13;
reg    ap_block_state19_pp0_stage0_iter14;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_tmp_15_i_i_i_reg_976;
reg   [0:0] ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976;
reg   [0:0] ap_reg_pp0_iter3_tmp_15_i_i_i_reg_976;
reg   [0:0] ap_reg_pp0_iter4_tmp_15_i_i_i_reg_976;
reg   [0:0] ap_reg_pp0_iter5_tmp_15_i_i_i_reg_976;
reg   [0:0] ap_reg_pp0_iter6_tmp_15_i_i_i_reg_976;
reg   [0:0] ap_reg_pp0_iter9_tmp_15_i_i_i_reg_976;
reg   [0:0] ap_reg_pp0_iter10_tmp_15_i_i_i_reg_976;
reg   [0:0] ap_reg_pp0_iter11_tmp_15_i_i_i_reg_976;
reg   [0:0] ap_reg_pp0_iter12_tmp_15_i_i_i_reg_976;
wire   [30:0] itr_i_fu_520_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_16_i_i_i_fu_526_p2;
reg   [0:0] tmp_16_i_i_i_reg_985;
reg   [0:0] ap_reg_pp0_iter1_tmp_16_i_i_i_reg_985;
wire  signed [31:0] i_fu_531_p2;
reg  signed [31:0] i_reg_991;
wire  signed [31:0] ii_fu_542_p2;
reg  signed [31:0] ii_reg_996;
wire   [0:0] sel_tmp_i_fu_548_p2;
reg   [0:0] sel_tmp_i_reg_1001;
reg   [0:0] ap_reg_pp0_iter1_sel_tmp_i_reg_1001;
wire   [31:0] i_2_i_i_i_fu_562_p3;
reg   [31:0] i_2_i_i_i_reg_1007;
wire   [31:0] j_2_i_i_i_fu_570_p3;
reg   [31:0] j_2_i_i_i_reg_1013;
reg   [31:0] ap_reg_pp0_iter1_j_2_i_i_i_reg_1013;
wire   [31:0] ii_2_fu_586_p3;
reg   [31:0] ii_2_reg_1019;
wire   [4:0] tmp_21_fu_594_p1;
reg   [4:0] tmp_21_reg_1024;
wire   [31:0] j_fu_598_p2;
wire   [31:0] tmp_17_i_i_i_fu_604_p2;
reg   [31:0] tmp_17_i_i_i_reg_1034;
wire   [31:0] tmp_19_i_i_i_fu_608_p2;
reg   [31:0] tmp_19_i_i_i_reg_1039;
wire   [15:0] i_index_2_i_i_i_fu_625_p3;
reg   [15:0] i_index_2_i_i_i_reg_1044;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] ii_index_2_fu_639_p3;
reg   [15:0] ii_index_2_reg_1049;
wire   [31:0] tmp_34_i_i_i_fu_669_p2;
reg   [31:0] tmp_34_i_i_i_reg_1054;
wire   [26:0] grp_aesl_mux_load_28_37_s_fu_308_ap_return;
reg   [26:0] tmp6_i_reg_1059;
reg   [31:0] out_addr_reg_1064;
reg   [31:0] ap_reg_pp0_iter4_out_addr_reg_1064;
reg   [31:0] ap_reg_pp0_iter5_out_addr_reg_1064;
reg   [31:0] ap_reg_pp0_iter6_out_addr_reg_1064;
reg   [31:0] ap_reg_pp0_iter7_out_addr_reg_1064;
wire   [58:0] ab_64_fu_695_p2;
reg   [58:0] ab_64_reg_1070;
wire   [58:0] tmp_124_i_i_i_i_fu_715_p2;
reg   [58:0] tmp_124_i_i_i_i_reg_1076;
wire   [31:0] tmp_24_i_i_i_fu_769_p2;
reg   [31:0] tmp_24_i_i_i_reg_1083;
wire   [31:0] tmp_25_i_i_i_fu_775_p2;
reg   [31:0] tmp_25_i_i_i_reg_1088;
wire   [7:0] phitmp1_i_i_i_fu_783_p2;
reg   [7:0] phitmp1_i_i_i_reg_1093;
wire   [7:0] tmp_28_i_i_i_fu_824_p3;
reg   [7:0] tmp_28_i_i_i_reg_1098;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
wire    grp_aesl_mux_load_28_37_s_fu_308_ap_start;
wire    grp_aesl_mux_load_28_37_s_fu_308_ap_done;
wire    grp_aesl_mux_load_28_37_s_fu_308_ap_idle;
wire    grp_aesl_mux_load_28_37_s_fu_308_ap_ready;
reg    grp_aesl_mux_load_28_37_s_fu_308_ap_ce;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_ce0;
wire   [9:0] grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_address0;
wire    grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_ce0;
reg   [15:0] ap_phi_mux_i_index_i_i_i_phi_fu_244_p4;
reg   [15:0] ap_phi_mux_ii_index_i_i_i_phi_fu_256_p4;
reg   [31:0] ap_phi_mux_i_i_i_i_phi_fu_279_p4;
reg   [31:0] ap_phi_mux_ii_i_i_i_phi_fu_301_p4;
reg    ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start;
wire  signed [63:0] sum_cast_i_fu_682_p1;
reg    ap_reg_ioackin_m_axi_out_r_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_m_axi_out_r_WREADY;
wire  signed [31:0] tmp_1_i_i_i_fu_371_p0;
wire   [31:0] n_rows_fu_391_p3;
wire   [31:0] tmp_4_i_i_i_fu_408_p2;
wire   [0:0] tmp_5_i_i_i_fu_413_p2;
wire   [31:0] tmp_6_i_i_i_fu_418_p2;
wire   [31:0] n_depth_o_fu_402_p3;
wire   [31:0] tmp_10_i_i_i_fu_430_p2;
wire   [0:0] tmp_11_i_i_i_fu_435_p2;
wire   [31:0] tmp_12_i_i_i_fu_440_p2;
wire   [31:0] n_cols_fu_460_p3;
wire   [31:0] tmp_7_i_i_i_fu_466_p2;
wire   [0:0] tmp_8_i_i_i_fu_471_p2;
wire   [31:0] tmp_9_i_i_i_fu_476_p2;
wire   [31:0] tmp3_i_fu_499_p2;
wire   [31:0] itr_i_i_cast_i_fu_511_p1;
wire   [0:0] tmp_18_i_i_i_fu_537_p2;
wire   [31:0] sel_tmp9_i_fu_554_p3;
wire   [31:0] ii_1_fu_578_p3;
wire   [15:0] i_index_fu_612_p1;
wire   [15:0] sel_tmp1_i_fu_618_p3;
wire   [15:0] ii_index_fu_615_p1;
wire   [15:0] ii_index_1_fu_632_p3;
wire   [16:0] tmp_29_i_i_cast_i_fu_646_p1;
wire   [16:0] tmp_30_i_i_cast_i_fu_650_p1;
wire   [16:0] tmp5_i_fu_654_p2;
wire   [31:0] tmp5_cast_i_fu_660_p1;
wire   [31:0] tmp4_i_fu_664_p2;
wire  signed [32:0] tmp_35_i_i_cast_i_fu_674_p1;
wire   [32:0] sum_i_fu_677_p2;
wire  signed [26:0] ab_64_fu_695_p0;
wire  signed [31:0] ab_64_fu_695_p1;
wire   [0:0] tmp_22_fu_700_p3;
wire   [58:0] tmp_123_i_cast_i_i_c_fu_707_p3;
wire   [58:0] p_neg_i_i_i_i_fu_727_p2;
wire   [31:0] tmp_88_i_i_i_i_fu_732_p4;
wire   [0:0] tmp_23_fu_720_p3;
wire   [31:0] tmp_89_i_i_i_i_fu_742_p2;
wire   [31:0] tmp_90_i_i_i_i_fu_748_p4;
wire   [31:0] ab_x2_high32_fu_757_p3;
wire   [7:0] tmp_24_fu_779_p1;
wire   [31:0] tmp_26_i_i_i_fu_788_p2;
wire   [0:0] tmp_27_i_i_i_fu_792_p2;
wire   [0:0] tmp_25_fu_804_p3;
wire   [0:0] p_not_i_i_i_fu_798_p2;
wire   [0:0] or_cond_i_i_i_fu_812_p2;
wire   [0:0] tmp_6_i_fu_818_p2;
wire    ap_CS_fsm_state20;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start = 1'b0;
#0 ap_reg_ioackin_m_axi_out_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_out_r_WREADY = 1'b0;
end

aesl_mux_load_28_37_s grp_aesl_mux_load_28_37_s_fu_308(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aesl_mux_load_28_37_s_fu_308_ap_start),
    .ap_done(grp_aesl_mux_load_28_37_s_fu_308_ap_done),
    .ap_idle(grp_aesl_mux_load_28_37_s_fu_308_ap_idle),
    .ap_ready(grp_aesl_mux_load_28_37_s_fu_308_ap_ready),
    .ap_ce(grp_aesl_mux_load_28_37_s_fu_308_ap_ce),
    .empty_12(tmp_21_reg_1024),
    .empty_13(i_2_i_i_i_reg_1007),
    .empty(j_2_i_i_i_reg_1013),
    .outputfm_0_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_address0),
    .outputfm_0_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_ce0),
    .outputfm_0_q0(outputfm_0_q0),
    .outputfm_1_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_address0),
    .outputfm_1_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_ce0),
    .outputfm_1_q0(outputfm_1_q0),
    .outputfm_10_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_address0),
    .outputfm_10_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_ce0),
    .outputfm_10_q0(outputfm_10_q0),
    .outputfm_11_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_address0),
    .outputfm_11_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_ce0),
    .outputfm_11_q0(outputfm_11_q0),
    .outputfm_12_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_address0),
    .outputfm_12_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_ce0),
    .outputfm_12_q0(outputfm_12_q0),
    .outputfm_13_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_address0),
    .outputfm_13_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_ce0),
    .outputfm_13_q0(outputfm_13_q0),
    .outputfm_14_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_address0),
    .outputfm_14_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_ce0),
    .outputfm_14_q0(outputfm_14_q0),
    .outputfm_15_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_address0),
    .outputfm_15_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_ce0),
    .outputfm_15_q0(outputfm_15_q0),
    .outputfm_16_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_address0),
    .outputfm_16_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_ce0),
    .outputfm_16_q0(outputfm_16_q0),
    .outputfm_17_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_address0),
    .outputfm_17_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_ce0),
    .outputfm_17_q0(outputfm_17_q0),
    .outputfm_18_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_address0),
    .outputfm_18_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_ce0),
    .outputfm_18_q0(outputfm_18_q0),
    .outputfm_19_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_address0),
    .outputfm_19_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_ce0),
    .outputfm_19_q0(outputfm_19_q0),
    .outputfm_2_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_address0),
    .outputfm_2_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_ce0),
    .outputfm_2_q0(outputfm_2_q0),
    .outputfm_20_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_address0),
    .outputfm_20_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_ce0),
    .outputfm_20_q0(outputfm_20_q0),
    .outputfm_21_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_address0),
    .outputfm_21_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_ce0),
    .outputfm_21_q0(outputfm_21_q0),
    .outputfm_22_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_address0),
    .outputfm_22_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_ce0),
    .outputfm_22_q0(outputfm_22_q0),
    .outputfm_23_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_address0),
    .outputfm_23_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_ce0),
    .outputfm_23_q0(outputfm_23_q0),
    .outputfm_24_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_address0),
    .outputfm_24_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_ce0),
    .outputfm_24_q0(outputfm_24_q0),
    .outputfm_25_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_address0),
    .outputfm_25_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_ce0),
    .outputfm_25_q0(outputfm_25_q0),
    .outputfm_26_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_address0),
    .outputfm_26_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_ce0),
    .outputfm_26_q0(outputfm_26_q0),
    .outputfm_27_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_address0),
    .outputfm_27_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_ce0),
    .outputfm_27_q0(outputfm_27_q0),
    .outputfm_3_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_address0),
    .outputfm_3_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_ce0),
    .outputfm_3_q0(outputfm_3_q0),
    .outputfm_4_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_address0),
    .outputfm_4_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_ce0),
    .outputfm_4_q0(outputfm_4_q0),
    .outputfm_5_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_address0),
    .outputfm_5_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_ce0),
    .outputfm_5_q0(outputfm_5_q0),
    .outputfm_6_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_address0),
    .outputfm_6_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_ce0),
    .outputfm_6_q0(outputfm_6_q0),
    .outputfm_7_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_address0),
    .outputfm_7_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_ce0),
    .outputfm_7_q0(outputfm_7_q0),
    .outputfm_8_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_address0),
    .outputfm_8_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_ce0),
    .outputfm_8_q0(outputfm_8_q0),
    .outputfm_9_address0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_address0),
    .outputfm_9_ce0(grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_ce0),
    .outputfm_9_q0(outputfm_9_q0),
    .ap_return(grp_aesl_mux_load_28_37_s_fu_308_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state5)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state5 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_subdone == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start <= 1'b0;
    end else begin
        if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_15_i_i_i_fu_515_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aesl_mux_load_28_37_s_fu_308_ap_ready)) begin
            ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_out_r_AWREADY <= 1'b0;
    end else begin
        if (((ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter8))) begin
            if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_out_r_AWREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'b1 == m_axi_out_r_AWREADY))) begin
                ap_reg_ioackin_m_axi_out_r_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_out_r_WREADY <= 1'b0;
    end else begin
        if (((1'd1 == ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976) & (1'b1 == ap_enable_reg_pp0_iter9))) begin
            if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_out_r_WREADY <= 1'b0;
            end else if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'b1 == m_axi_out_r_WREADY))) begin
                ap_reg_ioackin_m_axi_out_r_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (tmp_15_i_i_i_reg_976 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_i_i_i_reg_275 <= i_2_i_i_i_reg_1007;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_i_i_i_reg_275 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        i_index_i_i_i_reg_240 <= i_index_2_i_i_i_reg_1044;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_index_i_i_i_reg_240 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (tmp_15_i_i_i_reg_976 == 1'd1) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ii_i_i_i_reg_297 <= ii_2_reg_1019;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ii_i_i_i_reg_297 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        ii_index_i_i_i_reg_252 <= ii_index_2_reg_1049;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ii_index_i_i_i_reg_252 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_15_i_i_i_fu_515_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        itr_i_i_i_reg_264 <= itr_i_fu_520_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        itr_i_i_i_reg_264 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_15_i_i_i_fu_515_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_i_i_i_reg_286 <= j_fu_598_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        j_i_i_i_reg_286 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter3_tmp_15_i_i_i_reg_976))) begin
        ab_64_reg_1070 <= ab_64_fu_695_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_11001 == 1'b0)) begin
        ap_reg_pp0_iter10_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter9_tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter11_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter10_tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter12_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter11_tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter12_tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter1_tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter3_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter4_out_addr_reg_1064 <= out_addr_reg_1064;
        ap_reg_pp0_iter4_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter3_tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter5_out_addr_reg_1064 <= ap_reg_pp0_iter4_out_addr_reg_1064;
        ap_reg_pp0_iter5_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter4_tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter6_out_addr_reg_1064 <= ap_reg_pp0_iter5_out_addr_reg_1064;
        ap_reg_pp0_iter6_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter5_tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter7_out_addr_reg_1064 <= ap_reg_pp0_iter6_out_addr_reg_1064;
        ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter6_tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter9_tmp_15_i_i_i_reg_976 <= ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_reg_pp0_iter1_j_2_i_i_i_reg_1013 <= j_2_i_i_i_reg_1013;
        ap_reg_pp0_iter1_sel_tmp_i_reg_1001 <= sel_tmp_i_reg_1001;
        ap_reg_pp0_iter1_tmp_15_i_i_i_reg_976 <= tmp_15_i_i_i_reg_976;
        ap_reg_pp0_iter1_tmp_16_i_i_i_reg_985 <= tmp_16_i_i_i_reg_985;
        tmp_15_i_i_i_reg_976 <= tmp_15_i_i_i_fu_515_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        b_64_i_cast_i_i_i_reg_961 <= b_64_i_cast_i_i_i_fu_496_p1;
        sext_cast_i_reg_971 <= sext_cast_i_fu_508_p1;
        tmp2_i_reg_966 <= tmp2_i_fu_503_p2;
        tmp_14_i_i_i_reg_956 <= tmp_14_i_i_i_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_read_reg_876 <= col_dout;
        curr_layer_out_ch_re_reg_855 <= curr_layer_out_ch_dout;
        curr_layer_out_h_rea_reg_847 <= curr_layer_out_h_dout;
        curr_layer_out_w_rea_reg_836 <= curr_layer_out_w_dout;
        out_offset_read_reg_831 <= out_offset_dout;
        output_offset_read_reg_883 <= output_offset_dout;
        quantized_multiplier_2_reg_888 <= quantized_multiplier_dout;
        right_shift_read_reg_893 <= right_shift_dout;
        row_read_reg_869 <= row_dout;
        tmp_1_i_i_i_reg_898 <= tmp_1_i_i_i_fu_371_p2;
        tmp_3_i_i_i_reg_903 <= tmp_3_i_i_i_fu_377_p2;
        tmp_reg_908 <= tmp_fu_383_p1;
        to_read_reg_862 <= to_r_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_15_i_i_i_fu_515_p2) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_i_i_i_reg_1007 <= i_2_i_i_i_fu_562_p3;
        ii_2_reg_1019 <= ii_2_fu_586_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_tmp_15_i_i_i_reg_976) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        i_index_2_i_i_i_reg_1044 <= i_index_2_i_i_i_fu_625_p3;
        ii_index_2_reg_1049 <= ii_index_2_fu_639_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_15_i_i_i_fu_515_p2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_991 <= i_fu_531_p2;
        ii_reg_996 <= ii_fu_542_p2;
        j_2_i_i_i_reg_1013 <= j_2_i_i_i_fu_570_p3;
        sel_tmp_i_reg_1001 <= sel_tmp_i_fu_548_p2;
        tmp_16_i_i_i_reg_985 <= tmp_16_i_i_i_fu_526_p2;
        tmp_21_reg_1024 <= tmp_21_fu_594_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        n_cols_1_reg_945 <= n_cols_1_fu_480_p3;
        tmp1_i_reg_951 <= tmp1_i_fu_488_p2;
        tmp_i_i_i_17_reg_940 <= tmp_i_i_i_17_fu_456_p2;
        tmp_i_i_i_reg_935 <= tmp_i_i_i_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n_depth_o_1_reg_930 <= n_depth_o_1_fu_444_p3;
        n_rows_1_reg_924 <= n_rows_1_fu_422_p3;
        out_size_reg_913 <= out_size_fu_387_p2;
        tmp_2_i_i_i_reg_919 <= tmp_2_i_i_i_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976))) begin
        out_addr_reg_1064 <= sum_cast_i_fu_682_p1;
        tmp6_i_reg_1059 <= grp_aesl_mux_load_28_37_s_fu_308_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter6_tmp_15_i_i_i_reg_976))) begin
        phitmp1_i_i_i_reg_1093 <= phitmp1_i_i_i_fu_783_p2;
        tmp_25_i_i_i_reg_1088 <= tmp_25_i_i_i_fu_775_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter4_tmp_15_i_i_i_reg_976))) begin
        tmp_124_i_i_i_i_reg_1076 <= tmp_124_i_i_i_i_fu_715_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == sel_tmp_i_reg_1001) & (ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == tmp_16_i_i_i_reg_985) & (tmp_15_i_i_i_reg_976 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_17_i_i_i_reg_1034 <= tmp_17_i_i_i_fu_604_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == sel_tmp_i_reg_1001) & (1'd1 == tmp_16_i_i_i_reg_985) & (tmp_15_i_i_i_reg_976 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_19_i_i_i_reg_1039 <= tmp_19_i_i_i_fu_608_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter5_tmp_15_i_i_i_reg_976))) begin
        tmp_24_i_i_i_reg_1083 <= tmp_24_i_i_i_fu_769_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 == 1'd1))) begin
        tmp_28_i_i_i_reg_1098 <= tmp_28_i_i_i_fu_824_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter1_tmp_15_i_i_i_reg_976))) begin
        tmp_34_i_i_i_reg_1054 <= tmp_34_i_i_i_fu_669_p2;
    end
end

always @ (*) begin
    if ((1'd0 == tmp_15_i_i_i_fu_515_p2)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter13) & (1'b0 == ap_enable_reg_pp0_iter12) & (1'b0 == ap_enable_reg_pp0_iter11) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter14) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter8))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_15_i_i_i_reg_976 == 1'd1) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_i_i_i_phi_fu_279_p4 = i_2_i_i_i_reg_1007;
    end else begin
        ap_phi_mux_i_i_i_i_phi_fu_279_p4 = i_i_i_i_reg_275;
    end
end

always @ (*) begin
    if (((1'd1 == ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        ap_phi_mux_i_index_i_i_i_phi_fu_244_p4 = i_index_2_i_i_i_reg_1044;
    end else begin
        ap_phi_mux_i_index_i_i_i_phi_fu_244_p4 = i_index_i_i_i_reg_240;
    end
end

always @ (*) begin
    if (((tmp_15_i_i_i_reg_976 == 1'd1) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_ii_i_i_i_phi_fu_301_p4 = ii_2_reg_1019;
    end else begin
        ap_phi_mux_ii_i_i_i_phi_fu_301_p4 = ii_i_i_i_reg_297;
    end
end

always @ (*) begin
    if (((1'd1 == ap_reg_pp0_iter2_tmp_15_i_i_i_reg_976) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        ap_phi_mux_ii_index_i_i_i_phi_fu_256_p4 = ii_index_2_reg_1049;
    end else begin
        ap_phi_mux_ii_index_i_i_i_phi_fu_256_p4 = ii_index_i_i_i_reg_252;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_out_r_AWREADY)) begin
        ap_sig_ioackin_m_axi_out_r_AWREADY = m_axi_out_r_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_out_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_out_r_WREADY)) begin
        ap_sig_ioackin_m_axi_out_r_WREADY = m_axi_out_r_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_out_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_blk_n = col_empty_n;
    end else begin
        col_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_read = 1'b1;
    end else begin
        col_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_ch_blk_n = curr_layer_out_ch_empty_n;
    end else begin
        curr_layer_out_ch_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_ch_read = 1'b1;
    end else begin
        curr_layer_out_ch_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_h_blk_n = curr_layer_out_h_empty_n;
    end else begin
        curr_layer_out_h_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_h_read = 1'b1;
    end else begin
        curr_layer_out_h_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_w_blk_n = curr_layer_out_w_empty_n;
    end else begin
        curr_layer_out_w_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        curr_layer_out_w_read = 1'b1;
    end else begin
        curr_layer_out_w_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_aesl_mux_load_28_37_s_fu_308_ap_ce = 1'b1;
    end else begin
        grp_aesl_mux_load_28_37_s_fu_308_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_01001 == 1'b0) & (ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 == 1'd1) & (1'b0 == ap_reg_ioackin_m_axi_out_r_AWREADY) & (1'b1 == ap_enable_reg_pp0_iter8))) begin
        m_axi_out_r_AWVALID = 1'b1;
    end else begin
        m_axi_out_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_11001 == 1'b0) & (1'd1 == ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) & (1'b1 == ap_enable_reg_pp0_iter14))) begin
        m_axi_out_r_BREADY = 1'b1;
    end else begin
        m_axi_out_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_01001 == 1'b0) & (1'd1 == ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976) & (1'b0 == ap_reg_ioackin_m_axi_out_r_WREADY) & (1'b1 == ap_enable_reg_pp0_iter9))) begin
        m_axi_out_r_WVALID = 1'b1;
    end else begin
        m_axi_out_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_offset_blk_n = out_offset_empty_n;
    end else begin
        out_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_offset_read = 1'b1;
    end else begin
        out_offset_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 == 1'd1) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter8))) begin
        out_r_blk_n_AW = m_axi_out_r_AWREADY;
    end else begin
        out_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14))) begin
        out_r_blk_n_B = m_axi_out_r_BVALID;
    end else begin
        out_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'd1 == ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976) & (ap_block_pp0_stage0 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9))) begin
        out_r_blk_n_W = m_axi_out_r_WREADY;
    end else begin
        out_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_offset_blk_n = output_offset_empty_n;
    end else begin
        output_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_offset_read = 1'b1;
    end else begin
        output_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        quantized_multiplier_blk_n = quantized_multiplier_empty_n;
    end else begin
        quantized_multiplier_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        quantized_multiplier_read = 1'b1;
    end else begin
        quantized_multiplier_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        right_shift_blk_n = right_shift_empty_n;
    end else begin
        right_shift_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        right_shift_read = 1'b1;
    end else begin
        right_shift_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_blk_n = row_empty_n;
    end else begin
        row_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_read = 1'b1;
    end else begin
        row_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == ap_start) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        to_r_blk_n = to_r_empty_n;
    end else begin
        to_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        to_r_read = 1'b1;
    end else begin
        to_r_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'd0 == tmp_15_i_i_i_fu_515_p2) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) & ~((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'd0 == tmp_15_i_i_i_fu_515_p2) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_block_pp0_stage0_subdone == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter14)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ab_64_fu_695_p0 = tmp6_i_reg_1059;

assign ab_64_fu_695_p1 = b_64_i_cast_i_i_i_reg_961;

assign ab_64_fu_695_p2 = ($signed(ab_64_fu_695_p0) * $signed(ab_64_fu_695_p1));

assign ab_x2_high32_fu_757_p3 = ((tmp_23_fu_720_p3[0:0] === 1'b1) ? tmp_89_i_i_i_i_fu_742_p2 : tmp_90_i_i_i_i_fu_748_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'd1 == ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) & (1'b0 == m_axi_out_r_BVALID) & (1'b1 == ap_enable_reg_pp0_iter14));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'd1 == ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) & (1'b0 == m_axi_out_r_BVALID) & (1'b1 == ap_enable_reg_pp0_iter14)) | ((1'b1 == ap_block_state14_io) & (1'b1 == ap_enable_reg_pp0_iter9)) | ((1'b1 == ap_block_state13_io) & (1'b1 == ap_enable_reg_pp0_iter8)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'd1 == ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) & (1'b0 == m_axi_out_r_BVALID) & (1'b1 == ap_enable_reg_pp0_iter14)) | ((1'b1 == ap_block_state14_io) & (1'b1 == ap_enable_reg_pp0_iter9)) | ((1'b1 == ap_block_state13_io) & (1'b1 == ap_enable_reg_pp0_iter8)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == out_offset_empty_n) | (1'b0 == curr_layer_out_ch_empty_n) | (1'b0 == curr_layer_out_h_empty_n) | (1'b0 == curr_layer_out_w_empty_n) | (1'b0 == right_shift_empty_n) | (1'b0 == quantized_multiplier_empty_n) | (1'b0 == output_offset_empty_n) | (1'b0 == ap_start) | (1'b0 == col_empty_n) | (1'b0 == row_empty_n) | (1'b0 == to_r_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((ap_reg_pp0_iter7_tmp_15_i_i_i_reg_976 == 1'd1) & (1'b0 == ap_sig_ioackin_m_axi_out_r_AWREADY));
end

assign ap_block_state13_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((1'd1 == ap_reg_pp0_iter8_tmp_15_i_i_i_reg_976) & (1'b0 == ap_sig_ioackin_m_axi_out_r_WREADY));
end

assign ap_block_state14_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp0_stage0_iter14 = ((1'd1 == ap_reg_pp0_iter13_tmp_15_i_i_i_reg_976) & (1'b0 == m_axi_out_r_BVALID));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_64_i_cast_i_i_i_fu_496_p1 = $signed(quantized_multiplier_2_reg_888);

assign grp_aesl_mux_load_28_37_s_fu_308_ap_start = ap_reg_grp_aesl_mux_load_28_37_s_fu_308_ap_start;

assign i_2_i_i_i_fu_562_p3 = ((tmp_16_i_i_i_fu_526_p2[0:0] === 1'b1) ? sel_tmp9_i_fu_554_p3 : ap_phi_mux_i_i_i_i_phi_fu_279_p4);

assign i_fu_531_p2 = (32'd1 + ap_phi_mux_i_i_i_i_phi_fu_279_p4);

assign i_index_2_i_i_i_fu_625_p3 = ((ap_reg_pp0_iter1_tmp_16_i_i_i_reg_985[0:0] === 1'b1) ? sel_tmp1_i_fu_618_p3 : ap_phi_mux_i_index_i_i_i_phi_fu_244_p4);

assign i_index_fu_612_p1 = tmp_17_i_i_i_reg_1034[15:0];

assign ii_1_fu_578_p3 = ((sel_tmp_i_fu_548_p2[0:0] === 1'b1) ? ii_fu_542_p2 : ap_phi_mux_ii_i_i_i_phi_fu_301_p4);

assign ii_2_fu_586_p3 = ((tmp_16_i_i_i_fu_526_p2[0:0] === 1'b1) ? ii_1_fu_578_p3 : ap_phi_mux_ii_i_i_i_phi_fu_301_p4);

assign ii_fu_542_p2 = (32'd1 + ap_phi_mux_ii_i_i_i_phi_fu_301_p4);

assign ii_index_1_fu_632_p3 = ((ap_reg_pp0_iter1_sel_tmp_i_reg_1001[0:0] === 1'b1) ? ii_index_fu_615_p1 : ap_phi_mux_ii_index_i_i_i_phi_fu_256_p4);

assign ii_index_2_fu_639_p3 = ((ap_reg_pp0_iter1_tmp_16_i_i_i_reg_985[0:0] === 1'b1) ? ii_index_1_fu_632_p3 : ap_phi_mux_ii_index_i_i_i_phi_fu_256_p4);

assign ii_index_fu_615_p1 = tmp_19_i_i_i_reg_1039[15:0];

assign itr_i_fu_520_p2 = (itr_i_i_i_reg_264 + 31'd1);

assign itr_i_i_cast_i_fu_511_p1 = itr_i_i_i_reg_264;

assign j_2_i_i_i_fu_570_p3 = ((tmp_16_i_i_i_fu_526_p2[0:0] === 1'b1) ? 32'd0 : j_i_i_i_reg_286);

assign j_fu_598_p2 = (32'd1 + j_2_i_i_i_fu_570_p3);

assign m_axi_out_r_ARADDR = 32'd0;

assign m_axi_out_r_ARBURST = 2'd0;

assign m_axi_out_r_ARCACHE = 4'd0;

assign m_axi_out_r_ARID = 1'd0;

assign m_axi_out_r_ARLEN = 32'd0;

assign m_axi_out_r_ARLOCK = 2'd0;

assign m_axi_out_r_ARPROT = 3'd0;

assign m_axi_out_r_ARQOS = 4'd0;

assign m_axi_out_r_ARREGION = 4'd0;

assign m_axi_out_r_ARSIZE = 3'd0;

assign m_axi_out_r_ARUSER = 1'd0;

assign m_axi_out_r_ARVALID = 1'b0;

assign m_axi_out_r_AWADDR = ap_reg_pp0_iter7_out_addr_reg_1064;

assign m_axi_out_r_AWBURST = 2'd0;

assign m_axi_out_r_AWCACHE = 4'd0;

assign m_axi_out_r_AWID = 1'd0;

assign m_axi_out_r_AWLEN = 32'd1;

assign m_axi_out_r_AWLOCK = 2'd0;

assign m_axi_out_r_AWPROT = 3'd0;

assign m_axi_out_r_AWQOS = 4'd0;

assign m_axi_out_r_AWREGION = 4'd0;

assign m_axi_out_r_AWSIZE = 3'd0;

assign m_axi_out_r_AWUSER = 1'd0;

assign m_axi_out_r_RREADY = 1'b0;

assign m_axi_out_r_WDATA = tmp_28_i_i_i_reg_1098;

assign m_axi_out_r_WID = 1'd0;

assign m_axi_out_r_WLAST = 1'b0;

assign m_axi_out_r_WSTRB = 1'd1;

assign m_axi_out_r_WUSER = 1'd0;

assign n_cols_1_fu_480_p3 = ((tmp_8_i_i_i_fu_471_p2[0:0] === 1'b1) ? tmp_9_i_i_i_fu_476_p2 : n_cols_fu_460_p3);

assign n_cols_fu_460_p3 = ((tmp_2_i_i_i_reg_919[0:0] === 1'b1) ? 32'd27 : curr_layer_out_w_rea_reg_836);

assign n_depth_o_1_fu_444_p3 = ((tmp_11_i_i_i_fu_435_p2[0:0] === 1'b1) ? tmp_12_i_i_i_fu_440_p2 : n_depth_o_fu_402_p3);

assign n_depth_o_fu_402_p3 = ((tmp_3_i_i_i_reg_903[0:0] === 1'b1) ? 32'd28 : curr_layer_out_ch_re_reg_855);

assign n_rows_1_fu_422_p3 = ((tmp_5_i_i_i_fu_413_p2[0:0] === 1'b1) ? tmp_6_i_i_i_fu_418_p2 : n_rows_fu_391_p3);

assign n_rows_fu_391_p3 = ((tmp_1_i_i_i_reg_898[0:0] === 1'b1) ? 32'd37 : curr_layer_out_h_rea_reg_847);

assign or_cond_i_i_i_fu_812_p2 = (tmp_25_fu_804_p3 & p_not_i_i_i_fu_798_p2);

assign out_size_fu_387_p2 = ($signed(curr_layer_out_w_rea_reg_836) * $signed(curr_layer_out_h_rea_reg_847));

assign outputfm_0_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_address0;

assign outputfm_0_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_0_ce0;

assign outputfm_10_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_address0;

assign outputfm_10_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_10_ce0;

assign outputfm_11_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_address0;

assign outputfm_11_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_11_ce0;

assign outputfm_12_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_address0;

assign outputfm_12_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_12_ce0;

assign outputfm_13_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_address0;

assign outputfm_13_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_13_ce0;

assign outputfm_14_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_address0;

assign outputfm_14_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_14_ce0;

assign outputfm_15_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_address0;

assign outputfm_15_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_15_ce0;

assign outputfm_16_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_address0;

assign outputfm_16_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_16_ce0;

assign outputfm_17_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_address0;

assign outputfm_17_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_17_ce0;

assign outputfm_18_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_address0;

assign outputfm_18_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_18_ce0;

assign outputfm_19_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_address0;

assign outputfm_19_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_19_ce0;

assign outputfm_1_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_address0;

assign outputfm_1_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_1_ce0;

assign outputfm_20_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_address0;

assign outputfm_20_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_20_ce0;

assign outputfm_21_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_address0;

assign outputfm_21_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_21_ce0;

assign outputfm_22_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_address0;

assign outputfm_22_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_22_ce0;

assign outputfm_23_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_address0;

assign outputfm_23_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_23_ce0;

assign outputfm_24_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_address0;

assign outputfm_24_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_24_ce0;

assign outputfm_25_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_address0;

assign outputfm_25_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_25_ce0;

assign outputfm_26_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_address0;

assign outputfm_26_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_26_ce0;

assign outputfm_27_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_address0;

assign outputfm_27_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_27_ce0;

assign outputfm_2_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_address0;

assign outputfm_2_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_2_ce0;

assign outputfm_3_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_address0;

assign outputfm_3_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_3_ce0;

assign outputfm_4_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_address0;

assign outputfm_4_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_4_ce0;

assign outputfm_5_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_address0;

assign outputfm_5_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_5_ce0;

assign outputfm_6_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_address0;

assign outputfm_6_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_6_ce0;

assign outputfm_7_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_address0;

assign outputfm_7_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_7_ce0;

assign outputfm_8_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_address0;

assign outputfm_8_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_8_ce0;

assign outputfm_9_address0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_address0;

assign outputfm_9_ce0 = grp_aesl_mux_load_28_37_s_fu_308_outputfm_9_ce0;

assign p_neg_i_i_i_i_fu_727_p2 = (59'd0 - tmp_124_i_i_i_i_reg_1076);

assign p_not_i_i_i_fu_798_p2 = (tmp_27_i_i_i_fu_792_p2 ^ 1'd1);

assign phitmp1_i_i_i_fu_783_p2 = (tmp_24_fu_779_p1 + tmp_reg_908);

assign sel_tmp1_i_fu_618_p3 = ((ap_reg_pp0_iter1_sel_tmp_i_reg_1001[0:0] === 1'b1) ? 16'd0 : i_index_fu_612_p1);

assign sel_tmp9_i_fu_554_p3 = ((sel_tmp_i_fu_548_p2[0:0] === 1'b1) ? 32'd0 : i_fu_531_p2);

assign sel_tmp_i_fu_548_p2 = (tmp_18_i_i_i_fu_537_p2 & tmp_16_i_i_i_fu_526_p2);

assign sext_cast_i_fu_508_p1 = $signed(out_offset_read_reg_831);

assign sum_cast_i_fu_682_p1 = $signed(sum_i_fu_677_p2);

assign sum_i_fu_677_p2 = ($signed(tmp_35_i_i_cast_i_fu_674_p1) + $signed(sext_cast_i_reg_971));

assign tmp1_i_fu_488_p2 = ($signed(n_depth_o_1_reg_930) * $signed(n_rows_1_reg_924));

assign tmp2_i_fu_503_p2 = (tmp3_i_fu_499_p2 + col_read_reg_876);

assign tmp3_i_fu_499_p2 = (tmp_i_i_i_17_reg_940 + tmp_i_i_i_reg_935);

assign tmp4_i_fu_664_p2 = (ap_reg_pp0_iter1_j_2_i_i_i_reg_1013 + tmp5_cast_i_fu_660_p1);

assign tmp5_cast_i_fu_660_p1 = tmp5_i_fu_654_p2;

assign tmp5_i_fu_654_p2 = (tmp_29_i_i_cast_i_fu_646_p1 + tmp_30_i_i_cast_i_fu_650_p1);

assign tmp_10_i_i_i_fu_430_p2 = ($signed(n_depth_o_fu_402_p3) + $signed(to_read_reg_862));

assign tmp_11_i_i_i_fu_435_p2 = (($signed(tmp_10_i_i_i_fu_430_p2) > $signed(curr_layer_out_ch_re_reg_855)) ? 1'b1 : 1'b0);

assign tmp_123_i_cast_i_i_c_fu_707_p3 = ((tmp_22_fu_700_p3[0:0] === 1'b1) ? 59'd576460752303390721 : 59'd32768);

assign tmp_124_i_i_i_i_fu_715_p2 = (ab_64_reg_1070 + tmp_123_i_cast_i_i_c_fu_707_p3);

assign tmp_12_i_i_i_fu_440_p2 = ($signed(curr_layer_out_ch_re_reg_855) - $signed(to_read_reg_862));

assign tmp_14_i_i_i_fu_492_p2 = ($signed(n_cols_1_reg_945) * $signed(tmp1_i_reg_951));

assign tmp_15_i_i_i_fu_515_p2 = (($signed(itr_i_i_cast_i_fu_511_p1) < $signed(tmp_14_i_i_i_reg_956)) ? 1'b1 : 1'b0);

assign tmp_16_i_i_i_fu_526_p2 = ((j_i_i_i_reg_286 == n_cols_1_reg_945) ? 1'b1 : 1'b0);

assign tmp_17_i_i_i_fu_604_p2 = ($signed(i_reg_991) * $signed(curr_layer_out_w_rea_reg_836));

assign tmp_18_i_i_i_fu_537_p2 = ((i_fu_531_p2 == n_rows_1_reg_924) ? 1'b1 : 1'b0);

assign tmp_19_i_i_i_fu_608_p2 = ($signed(out_size_reg_913) * $signed(ii_reg_996));

assign tmp_1_i_i_i_fu_371_p0 = curr_layer_out_h_dout;

assign tmp_1_i_i_i_fu_371_p2 = (($signed(tmp_1_i_i_i_fu_371_p0) > $signed(32'd37)) ? 1'b1 : 1'b0);

assign tmp_21_fu_594_p1 = ii_2_fu_586_p3[4:0];

assign tmp_22_fu_700_p3 = ab_64_reg_1070[32'd58];

assign tmp_23_fu_720_p3 = tmp_124_i_i_i_i_reg_1076[32'd58];

assign tmp_24_fu_779_p1 = tmp_25_i_i_i_fu_775_p2[7:0];

assign tmp_24_i_i_i_fu_769_p2 = (ab_x2_high32_fu_757_p3 + rounding);

assign tmp_25_fu_804_p3 = tmp_26_i_i_i_fu_788_p2[32'd31];

assign tmp_25_i_i_i_fu_775_p2 = $signed(tmp_24_i_i_i_reg_1083) >>> right_shift_read_reg_893;

assign tmp_26_i_i_i_fu_788_p2 = (tmp_25_i_i_i_reg_1088 + output_offset_read_reg_883);

assign tmp_27_i_i_i_fu_792_p2 = (($signed(tmp_26_i_i_i_fu_788_p2) > $signed(32'd256)) ? 1'b1 : 1'b0);

assign tmp_28_i_i_i_fu_824_p3 = ((tmp_6_i_fu_818_p2[0:0] === 1'b1) ? 8'd0 : phitmp1_i_i_i_reg_1093);

assign tmp_29_i_i_cast_i_fu_646_p1 = ii_index_2_fu_639_p3;

assign tmp_2_i_i_i_fu_397_p2 = (($signed(curr_layer_out_w_rea_reg_836) > $signed(32'd27)) ? 1'b1 : 1'b0);

assign tmp_30_i_i_cast_i_fu_650_p1 = i_index_2_i_i_i_fu_625_p3;

assign tmp_34_i_i_i_fu_669_p2 = (tmp2_i_reg_966 + tmp4_i_fu_664_p2);

assign tmp_35_i_i_cast_i_fu_674_p1 = $signed(tmp_34_i_i_i_reg_1054);

assign tmp_3_i_i_i_fu_377_p2 = (($signed(curr_layer_out_ch_dout) > $signed(32'd28)) ? 1'b1 : 1'b0);

assign tmp_4_i_i_i_fu_408_p2 = ($signed(n_rows_fu_391_p3) + $signed(row_read_reg_869));

assign tmp_5_i_i_i_fu_413_p2 = (($signed(tmp_4_i_i_i_fu_408_p2) > $signed(curr_layer_out_h_rea_reg_847)) ? 1'b1 : 1'b0);

assign tmp_6_i_fu_818_p2 = (tmp_27_i_i_i_fu_792_p2 | or_cond_i_i_i_fu_812_p2);

assign tmp_6_i_i_i_fu_418_p2 = ($signed(curr_layer_out_h_rea_reg_847) - $signed(row_read_reg_869));

assign tmp_7_i_i_i_fu_466_p2 = (n_cols_fu_460_p3 + col_read_reg_876);

assign tmp_88_i_i_i_i_fu_732_p4 = {{p_neg_i_i_i_i_fu_727_p2[47:16]}};

assign tmp_89_i_i_i_i_fu_742_p2 = (32'd0 - tmp_88_i_i_i_i_fu_732_p4);

assign tmp_8_i_i_i_fu_471_p2 = (($signed(tmp_7_i_i_i_fu_466_p2) > $signed(curr_layer_out_w_rea_reg_836)) ? 1'b1 : 1'b0);

assign tmp_90_i_i_i_i_fu_748_p4 = {{tmp_124_i_i_i_i_reg_1076[47:16]}};

assign tmp_9_i_i_i_fu_476_p2 = ($signed(curr_layer_out_w_rea_reg_836) - $signed(col_read_reg_876));

assign tmp_fu_383_p1 = output_offset_dout[7:0];

assign tmp_i_i_i_17_fu_456_p2 = ($signed(row_read_reg_869) * $signed(curr_layer_out_w_rea_reg_836));

assign tmp_i_i_i_fu_452_p2 = ($signed(out_size_reg_913) * $signed(to_read_reg_862));

endmodule //write_output
