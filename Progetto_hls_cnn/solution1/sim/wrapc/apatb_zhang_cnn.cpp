// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->
    typedef struct {
        int n_layer;
        int in_w;
        int in_h;
        int out_w;
        int out_h;
        int in_ch;
        int out_ch;
        int ker_w;
        int ker_h;
        int ker_ch;
        int str_w;
        int str_h;
        int pad_w;
        int pad_h;
        int relu;
        int has_bias;
        typedef enum {AESL_AUTO_0} activation_t;

#ifdef AUTOCC
char
#else
activation_t
#endif
 act_type;
       } layer_config;

extern int rounding;



// [dump_enumeration [get_enumeration_list]] ---------->
typedef enum {AESL_AUTO_1} activation_t;


// wrapc file define: "gmem"
#define AUTOTB_TVIN_gmem  "../tv/cdatafile/c.zhang_cnn.autotvin_gmem.dat"
#define AUTOTB_TVOUT_gmem  "../tv/cdatafile/c.zhang_cnn.autotvout_gmem.dat"
// wrapc file define: "image_r"
#define AUTOTB_TVIN_image_r  "../tv/cdatafile/c.zhang_cnn.autotvin_image_r.dat"
// wrapc file define: "weights"
#define AUTOTB_TVIN_weights  "../tv/cdatafile/c.zhang_cnn.autotvin_weights.dat"
// wrapc file define: "out_r"
#define AUTOTB_TVIN_out_r  "../tv/cdatafile/c.zhang_cnn.autotvin_out_r.dat"
// wrapc file define: "curr_layer_in_in_w"
#define AUTOTB_TVIN_curr_layer_in_in_w  "../tv/cdatafile/c.zhang_cnn.autotvin_curr_layer_in_in_w.dat"
// wrapc file define: "curr_layer_in_in_h"
#define AUTOTB_TVIN_curr_layer_in_in_h  "../tv/cdatafile/c.zhang_cnn.autotvin_curr_layer_in_in_h.dat"
// wrapc file define: "curr_layer_in_out_w"
#define AUTOTB_TVIN_curr_layer_in_out_w  "../tv/cdatafile/c.zhang_cnn.autotvin_curr_layer_in_out_w.dat"
// wrapc file define: "curr_layer_in_out_h"
#define AUTOTB_TVIN_curr_layer_in_out_h  "../tv/cdatafile/c.zhang_cnn.autotvin_curr_layer_in_out_h.dat"
// wrapc file define: "curr_layer_in_in_ch"
#define AUTOTB_TVIN_curr_layer_in_in_ch  "../tv/cdatafile/c.zhang_cnn.autotvin_curr_layer_in_in_ch.dat"
// wrapc file define: "curr_layer_in_out_ch"
#define AUTOTB_TVIN_curr_layer_in_out_ch  "../tv/cdatafile/c.zhang_cnn.autotvin_curr_layer_in_out_ch.dat"
// wrapc file define: "curr_layer_in_ker_w"
#define AUTOTB_TVIN_curr_layer_in_ker_w  "../tv/cdatafile/c.zhang_cnn.autotvin_curr_layer_in_ker_w.dat"
// wrapc file define: "curr_layer_in_ker_h"
#define AUTOTB_TVIN_curr_layer_in_ker_h  "../tv/cdatafile/c.zhang_cnn.autotvin_curr_layer_in_ker_h.dat"
// wrapc file define: "curr_layer_in_str_w"
#define AUTOTB_TVIN_curr_layer_in_str_w  "../tv/cdatafile/c.zhang_cnn.autotvin_curr_layer_in_str_w.dat"
// wrapc file define: "curr_layer_in_str_h"
#define AUTOTB_TVIN_curr_layer_in_str_h  "../tv/cdatafile/c.zhang_cnn.autotvin_curr_layer_in_str_h.dat"
// wrapc file define: "input_offset"
#define AUTOTB_TVIN_input_offset  "../tv/cdatafile/c.zhang_cnn.autotvin_input_offset.dat"
// wrapc file define: "weights_offset"
#define AUTOTB_TVIN_weights_offset  "../tv/cdatafile/c.zhang_cnn.autotvin_weights_offset.dat"
// wrapc file define: "output_offset"
#define AUTOTB_TVIN_output_offset  "../tv/cdatafile/c.zhang_cnn.autotvin_output_offset.dat"
// wrapc file define: "quantized_multiplier"
#define AUTOTB_TVIN_quantized_multiplier  "../tv/cdatafile/c.zhang_cnn.autotvin_quantized_multiplier.dat"
// wrapc file define: "right_shift"
#define AUTOTB_TVIN_right_shift  "../tv/cdatafile/c.zhang_cnn.autotvin_right_shift.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "gmem"
#define AUTOTB_TVOUT_PC_gmem  "../tv/rtldatafile/rtl.zhang_cnn.autotvout_gmem.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			gmem_depth = 0;
			image_r_depth = 0;
			weights_depth = 0;
			out_r_depth = 0;
			curr_layer_in_in_w_depth = 0;
			curr_layer_in_in_h_depth = 0;
			curr_layer_in_out_w_depth = 0;
			curr_layer_in_out_h_depth = 0;
			curr_layer_in_in_ch_depth = 0;
			curr_layer_in_out_ch_depth = 0;
			curr_layer_in_ker_w_depth = 0;
			curr_layer_in_ker_h_depth = 0;
			curr_layer_in_str_w_depth = 0;
			curr_layer_in_str_h_depth = 0;
			input_offset_depth = 0;
			weights_offset_depth = 0;
			output_offset_depth = 0;
			quantized_multiplier_depth = 0;
			right_shift_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{gmem " << gmem_depth << "}\n";
			total_list << "{image_r " << image_r_depth << "}\n";
			total_list << "{weights " << weights_depth << "}\n";
			total_list << "{out_r " << out_r_depth << "}\n";
			total_list << "{curr_layer_in_in_w " << curr_layer_in_in_w_depth << "}\n";
			total_list << "{curr_layer_in_in_h " << curr_layer_in_in_h_depth << "}\n";
			total_list << "{curr_layer_in_out_w " << curr_layer_in_out_w_depth << "}\n";
			total_list << "{curr_layer_in_out_h " << curr_layer_in_out_h_depth << "}\n";
			total_list << "{curr_layer_in_in_ch " << curr_layer_in_in_ch_depth << "}\n";
			total_list << "{curr_layer_in_out_ch " << curr_layer_in_out_ch_depth << "}\n";
			total_list << "{curr_layer_in_ker_w " << curr_layer_in_ker_w_depth << "}\n";
			total_list << "{curr_layer_in_ker_h " << curr_layer_in_ker_h_depth << "}\n";
			total_list << "{curr_layer_in_str_w " << curr_layer_in_str_w_depth << "}\n";
			total_list << "{curr_layer_in_str_h " << curr_layer_in_str_h_depth << "}\n";
			total_list << "{input_offset " << input_offset_depth << "}\n";
			total_list << "{weights_offset " << weights_offset_depth << "}\n";
			total_list << "{output_offset " << output_offset_depth << "}\n";
			total_list << "{quantized_multiplier " << quantized_multiplier_depth << "}\n";
			total_list << "{right_shift " << right_shift_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int gmem_depth;
		int image_r_depth;
		int weights_depth;
		int out_r_depth;
		int curr_layer_in_in_w_depth;
		int curr_layer_in_in_h_depth;
		int curr_layer_in_out_w_depth;
		int curr_layer_in_out_h_depth;
		int curr_layer_in_in_ch_depth;
		int curr_layer_in_out_ch_depth;
		int curr_layer_in_ker_w_depth;
		int curr_layer_in_ker_h_depth;
		int curr_layer_in_str_w_depth;
		int curr_layer_in_str_h_depth;
		int input_offset_depth;
		int weights_offset_depth;
		int output_offset_depth;
		int quantized_multiplier_depth;
		int right_shift_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" void zhang_cnn (
char* image,
char* weights,
char* out,
layer_config curr_layer_in,
int input_offset,
int weights_offset,
int output_offset,
int quantized_multiplier,
int right_shift);

extern "C" void AESL_WRAP_zhang_cnn (
char* image,
char* weights,
char* out,
layer_config curr_layer_in,
int input_offset,
int weights_offset,
int output_offset,
int quantized_multiplier,
int right_shift)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "gmem"
		aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_token); // data

			sc_bv<8> *gmem_pc_buffer = new sc_bv<8>[307200];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'gmem', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'gmem', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					gmem_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_gmem))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: gmem
				{
					// bitslice(7, 0)
					// {
						// celement: image(7, 0)
						// {
							sc_lv<8>* image_lv0_0_102399_1 = new sc_lv<8>[307200];
						// }
						// celement: weights(7, 0)
						// {
							sc_lv<8>* weights_lv0_0_102399_1 = new sc_lv<8>[307200];
						// }
						// celement: out(7, 0)
						// {
							sc_lv<8>* out_lv0_0_102399_1 = new sc_lv<8>[307200];
						// }
					// }

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: image(7, 0)
						{
							// carray: (0) => (102399) @ (1)
							for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
							{
								hls_map_index++;
							}
						}
						// celement: weights(7, 0)
						{
							// carray: (0) => (102399) @ (1)
							for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
							{
								hls_map_index++;
							}
						}
						// celement: out(7, 0)
						{
							// carray: (0) => (102399) @ (1)
							for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
							{
								if (&(out[0]) != NULL) // check the null address if the c port is array or others
								{
									out_lv0_0_102399_1[hls_map_index].range(7, 0) = sc_bv<8>(gmem_pc_buffer[hls_map_index].range(7, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						int hls_map_index = 0;
						// celement: image(7, 0)
						{
							// carray: (0) => (102399) @ (1)
							for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : image[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : image[0]
								// output_left_conversion : image[i_0]
								// output_type_conversion : (image_lv0_0_102399_1[hls_map_index]).to_uint64()
								hls_map_index++;
							}
						}
						// celement: weights(7, 0)
						{
							// carray: (0) => (102399) @ (1)
							for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : weights[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : weights[0]
								// output_left_conversion : weights[i_0]
								// output_type_conversion : (weights_lv0_0_102399_1[hls_map_index]).to_uint64()
								hls_map_index++;
							}
						}
						// celement: out(7, 0)
						{
							// carray: (0) => (102399) @ (1)
							for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : out[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : out[0]
								// output_left_conversion : out[i_0]
								// output_type_conversion : (out_lv0_0_102399_1[hls_map_index]).to_uint64()
								if (&(out[0]) != NULL) // check the null address if the c port is array or others
								{
									out[i_0] = (out_lv0_0_102399_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] gmem_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "gmem"
		char* tvin_gmem = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_gmem);
		char* tvout_gmem = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_gmem);

		// "image_r"
		char* tvin_image_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_image_r);

		// "weights"
		char* tvin_weights = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_weights);

		// "out_r"
		char* tvin_out_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_out_r);

		// "curr_layer_in_in_w"
		char* tvin_curr_layer_in_in_w = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_curr_layer_in_in_w);

		// "curr_layer_in_in_h"
		char* tvin_curr_layer_in_in_h = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_curr_layer_in_in_h);

		// "curr_layer_in_out_w"
		char* tvin_curr_layer_in_out_w = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_curr_layer_in_out_w);

		// "curr_layer_in_out_h"
		char* tvin_curr_layer_in_out_h = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_curr_layer_in_out_h);

		// "curr_layer_in_in_ch"
		char* tvin_curr_layer_in_in_ch = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_curr_layer_in_in_ch);

		// "curr_layer_in_out_ch"
		char* tvin_curr_layer_in_out_ch = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_curr_layer_in_out_ch);

		// "curr_layer_in_ker_w"
		char* tvin_curr_layer_in_ker_w = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_curr_layer_in_ker_w);

		// "curr_layer_in_ker_h"
		char* tvin_curr_layer_in_ker_h = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_curr_layer_in_ker_h);

		// "curr_layer_in_str_w"
		char* tvin_curr_layer_in_str_w = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_curr_layer_in_str_w);

		// "curr_layer_in_str_h"
		char* tvin_curr_layer_in_str_h = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_curr_layer_in_str_h);

		// "input_offset"
		char* tvin_input_offset = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_offset);

		// "weights_offset"
		char* tvin_weights_offset = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_weights_offset);

		// "output_offset"
		char* tvin_output_offset = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_output_offset);

		// "quantized_multiplier"
		char* tvin_quantized_multiplier = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_quantized_multiplier);

		// "right_shift"
		char* tvin_right_shift = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_right_shift);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_gmem, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);

		sc_bv<8>* gmem_tvin_wrapc_buffer = new sc_bv<8>[307200];

		// RTL Name: gmem
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: image(7, 0)
				{
					// carray: (0) => (102399) @ (1)
					for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : image[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : image[0]
						// regulate_c_name       : image
						// input_type_conversion : image[i_0]
						if (&(image[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> image_tmp_mem;
							image_tmp_mem = image[i_0];
							gmem_tvin_wrapc_buffer[hls_map_index].range(7, 0) = image_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
				// celement: weights(7, 0)
				{
					// carray: (0) => (102399) @ (1)
					for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : weights[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : weights[0]
						// regulate_c_name       : weights
						// input_type_conversion : weights[i_0]
						if (&(weights[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> weights_tmp_mem;
							weights_tmp_mem = weights[i_0];
							gmem_tvin_wrapc_buffer[hls_map_index].range(7, 0) = weights_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
				// celement: out(7, 0)
				{
					// carray: (0) => (102399) @ (1)
					for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : out[0]
						// regulate_c_name       : out
						// input_type_conversion : out[i_0]
						if (&(out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> out_tmp_mem;
							out_tmp_mem = out[i_0];
							gmem_tvin_wrapc_buffer[hls_map_index].range(7, 0) = out_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 307200; i++)
		{
			sprintf(tvin_gmem, "%s\n", (gmem_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);
		}

		tcl_file.set_num(307200, &tcl_file.gmem_depth);
		sprintf(tvin_gmem, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);

		// release memory allocation
		delete [] gmem_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_image_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_image_r, tvin_image_r);

		sc_bv<32> image_r_tvin_wrapc_buffer;

		// RTL Name: image_r
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_image_r, "%s\n", (image_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_image_r, tvin_image_r);
		}

		tcl_file.set_num(1, &tcl_file.image_r_depth);
		sprintf(tvin_image_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_image_r, tvin_image_r);

		// [[transaction]]
		sprintf(tvin_weights, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_weights, tvin_weights);

		sc_bv<32> weights_tvin_wrapc_buffer;

		// RTL Name: weights
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_weights, "%s\n", (weights_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_weights, tvin_weights);
		}

		tcl_file.set_num(1, &tcl_file.weights_depth);
		sprintf(tvin_weights, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_weights, tvin_weights);

		// [[transaction]]
		sprintf(tvin_out_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_out_r, tvin_out_r);

		sc_bv<32> out_r_tvin_wrapc_buffer;

		// RTL Name: out_r
		{
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_out_r, "%s\n", (out_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_out_r, tvin_out_r);
		}

		tcl_file.set_num(1, &tcl_file.out_r_depth);
		sprintf(tvin_out_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_out_r, tvin_out_r);

		// [[transaction]]
		sprintf(tvin_curr_layer_in_in_w, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_in_w, tvin_curr_layer_in_in_w);

		sc_bv<32> curr_layer_in_in_w_tvin_wrapc_buffer;

		// RTL Name: curr_layer_in_in_w
		{
			// bitslice(31, 0)
			{
				// celement: curr_layer_in.in_w(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : curr_layer_in.in_w
						// sub_1st_elem          : 
						// ori_name_1st_elem     : curr_layer_in.in_w
						// regulate_c_name       : curr_layer_in_in_w
						// input_type_conversion : curr_layer_in.in_w
						if (&(curr_layer_in.in_w) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> curr_layer_in_in_w_tmp_mem;
							curr_layer_in_in_w_tmp_mem = curr_layer_in.in_w;
							curr_layer_in_in_w_tvin_wrapc_buffer.range(31, 0) = curr_layer_in_in_w_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_curr_layer_in_in_w, "%s\n", (curr_layer_in_in_w_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_curr_layer_in_in_w, tvin_curr_layer_in_in_w);
		}

		tcl_file.set_num(1, &tcl_file.curr_layer_in_in_w_depth);
		sprintf(tvin_curr_layer_in_in_w, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_in_w, tvin_curr_layer_in_in_w);

		// [[transaction]]
		sprintf(tvin_curr_layer_in_in_h, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_in_h, tvin_curr_layer_in_in_h);

		sc_bv<32> curr_layer_in_in_h_tvin_wrapc_buffer;

		// RTL Name: curr_layer_in_in_h
		{
			// bitslice(31, 0)
			{
				// celement: curr_layer_in.in_h(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : curr_layer_in.in_h
						// sub_1st_elem          : 
						// ori_name_1st_elem     : curr_layer_in.in_h
						// regulate_c_name       : curr_layer_in_in_h
						// input_type_conversion : curr_layer_in.in_h
						if (&(curr_layer_in.in_h) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> curr_layer_in_in_h_tmp_mem;
							curr_layer_in_in_h_tmp_mem = curr_layer_in.in_h;
							curr_layer_in_in_h_tvin_wrapc_buffer.range(31, 0) = curr_layer_in_in_h_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_curr_layer_in_in_h, "%s\n", (curr_layer_in_in_h_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_curr_layer_in_in_h, tvin_curr_layer_in_in_h);
		}

		tcl_file.set_num(1, &tcl_file.curr_layer_in_in_h_depth);
		sprintf(tvin_curr_layer_in_in_h, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_in_h, tvin_curr_layer_in_in_h);

		// [[transaction]]
		sprintf(tvin_curr_layer_in_out_w, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_out_w, tvin_curr_layer_in_out_w);

		sc_bv<32> curr_layer_in_out_w_tvin_wrapc_buffer;

		// RTL Name: curr_layer_in_out_w
		{
			// bitslice(31, 0)
			{
				// celement: curr_layer_in.out_w(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : curr_layer_in.out_w
						// sub_1st_elem          : 
						// ori_name_1st_elem     : curr_layer_in.out_w
						// regulate_c_name       : curr_layer_in_out_w
						// input_type_conversion : curr_layer_in.out_w
						if (&(curr_layer_in.out_w) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> curr_layer_in_out_w_tmp_mem;
							curr_layer_in_out_w_tmp_mem = curr_layer_in.out_w;
							curr_layer_in_out_w_tvin_wrapc_buffer.range(31, 0) = curr_layer_in_out_w_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_curr_layer_in_out_w, "%s\n", (curr_layer_in_out_w_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_curr_layer_in_out_w, tvin_curr_layer_in_out_w);
		}

		tcl_file.set_num(1, &tcl_file.curr_layer_in_out_w_depth);
		sprintf(tvin_curr_layer_in_out_w, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_out_w, tvin_curr_layer_in_out_w);

		// [[transaction]]
		sprintf(tvin_curr_layer_in_out_h, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_out_h, tvin_curr_layer_in_out_h);

		sc_bv<32> curr_layer_in_out_h_tvin_wrapc_buffer;

		// RTL Name: curr_layer_in_out_h
		{
			// bitslice(31, 0)
			{
				// celement: curr_layer_in.out_h(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : curr_layer_in.out_h
						// sub_1st_elem          : 
						// ori_name_1st_elem     : curr_layer_in.out_h
						// regulate_c_name       : curr_layer_in_out_h
						// input_type_conversion : curr_layer_in.out_h
						if (&(curr_layer_in.out_h) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> curr_layer_in_out_h_tmp_mem;
							curr_layer_in_out_h_tmp_mem = curr_layer_in.out_h;
							curr_layer_in_out_h_tvin_wrapc_buffer.range(31, 0) = curr_layer_in_out_h_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_curr_layer_in_out_h, "%s\n", (curr_layer_in_out_h_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_curr_layer_in_out_h, tvin_curr_layer_in_out_h);
		}

		tcl_file.set_num(1, &tcl_file.curr_layer_in_out_h_depth);
		sprintf(tvin_curr_layer_in_out_h, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_out_h, tvin_curr_layer_in_out_h);

		// [[transaction]]
		sprintf(tvin_curr_layer_in_in_ch, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_in_ch, tvin_curr_layer_in_in_ch);

		sc_bv<32> curr_layer_in_in_ch_tvin_wrapc_buffer;

		// RTL Name: curr_layer_in_in_ch
		{
			// bitslice(31, 0)
			{
				// celement: curr_layer_in.in_ch(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : curr_layer_in.in_ch
						// sub_1st_elem          : 
						// ori_name_1st_elem     : curr_layer_in.in_ch
						// regulate_c_name       : curr_layer_in_in_ch
						// input_type_conversion : curr_layer_in.in_ch
						if (&(curr_layer_in.in_ch) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> curr_layer_in_in_ch_tmp_mem;
							curr_layer_in_in_ch_tmp_mem = curr_layer_in.in_ch;
							curr_layer_in_in_ch_tvin_wrapc_buffer.range(31, 0) = curr_layer_in_in_ch_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_curr_layer_in_in_ch, "%s\n", (curr_layer_in_in_ch_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_curr_layer_in_in_ch, tvin_curr_layer_in_in_ch);
		}

		tcl_file.set_num(1, &tcl_file.curr_layer_in_in_ch_depth);
		sprintf(tvin_curr_layer_in_in_ch, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_in_ch, tvin_curr_layer_in_in_ch);

		// [[transaction]]
		sprintf(tvin_curr_layer_in_out_ch, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_out_ch, tvin_curr_layer_in_out_ch);

		sc_bv<32> curr_layer_in_out_ch_tvin_wrapc_buffer;

		// RTL Name: curr_layer_in_out_ch
		{
			// bitslice(31, 0)
			{
				// celement: curr_layer_in.out_ch(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : curr_layer_in.out_ch
						// sub_1st_elem          : 
						// ori_name_1st_elem     : curr_layer_in.out_ch
						// regulate_c_name       : curr_layer_in_out_ch
						// input_type_conversion : curr_layer_in.out_ch
						if (&(curr_layer_in.out_ch) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> curr_layer_in_out_ch_tmp_mem;
							curr_layer_in_out_ch_tmp_mem = curr_layer_in.out_ch;
							curr_layer_in_out_ch_tvin_wrapc_buffer.range(31, 0) = curr_layer_in_out_ch_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_curr_layer_in_out_ch, "%s\n", (curr_layer_in_out_ch_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_curr_layer_in_out_ch, tvin_curr_layer_in_out_ch);
		}

		tcl_file.set_num(1, &tcl_file.curr_layer_in_out_ch_depth);
		sprintf(tvin_curr_layer_in_out_ch, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_out_ch, tvin_curr_layer_in_out_ch);

		// [[transaction]]
		sprintf(tvin_curr_layer_in_ker_w, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_ker_w, tvin_curr_layer_in_ker_w);

		sc_bv<32> curr_layer_in_ker_w_tvin_wrapc_buffer;

		// RTL Name: curr_layer_in_ker_w
		{
			// bitslice(31, 0)
			{
				// celement: curr_layer_in.ker_w(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : curr_layer_in.ker_w
						// sub_1st_elem          : 
						// ori_name_1st_elem     : curr_layer_in.ker_w
						// regulate_c_name       : curr_layer_in_ker_w
						// input_type_conversion : curr_layer_in.ker_w
						if (&(curr_layer_in.ker_w) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> curr_layer_in_ker_w_tmp_mem;
							curr_layer_in_ker_w_tmp_mem = curr_layer_in.ker_w;
							curr_layer_in_ker_w_tvin_wrapc_buffer.range(31, 0) = curr_layer_in_ker_w_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_curr_layer_in_ker_w, "%s\n", (curr_layer_in_ker_w_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_curr_layer_in_ker_w, tvin_curr_layer_in_ker_w);
		}

		tcl_file.set_num(1, &tcl_file.curr_layer_in_ker_w_depth);
		sprintf(tvin_curr_layer_in_ker_w, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_ker_w, tvin_curr_layer_in_ker_w);

		// [[transaction]]
		sprintf(tvin_curr_layer_in_ker_h, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_ker_h, tvin_curr_layer_in_ker_h);

		sc_bv<32> curr_layer_in_ker_h_tvin_wrapc_buffer;

		// RTL Name: curr_layer_in_ker_h
		{
			// bitslice(31, 0)
			{
				// celement: curr_layer_in.ker_h(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : curr_layer_in.ker_h
						// sub_1st_elem          : 
						// ori_name_1st_elem     : curr_layer_in.ker_h
						// regulate_c_name       : curr_layer_in_ker_h
						// input_type_conversion : curr_layer_in.ker_h
						if (&(curr_layer_in.ker_h) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> curr_layer_in_ker_h_tmp_mem;
							curr_layer_in_ker_h_tmp_mem = curr_layer_in.ker_h;
							curr_layer_in_ker_h_tvin_wrapc_buffer.range(31, 0) = curr_layer_in_ker_h_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_curr_layer_in_ker_h, "%s\n", (curr_layer_in_ker_h_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_curr_layer_in_ker_h, tvin_curr_layer_in_ker_h);
		}

		tcl_file.set_num(1, &tcl_file.curr_layer_in_ker_h_depth);
		sprintf(tvin_curr_layer_in_ker_h, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_ker_h, tvin_curr_layer_in_ker_h);

		// [[transaction]]
		sprintf(tvin_curr_layer_in_str_w, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_str_w, tvin_curr_layer_in_str_w);

		sc_bv<32> curr_layer_in_str_w_tvin_wrapc_buffer;

		// RTL Name: curr_layer_in_str_w
		{
			// bitslice(31, 0)
			{
				// celement: curr_layer_in.str_w(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : curr_layer_in.str_w
						// sub_1st_elem          : 
						// ori_name_1st_elem     : curr_layer_in.str_w
						// regulate_c_name       : curr_layer_in_str_w
						// input_type_conversion : curr_layer_in.str_w
						if (&(curr_layer_in.str_w) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> curr_layer_in_str_w_tmp_mem;
							curr_layer_in_str_w_tmp_mem = curr_layer_in.str_w;
							curr_layer_in_str_w_tvin_wrapc_buffer.range(31, 0) = curr_layer_in_str_w_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_curr_layer_in_str_w, "%s\n", (curr_layer_in_str_w_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_curr_layer_in_str_w, tvin_curr_layer_in_str_w);
		}

		tcl_file.set_num(1, &tcl_file.curr_layer_in_str_w_depth);
		sprintf(tvin_curr_layer_in_str_w, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_str_w, tvin_curr_layer_in_str_w);

		// [[transaction]]
		sprintf(tvin_curr_layer_in_str_h, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_str_h, tvin_curr_layer_in_str_h);

		sc_bv<32> curr_layer_in_str_h_tvin_wrapc_buffer;

		// RTL Name: curr_layer_in_str_h
		{
			// bitslice(31, 0)
			{
				// celement: curr_layer_in.str_h(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : curr_layer_in.str_h
						// sub_1st_elem          : 
						// ori_name_1st_elem     : curr_layer_in.str_h
						// regulate_c_name       : curr_layer_in_str_h
						// input_type_conversion : curr_layer_in.str_h
						if (&(curr_layer_in.str_h) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> curr_layer_in_str_h_tmp_mem;
							curr_layer_in_str_h_tmp_mem = curr_layer_in.str_h;
							curr_layer_in_str_h_tvin_wrapc_buffer.range(31, 0) = curr_layer_in_str_h_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_curr_layer_in_str_h, "%s\n", (curr_layer_in_str_h_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_curr_layer_in_str_h, tvin_curr_layer_in_str_h);
		}

		tcl_file.set_num(1, &tcl_file.curr_layer_in_str_h_depth);
		sprintf(tvin_curr_layer_in_str_h, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_curr_layer_in_str_h, tvin_curr_layer_in_str_h);

		// [[transaction]]
		sprintf(tvin_input_offset, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_offset, tvin_input_offset);

		sc_bv<32> input_offset_tvin_wrapc_buffer;

		// RTL Name: input_offset
		{
			// bitslice(31, 0)
			{
				// celement: input_offset(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : input_offset
						// sub_1st_elem          : 
						// ori_name_1st_elem     : input_offset
						// regulate_c_name       : input_offset
						// input_type_conversion : input_offset
						if (&(input_offset) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_offset_tmp_mem;
							input_offset_tmp_mem = input_offset;
							input_offset_tvin_wrapc_buffer.range(31, 0) = input_offset_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_input_offset, "%s\n", (input_offset_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_offset, tvin_input_offset);
		}

		tcl_file.set_num(1, &tcl_file.input_offset_depth);
		sprintf(tvin_input_offset, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_offset, tvin_input_offset);

		// [[transaction]]
		sprintf(tvin_weights_offset, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_weights_offset, tvin_weights_offset);

		sc_bv<32> weights_offset_tvin_wrapc_buffer;

		// RTL Name: weights_offset
		{
			// bitslice(31, 0)
			{
				// celement: weights_offset(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : weights_offset
						// sub_1st_elem          : 
						// ori_name_1st_elem     : weights_offset
						// regulate_c_name       : weights_offset
						// input_type_conversion : weights_offset
						if (&(weights_offset) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> weights_offset_tmp_mem;
							weights_offset_tmp_mem = weights_offset;
							weights_offset_tvin_wrapc_buffer.range(31, 0) = weights_offset_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_weights_offset, "%s\n", (weights_offset_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_weights_offset, tvin_weights_offset);
		}

		tcl_file.set_num(1, &tcl_file.weights_offset_depth);
		sprintf(tvin_weights_offset, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_weights_offset, tvin_weights_offset);

		// [[transaction]]
		sprintf(tvin_output_offset, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_output_offset, tvin_output_offset);

		sc_bv<32> output_offset_tvin_wrapc_buffer;

		// RTL Name: output_offset
		{
			// bitslice(31, 0)
			{
				// celement: output_offset(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : output_offset
						// sub_1st_elem          : 
						// ori_name_1st_elem     : output_offset
						// regulate_c_name       : output_offset
						// input_type_conversion : output_offset
						if (&(output_offset) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> output_offset_tmp_mem;
							output_offset_tmp_mem = output_offset;
							output_offset_tvin_wrapc_buffer.range(31, 0) = output_offset_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_output_offset, "%s\n", (output_offset_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_output_offset, tvin_output_offset);
		}

		tcl_file.set_num(1, &tcl_file.output_offset_depth);
		sprintf(tvin_output_offset, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_output_offset, tvin_output_offset);

		// [[transaction]]
		sprintf(tvin_quantized_multiplier, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_quantized_multiplier, tvin_quantized_multiplier);

		sc_bv<32> quantized_multiplier_tvin_wrapc_buffer;

		// RTL Name: quantized_multiplier
		{
			// bitslice(31, 0)
			{
				// celement: quantized_multiplier(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : quantized_multiplier
						// sub_1st_elem          : 
						// ori_name_1st_elem     : quantized_multiplier
						// regulate_c_name       : quantized_multiplier
						// input_type_conversion : quantized_multiplier
						if (&(quantized_multiplier) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> quantized_multiplier_tmp_mem;
							quantized_multiplier_tmp_mem = quantized_multiplier;
							quantized_multiplier_tvin_wrapc_buffer.range(31, 0) = quantized_multiplier_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_quantized_multiplier, "%s\n", (quantized_multiplier_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_quantized_multiplier, tvin_quantized_multiplier);
		}

		tcl_file.set_num(1, &tcl_file.quantized_multiplier_depth);
		sprintf(tvin_quantized_multiplier, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_quantized_multiplier, tvin_quantized_multiplier);

		// [[transaction]]
		sprintf(tvin_right_shift, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_right_shift, tvin_right_shift);

		sc_bv<32> right_shift_tvin_wrapc_buffer;

		// RTL Name: right_shift
		{
			// bitslice(31, 0)
			{
				// celement: right_shift(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : right_shift
						// sub_1st_elem          : 
						// ori_name_1st_elem     : right_shift
						// regulate_c_name       : right_shift
						// input_type_conversion : right_shift
						if (&(right_shift) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> right_shift_tmp_mem;
							right_shift_tmp_mem = right_shift;
							right_shift_tvin_wrapc_buffer.range(31, 0) = right_shift_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_right_shift, "%s\n", (right_shift_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_right_shift, tvin_right_shift);
		}

		tcl_file.set_num(1, &tcl_file.right_shift_depth);
		sprintf(tvin_right_shift, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_right_shift, tvin_right_shift);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		zhang_cnn(image, weights, out, curr_layer_in, input_offset, weights_offset, output_offset, quantized_multiplier, right_shift);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_gmem, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_gmem, tvout_gmem);

		sc_bv<8>* gmem_tvout_wrapc_buffer = new sc_bv<8>[307200];

		// RTL Name: gmem
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: image(7, 0)
				{
					// carray: (0) => (102399) @ (1)
					for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : image[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : image[0]
						// regulate_c_name       : image
						// input_type_conversion : image[i_0]
						if (&(image[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> image_tmp_mem;
							image_tmp_mem = image[i_0];
							gmem_tvout_wrapc_buffer[hls_map_index].range(7, 0) = image_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
				// celement: weights(7, 0)
				{
					// carray: (0) => (102399) @ (1)
					for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : weights[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : weights[0]
						// regulate_c_name       : weights
						// input_type_conversion : weights[i_0]
						if (&(weights[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> weights_tmp_mem;
							weights_tmp_mem = weights[i_0];
							gmem_tvout_wrapc_buffer[hls_map_index].range(7, 0) = weights_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
				// celement: out(7, 0)
				{
					// carray: (0) => (102399) @ (1)
					for (int i_0 = 0; i_0 <= 102399; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : out[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : out[0]
						// regulate_c_name       : out
						// input_type_conversion : out[i_0]
						if (&(out[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> out_tmp_mem;
							out_tmp_mem = out[i_0];
							gmem_tvout_wrapc_buffer[hls_map_index].range(7, 0) = out_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 307200; i++)
		{
			sprintf(tvout_gmem, "%s\n", (gmem_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_gmem, tvout_gmem);
		}

		tcl_file.set_num(307200, &tcl_file.gmem_depth);
		sprintf(tvout_gmem, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_gmem, tvout_gmem);

		// release memory allocation
		delete [] gmem_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "gmem"
		delete [] tvin_gmem;
		delete [] tvout_gmem;
		// release memory allocation: "image_r"
		delete [] tvin_image_r;
		// release memory allocation: "weights"
		delete [] tvin_weights;
		// release memory allocation: "out_r"
		delete [] tvin_out_r;
		// release memory allocation: "curr_layer_in_in_w"
		delete [] tvin_curr_layer_in_in_w;
		// release memory allocation: "curr_layer_in_in_h"
		delete [] tvin_curr_layer_in_in_h;
		// release memory allocation: "curr_layer_in_out_w"
		delete [] tvin_curr_layer_in_out_w;
		// release memory allocation: "curr_layer_in_out_h"
		delete [] tvin_curr_layer_in_out_h;
		// release memory allocation: "curr_layer_in_in_ch"
		delete [] tvin_curr_layer_in_in_ch;
		// release memory allocation: "curr_layer_in_out_ch"
		delete [] tvin_curr_layer_in_out_ch;
		// release memory allocation: "curr_layer_in_ker_w"
		delete [] tvin_curr_layer_in_ker_w;
		// release memory allocation: "curr_layer_in_ker_h"
		delete [] tvin_curr_layer_in_ker_h;
		// release memory allocation: "curr_layer_in_str_w"
		delete [] tvin_curr_layer_in_str_w;
		// release memory allocation: "curr_layer_in_str_h"
		delete [] tvin_curr_layer_in_str_h;
		// release memory allocation: "input_offset"
		delete [] tvin_input_offset;
		// release memory allocation: "weights_offset"
		delete [] tvin_weights_offset;
		// release memory allocation: "output_offset"
		delete [] tvin_output_offset;
		// release memory allocation: "quantized_multiplier"
		delete [] tvin_quantized_multiplier;
		// release memory allocation: "right_shift"
		delete [] tvin_right_shift;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

